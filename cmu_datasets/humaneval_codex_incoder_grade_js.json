[
  {
    "intent": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n",
    "task_id": "99",
    "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n",
    "simplified_intent": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
    "snippet": [
      "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return Math.round(value) === value ? Math.round(value) : Math.abs(value - Math.round(value))\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var closest = null;\n    var diff = Math.abs(value - closest_integer(value));\n    var abs = Math.abs(value);\n    if(diff <= abs){\n        closest = value;\n    }\n    else {\n        var remain = value - closest_integer(value);\n        var round = Math.round(remain / diff) * diff;\n        closest = closest_integer(round);\n    }\n    return closest;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var closest_integer = Number(value);\n  var diff = Number(value) - closest_integer;\n  while(diff >= 0) {\n    closest_integer = Math.round(closest_integer);\n    diff = Number(value) - closest_integer;\n  }\n  return closest_integer;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let closerToFloor = num - floor;\n  let closerToCeil = ceil - num;\n  if(closerToFloor < closerToCeil){\n    return floor;\n  } else {\n    return ceil;\n  }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "value = parseFloat(value)\n  return Math.round(value)\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return Math.round(value);\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunction fix_spaces(text){\n",
    "task_id": "140",
    "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n",
    "simplified_intent": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
    "snippet": [
      "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return text.replace(/ /g,'_').replace(/\\s{2,}/g,'-');\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return text.replace(/\\s+/g, '_')\n             .replace(/((?= )[^\\S\\n])\\s/g, '$1_') \n             .replace(/^\\s*|\\s*$/g, '');\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return text.replace(/ /g, \"_\");\n}\n</code>\n<|/ a tags=jquery,javascript,replace,string,regex dscore=5 |>\n<| c |>\nI think this is the best answer here so far. I'd just like to add that you can add parameters to `fix_spaces` using an anonymous function, like so: `fix_spaces(text, _) {\n  return text.replace(/ /g, _);\n}`. That way you can pass any number of parameters (to fix any number of spaces). Also, you can just use `text.replace(/ /g, \"_\")` by itself.\n<|/ c |>\n<| c |>\nIn case someone is wondering: `text.replace(/ +/g, \"_\")` would also work. This would replace multiple spaces by a single underscore\n<|/ c |>\n<| c |>\n`text.replace(/ +/g, \"_\");` will fail if you have double space between words.\n<|/ c |>\n<| c |>\nFor a text with many spaces between words, this solution will fail. Like \"this   is a  long text\" will result in \"this_is_a_longtext\".\n<|/ c |>\n<| c |>\nThis solution is not working. `console.log(fix_spaces(\"   \"))` returns `\"\"`, while it should be `\"_\"`. Same thing with `fix_spaces(\"  \")`.\n<|/ c |>\n<| a dscore=5 tags=jquery,javascript,replace,string,regex |>\n<code>\nvar str = \"a b c d e\";\nstr = str.replace(/[b d]/g, '');\n</code>\nThis replaces any instance of b or d with a blank.\n<|/ a |>\n<| c |>\nThis does not do what was asked in the question. `'   c'` becomes `'c'`.\n<|/ c |>\n<| c |>\nIt does now... :)\n<|/ c |>\n<| c |>\nBut it doesn't. `' c d'` becomes `'c'`. The OP said that he wanted `'   c'` becoming `'_'`\n<|/ c |>\n<| c |>\nThat is what he stated in the comments.\n<|/ c |>\n<| c |>\nThis doesn't do what was asked. It will replace all instances of `b` and `d` with a blank, while he only wanted to replace spaces.\n<|/ c |>\n<| a dscore=5 tags=jquery,javascript,replace,string,regex |>\nHere's an example on how to replace spaces surrounded by letters by underscore.\n<code>\nvar str = 'a",
    "grade-2": {
      "execution": 0
    },
    "3": "var newStr = text.split(\"  \").join(\"-\");\n    var newStr2 = newStr.split(\" \").join(\"_\");\n    return newStr2;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let result = '';\n    let to_underscore = false;\n    let to_dash = false;\n    for(let i = 0; i < text.length; i++){\n        if(text[i] !== ' '){\n            result += text[i];\n            to_underscore = false;\n            to_dash = false;\n        }else{\n            if(to_underscore){\n                result += '-';\n                to_dash = true;\n            }else{\n                result += '_';\n                to_underscore = true;\n            }\n        }\n    }\n    return result;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return text.replace(/[ ]{2,}/g, '-').replace(/ /g, '_');\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfunction specialFilter(nums){\n",
    "task_id": "146",
    "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n",
    "simplified_intent": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let count = 0;\n  for(let i=0;i<nums.length;i++){\n    if(nums[i]%2==0 && nums[i]>10 && nums[i]%Math.pow(10,(Math.floor(nums.length/2)))%2==1){\n      count++;\n    }\n  }\n  return count;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var count = 0;\n  for(var i = 0; i < nums.length; i++){\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i - 1] %2 === 0 && nums[i + 1] % 2 === 1){\n      count++;\n    }\n  }\n  return count;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var num;\n  for(i=0;i<nums.length;i++){\n    num= nums[i];\n    if(num>10 && (num%10==1 ||num%10==3||num%10==5)&&(num%100!=13 && num%100!=14))\n      return 1;\n  }\n  return 0;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return nums.filter(x => x > 10 && x.toString().slice(0,1) % 2 != 0 && x.toString().slice(-1) % 2 != 0).length;\n}\n\nmodule.exports = {\n    parseStudentRecord,\n    isStudentId,\n    getStudentName,\n    getStudentId,\n    getStudentGrade,\n    getStudentInfo,\n    getStudentList,\n    getStudentInfoList,\n    getStudentsByGrade,\n    getStudentsByGradeRange,\n    addStudent,\n    addStudents,\n    removeStudentById,\n    removeStudentByName,\n    removeStudentsByGrade,\n    removeStudentsByGradeRange,\n    updateStudent,\n    updateStudents,\n    addGradeById,\n    addGradeByName,\n    removeGradeById,\n    removeGradeByName,\n    getStudentCountByGrade,\n    getStudentsByLetter,\n    getCountByLetter,\n    getAverageByGrade,\n    getStudentAverageById,\n    getStudentAverageByName,\n    getAverageByGradeAndGender,\n    getStudentInfoById,\n    getStudentInfoByName,\n    getFemaleCount,\n    getStudentsByName,\n    getBestStudent,\n    getWorstStudent,\n    getStudentsByAge,\n    getTotalCount,\n    getStudentListByAge,\n    getOlderStudents,\n    getYoungerStudents,\n    sortStudents,\n    getStudentsByAverage,\n    specialFilter\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let arr = [];\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && Math.abs(nums[i] % 10) % 2 != 0 && nums[i] % 2 != 0){\n            arr.push(nums[i]);\n        }\n    }\n    return arr.length;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var count = 0;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tvar elem = nums[i];\n\t\tif(elem > 10 && elem % 2 === 1 && Math.floor(elem / 10) % 2 === 1 && elem % 10 === 1 || elem % 10 === 3 || elem % 10 === 5 || elem % 10 === 7 || elem % 10 === 9){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name, extensions){\n",
    "task_id": "153",
    "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n",
    "simplified_intent": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
    "snippet": [
      "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let extensions_arr = extensions.map((x) => x.toUpperCase());\n    let arr = class_name.split(\"_\");\n    let strength = extensions_arr.map((x) => arr.filter(y => y.toUpperCase() === x).length);\n    \n    let index = strength.indexOf(Math.min(...strength));\n    return arr[0] + \"_\" + extensions_arr[index];\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let countUpperCaseLetters = 0,\n\t\tcountLowerCaseLetters = 0,\n\t\tmaxStrength = -1;\n\t\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet index = class_name.lastIndexOf('.');\n\t\tlet substring = class_name.substring(index + 1);\n\t\tlet lastChar = extensions[i].substr(-1);\n\t\t\n\t\tcountUpperCaseLetters += substring.length - lastChar.length;\n\t\tcountLowerCaseLetters += lastChar.length;\n\t\t\n\t\tlet strength = countUpperCaseLetters - countLowerCaseLetters;\n\t\t\n\t\tif(strength > maxStrength){\n\t\t\tmaxStrength = strength;\n\t\t}\n\t}\n\t\n\treturn class_name + extensions[maxStrength];\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let a = 0\n\tlet b = 0\n\tlet strength = -1\n\tlet extension_count = extensions.length\n\tfor(let i = 0; i < extension_count; i++){\n\t\tif(extensions[i].charAt(0) == class_name.charAt(0)){\n\t\t\ta += 1\n\t\t\tif(extensions[i].charAt(1) == class_name.charAt(1)){\n\t\t\t\tb += 1\n\t\t\t}\n\t\t}\n\t}\n\tif(b == 0){\n\t\treturn class_name\n\t}\n\tlet sm = class_name.match(/[A-Z]/g)\n\tlet cap = class_name.match(/[a-z]/g)\n\tlet cap_length = cap.length\n\tlet sm_length = sm.length\n\tlet aa_length = class_name.match(/[aeiou]/g)\n\tlet aa_length = aa_length.length\n\tlet a_length = aa.length\n\tlet a_length = a_length.length\n\tlet b_length = class_name.match(/[bcdfghjklmnpqrstvwxyz]/g)\n\tlet b_length = b_length.length\n\tif((sm_length + cap_length + aa_length + a_length + b_length) == 0){\n\t\treturn class_name + extensions[0]\n\t}\n\tif(a*(b/(a*sm_length)) < 1){\n\t\tstrength = 0\n\t} else {\n\t\tstrength = -b/(a*sm_length)\n\t}\n\treturn class_name + extensions[strength]\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var best_ext;\n    var best_score = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var score = extensions[i].replace(/[^A-Z]/g, '').length - extensions[i].replace(/[^a-z]/g, '').length;\n        if(score > best_score){\n            best_score = score;\n            best_ext = extensions[i];\n        }\n    }\n    return class_name + '.' + best_ext;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let maxStrength = 0;\n  let strongestExtension = '';\n  extensions.forEach(extension => {\n    let strength = extension.split('').filter(char => char === char.toUpperCase()).length - extension.split('').filter(char => char === char.toLowerCase()).length;\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = extension;\n    }\n  });\n  return `${class_name}.${strongestExtension}`;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let strongest = {ext: '', str: -Infinity};\n    for(let x = 0; x < extensions.length; x++){\n        let cap = 0, sm = 0;\n        for(let y = 0; y < extensions[x].length; y++){\n            if(extensions[x][y] >= 'A' && extensions[x][y] <= 'Z'){\n                cap++;\n            }\n            else{\n                sm++;\n            }\n        }\n        if(cap - sm > strongest.str){\n            strongest.ext = extensions[x];\n            strongest.str = cap - sm;\n        }\n    }\n    return class_name + '.' + strongest.ext;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row(lst, x){\n",
    "task_id": "87",
    "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n",
    "simplified_intent": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
    "snippet": [
      "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "//initialize row and col variables outside loop\n   var row = [];\n   var col = [];\n   \n   //sort rows in ascending order\n   var sorted_row = get_sorted_row(lst, true);\n   \n   //initialize counter variable\n   var counter = 0;\n   \n   //loop over rows\n   for (var i = 0; i < sorted_row.length; i++){\n      //initialize row variable with current row\n      row = sorted_row[i];\n      //initialize col variable with current column\n      col = sorted_row[i][0];\n      \n      //if current row contains x then return row and column\n      if (col == x){\n         return [(row, col)];\n      }\n      \n      //if current row does not contain x then increment counter\n      counter++;\n   }\n   \n   //if counter does not equal to length of row return empty array\n   if (counter != sorted_row.length){\n      return [];\n   }\n   \n   //else return empty array\n   return [];\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var tmp = [0,0];\n    var row = [0, 0];\n    var len = 0;\n    for(var i=0; i<lst.length; i++){\n        len += lst[i].length;\n        if(len == x){\n            tmp.push(row);\n            row = [0,0];\n            len = 0;\n        }\n        row.push(i);\n    }\n    tmp.push(row);\n    return tmp;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let arr=new Array(x);\n  lst.forEach((r,i)=>{\n    r.forEach((c,j)=>{\n      arr[j]=(i,c);\n    })\n  })\n  let res=new Array(lst.length);\n  for (let i=0;i<lst.length;i++){\n    let r=new Array(lst[i].length);\n    res[i]=r;\n    arr[i]\n    .sort((a,b)=>{\n      if (a[0]>b[0])\n        return -1;\n      if (a[0]<b[0])\n        return 1;\n      return 0;\n    })\n    .sort((a,b)=>{\n      if (a[1]>b[1])\n        return 1;\n      if (a[1]<b[1])\n        return -1;\n      return 0;\n    })\n    .forEach((c,j)=>{\n      res[i][j]=c;\n    })\n  }\n  return res;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "// write code here.\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        const element = lst[i];\n        for (let j = 0; j < element.length; j++) {\n            const e = element[j];\n            if (e === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n\nconst lst = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n];\n\nconst list = [\n    [],\n    [1],\n    [1, 2, 3]\n];",
    "grade-3": {
      "execution": 1
    },
    "4": "let res = []\n    for (let i = 0; i < lst.length; i++) {\n        let temp = lst[i].reduce((acc,item, ind) => item === x ? acc.concat([[i, ind]]) : acc, [])\n        res = res.concat(temp)\n    }\n    res.sort((a,b) => a[0] - b[0] || b[1] - a[1])\n    return res\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let sublst = lst[i];\n        for (let j = 0; j < sublst.length; j++) {\n            if (sublst[j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n",
    "task_id": "47",
    "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n",
    "simplified_intent": "Return median of elements in the list l.",
    "snippet": [
      "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var _len = l.length;\n    if(_len == 0){\n        throw new RangeError('Cannot calculate median of an empty array');\n    }else if(_len % 2 == 0){\n        return l[(_len-1)/2] + ((_len-1)/2) * median(l);\n    }\n    else if(_len % 2 == 1){\n        return l[(_len-1)/2];\n    }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "// Only calculate median when necessary\n  if(l.length <= 1){\n    return l[0];\n  }\n  l.sort(function(a, b){\n    return a - b;\n  });\n  var mid = l.length / 2;\n  var med = l[mid];\n  if(Math.abs(l[mid-1] - med)<Math.abs(l[mid] - med)){\n    return med;\n  }\n  else{\n    return l[mid-1];\n  }\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return Math.max.apply(Math, l);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(l.length === 0){\n        return NaN;\n    }\n    let k = Math.floor(l.length/2);\n    let m = 0;\n    l.sort(function(a, b){return a-b});\n    if(l.length % 2 === 0){\n        m = (l[k-1] + l[k])/2;\n    }else{\n        m = l[k];\n    }\n    return m;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if (l.length % 2 == 0){\n        return (l[l.length/2-1] + l[l.length/2])/2\n    }\n    else {\n        return l[Math.floor(l.length/2)]\n    }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(isEmpty(l)){\n    return 0;\n  }\n  else{\n    return (first(l) + last(l)) / 2;\n  }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction sort_numbers(numbers){\n",
    "task_id": "19",
    "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n",
    "simplified_intent": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
    "snippet": [
      "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "numbers = numbers.split(\" \");\n  numbers.sort(function(a,b){\n    return parseInt(a) - parseInt(b);\n  });\n  numbers = numbers.join(\" \");\n  return numbers;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return sort_numbers_sort(numbers.split(\" \").map(Number)).join(\" \");\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "numbers = numbers.split(' ');\n    var return_string = '';\n    var sorted_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j < 9; j++){\n            if(numbers[i] == numbers[j]){\n                sorted_numbers.push(numbers[i]);\n            }\n        }\n    }\n    for(var i = 0; i < sorted_numbers.length; i++){\n        for(var j = 0; j < 9; j++){\n            if(sorted_numbers[i] == sorted_numbers[j]){\n                sorted_numbers.splice(j, 1);\n            }\n        }\n    }\n    sorted_numbers.sort();\n    for(var i = 0; i < sorted_numbers.length; i++){\n        return_string += sorted_numbers[i] + ' ';\n    }\n    return return_string.trim();\n}\n</code>\n<|/ a tags=javascript,sorting,arrays,algorithm,string |>\n<| c |>\nIt would probably be better to move the logic to sort numbers to the sorting method itself.\n<|/ c |>\n<| a |>\nThis is an old question but here's a solution that doesn't use any loops, just nested if/elses. I find this easier to maintain than sorting numbers.\n<code>",
    "grade-2": {
      "execution": 0
    },
    "3": "let s = '';\n    let nums = numbers.split(' ');\n    nums.sort((a, b) => lookup_number(a) - lookup_number(b));\n    for (let n of nums)\n        s += n + ' ';\n    return s.trimRight();\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "// PUT YOUR CODE HERE\n    let numberals = numbers.split(' ');\n    for (let i = 0; i < numberals.length; i++) {\n        numberals[i] = numberals[i].replace('zero', '0');\n        numberals[i] = numberals[i].replace('one', '1');\n        numberals[i] = numberals[i].replace('two', '2');\n        numberals[i] = numberals[i].replace('three', '3');\n        numberals[i] = numberals[i].replace('four', '4');\n        numberals[i] = numberals[i].replace('five', '5');\n        numberals[i] = numberals[i].replace('six', '6');\n        numberals[i] = numberals[i].replace('seven', '7');\n        numberals[i] = numberals[i].replace('eight', '8');\n        numberals[i] = numberals[i].replace('nine', '9');\n    }\n    numberals.sort(function(a, b){return a-b});\n    for (let i = 0; i < numberals.length; i++) {\n        numberals[i] = numberals[i].replace('0', 'zero');\n        numberals[i] = numberals[i].replace('1', 'one');\n        numberals[i] = numberals[i].replace('2', 'two');\n        numberals[i] = numberals[i].replace('3', 'three');\n        numberals[i] = numberals[i].replace('4', 'four');\n        numberals[i] = numberals[i].replace('5', 'five');\n        numberals[i] = numberals[i].replace('6', 'six');\n        numberals[i] = numberals[i].replace('7', 'seven');\n        numberals[i] = numberals[i].replace('8', 'eight');\n        numberals[i] = numberals[i].replace('9', 'nine');\n    }\n    return numberals.join(' ');\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var new_number_array = [];\n\tvar array_of_numbers = numbers.split(\" \");\n\tfor (var i = 0; i < array_of_numbers.length; i++) {\n\t\tswitch(array_of_numbers[i]){\n\t\t\tcase 'zero':\n\t\t\t\tnew_number_array.push(0);\n\t\t\t\tbreak;\n\t\t\tcase 'one':\n\t\t\t\tnew_number_array.push(1);\n\t\t\t\tbreak;\n\t\t\tcase 'two':\n\t\t\t\tnew_number_array.push(2);\n\t\t\t\tbreak;\n\t\t\tcase 'three':\n\t\t\t\tnew_number_array.push(3);\n\t\t\t\tbreak;\n\t\t\tcase 'four':\n\t\t\t\tnew_number_array.push(4);\n\t\t\t\tbreak;\n\t\t\tcase 'five':\n\t\t\t\tnew_number_array.push(5);\n\t\t\t\tbreak;\n\t\t\tcase 'six':\n\t\t\t\tnew_number_array.push(6);\n\t\t\t\tbreak;\n\t\t\tcase 'seven':\n\t\t\t\tnew_number_array.push(7);\n\t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\t\t\tnew_number_array.push(8);\n\t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\t\t\tnew_number_array.push(9);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tfor (var i = 0; i < new_number_array.length; i++) {\n\t\tfor (var j = i; j < new_number_array.length; j++) {\n\t\t\tif (new_number_array[i] > new_number_array[j]) {\n\t\t\t\ttemp = new_number_array[i];\n\t\t\t\tnew_number_array[i] = new_number_array[j];\n\t\t\t\tnew_number_array[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (var i =",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n",
    "task_id": "115",
    "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n",
    "simplified_intent": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let leng = grid.length;\n  let buckets = Array.from(Array(leng).fill(0).map(() => Array.from(Array(leng).fill(0)));\n  for(let i=0; i<buckets.length; i++){\n    for(let j=0; j<buckets[i].length; j++){\n      if(grid[i][j]==1){\n        buckets[i][j]=1;\n        buckets[i][j+1]=buckets[i][j]+1;\n      }\n      if(buckets[i][j+1]>capacity){\n        buckets[i][j+1]-=capacity;\n      }\n    }\n  }\n  let count = 0;\n  for(let i=0; i<leng; i++){\n    for(let j=0; j<leng; j++){\n      if(buckets[i][j]!=0){\n        count+=buckets[i][j]\n      }\n    }\n  }\n  return count;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if (grid[0].length == 0){\n        return 0;\n    }\n    return dfs(grid, 0, grid.length - 1, 0, capacity);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "const row= grid.length\n    const col= grid[0].length\n    let res= 0\n    for(let i=0; i< row; i++){\n        for(let j=0; j<col; j++){\n            if(grid[i][j] ===1){\n                let tmp= 0\n                while(grid[i][j]===1){\n                    tmp++\n                    grid[i][j]= 0\n                }\n                res+= Math.ceil((capaciy-tmp)/ (capacy-1))\n            }\n        }\n    }\n    return res\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let max = 0;\n    for(let row of grid){\n        for(let depth of row){\n            max = Math.max(max, depth);\n        }\n    }\n    return max * capacity;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let maxFill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            maxFill = Math.max(maxFill, grid[i][j]);\n        }\n    }\n    return Math.min(maxFill, capacity);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let max_fill = 0\n  let count = 0\n  for(let i = 0; i < grid.length; i++){\n    let fill = 0\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] == 1){\n        fill++\n      }\n    }\n    if(fill > max_fill){\n      max_fill = fill\n    }\n  }\n  count = Math.ceil(max_fill / capacity)\n  return count\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\nfunction smallest_change(arr){\n",
    "task_id": "73",
    "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n",
    "simplified_intent": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
    "snippet": [
      "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "for(i=arr.length-1; i>=0; i--){\n    smallest = i;\n    for(j=i; j<arr.length; j++){\n      if(arr[j]<arr[smallest]){\n        smallest = j;\n      }\n    }\n    if(arr[i]<arr[smallest]){\n      arr.splice(smallest,0,arr[i]);\n      arr.splice(i,1);\n    }\n  }\n  return arr.length;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var min = Number.MAX_VALUE;\n  for(var i = 0; i < arr.length; i++){\n    var tempArr = [arr[i]];\n    while(tempArr[0] != arr[i]){\n      tempArr.unshift(tempArr.shift());\n    }\n    min = Math.min(tempArr.length, min);\n  }\n  return min;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let smallest = Math.min(...arr);\n\treturn smallest.reduce( (prev, cur) => {\n\t\tfor(let i = 0; i < (arr.length - 1); i++){\n\t\t\tif( arr[i] > arr[i + 1] ){\n\t\t\t\tarr[i] = arr[i+1];\n\t\t\t\tarr[i+1] = prev;\n\t\t\t\tprev = cur;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn prev;\n\t}, arr[0]);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let count = 0;\n    for(let i = 0; i < arr.length / 2; i++){\n        if(arr[i] !== arr[arr.length - 1 - i]){\n            count++;\n        }\n    }\n    return count;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var left = 0;\n  var right = arr.length - 1;\n  var changes = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      changes++;\n    }\n    left++;\n    right--;\n  }\n  return changes;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] !== arr[arr.length-1-i]){\n            count++;\n        }\n    }\n    return count;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings, prefix){\n",
    "task_id": "29",
    "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n",
    "simplified_intent": "Filter an input list of strings only for ones that start with a given prefix.",
    "snippet": [
      "  return strings.filter(x => x.startsWith(prefix));\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var returnList = [];\n    strings.forEach(function(string, index, strings) {\n        if (string.startsWith(prefix)) {\n            returnList.push(string);\n        }\n    });\n    return returnList;\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "return strings.filter(function(string){\n\t\treturn string.indexOf(prefix) === 0;\n\t});\n}",
    "grade-1": {
      "execution": 1
    },
    "2": "var filtered_strings = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].substr(0, prefix.length) == prefix){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "return _.filter(strings, function(str){ return _.str.startsWith(str, prefix); });\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let result = []\n\tfor (let i = 0; i < strings.length; i++) {\n\t\tif (strings[i].startsWith(prefix)){\n\t\t\tresult.push(strings[i])\n\t\t}\n\t}\n\treturn result\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return strings.filter(function(string){return string.startsWith(prefix)});\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n",
    "task_id": "31",
    "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n",
    "simplified_intent": "Return true if a given number is prime, and false otherwise.",
    "snippet": [
      "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let i;\n  let x;\n  \n  // Set up initial and test values.\n  if(n === 0) return false;\n  if(n === 1) return true;\n  i = Math.floor(Math.sqrt(n));\n  x = n/i;\n  \n  // While i is greater than or equal to 1, the number is composite.\n  while(i > 1){\n    // If i is a divisor, return true.\n    if(n % i == 0) return true;\n    // Otherwise, divide i by 2, until i is less than or equal to 1.\n    i = Math.floor(i / 2);\n  }\n  \n  // When we get here, all primes beyond i-1 have been factored out of n.\n  return false;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(n == 1)\n\t\treturn false;\n\tif(n%2 == 0 || n%3 == 0)\n\t\treturn false; //n is divisible by 2 or 3\n\tvar mth=Math.sqrt(n);\n\tfor(var i=5;i<mth;i+=6){\n\t\tif(n%(i+2)==0 || n%(i+4)==0 || n%(i+6)==0)\n\t\t\treturn false; //n is divisible by i, i+2, i+4 or i+6\n\t}\n\treturn true;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var sqrtn = Math.sqrt(n);\n  if(n % 2 === 0){\n    return false;\n  }\n  for(var i = 3; i <= sqrtn; i += 2){\n    if(n % i === 0){\n      return false;\n    }\n  }\n  return true;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if (n === 1) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "// your code here\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunction exchange(lst1, lst2){\n",
    "task_id": "110",
    "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n",
    "simplified_intent": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
    "snippet": [
      "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Write your code here\n  if(lst1.length !== lst2.length){\n    return \"NO\"\n  }\n  if(lst1.length == 0){\n    return \"NO\"\n  }\n  if(lst1.length == 1){\n    return true\n  }\n  let evens = []\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 == 0){\n      evens.push(lst1[i])\n    }\n  }\n  if(evens.length == 0){\n    return \"NO\"\n  }\n  for(let i = 0; i < evens.length; i++){\n    if(evens.includes(lst2[i])){\n      return \"NO\"\n    }\n  }\n  return true\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var result = true;\n    for(var i = 0; i<= lst2.length; i++){\n        for(var j = 0; j<=lst1.length; j++){\n            if(lst1[j] > lst2[i]){\n                lst1[j] = lst1[j-1];\n            }\n            if(lst1[j] < lst2[i]){\n                lst1[j] = lst1[j+1];\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript dscore=0 |>\n<code>",
    "grade-1": {
      "execution": 0
    },
    "2": "let even = []\n  for (let i = 0; i < lst1.length; i++){\n    if (lst1[i] % 2 != 0) even.push(lst1[i])\n  }\n  let odd = []\n  for (let i = 0; i < lst2.length; i++){\n    if (lst2[i] % 2 != 0) odd.push(lst2[i])\n  }\n  if (even.length != odd.length) return \"NO\"\n  for (let i = 0; i < even.length; i++){\n    if (even[i] != odd[i]) return \"NO\"\n  }\n  return \"YES\"\n}\n\nexchange([2, 4, 6, 8, 10, 12], [8, 4, 12, 6, 10, 2]) // YES\nexchange([2, 4, 6, 8, 10, 12], [8, 4, 6, 12, 10, 2]) // YES\nexchange([2, 4, 6, 8, 10, 12], [8, 4, 6, 10, 12, 2]) // YES\nexchange([2, 4, 6, 8, 10, 12], [8, 4, 6, 10, 2, 12]) // NO",
    "grade-2": {
      "execution": 0
    },
    "3": "for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          let t = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = t;\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let sum1 = 0, sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i];\n    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i];\n    }\n    if(sum1 % 2 === 0 || sum2 % 2 === 0){\n        return \"YES\";\n    }\n    return \"NO\";\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      return \"YES\";\n    }\n    for (var j = 0; j < lst2.length; j++) {\n      if (lst2[j] % 2 === 0) {\n        lst1[i] = lst2[j];\n        return \"YES\";\n      }\n    }\n  }\n  return \"NO\";\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n",
    "task_id": "61",
    "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n",
    "simplified_intent": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
    "snippet": [
      "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Loop through all brackets characters (ignoring parens).\n    for (var i=0; i<brackets.length; i++){\n        // If it's an opening bracket, make sure the corresponding closing bracket exists.\n        if (brackets[i] === \")\"){\n            \n            // If it doesn't, this isn't a correct bracketing.\n            if (!(brackets[i+1] == \"(\")){\n                return false;\n            }\n        }\n    }\n    \n    // If we get here, this bracketing is correct.\n    return true;\n}\n</code>\nA more advanced version of this solution is described here.\n<|/ a tags=python,regex |>\n<| c |>\nI like it. I was thinking of doing it in a different way, but then came out with this idea. Thanks.\n<|/ c |>\n<| c |>\nJust wanted to add, I used the RegEx from the previous solution, but changed it to include some error checking to make sure that the brackets are always balanced.\n<|/ c |>\n<| c |>\n`(?<open>\\()|(?<-open>\\))|(?<open>\\()|(?<close>\\))|(?<-open>\\))|(?<close>\\()|(?<open>\\))|(?<close>\\()|(?<close>\\))`\n<|/ c |>\n<| c |>\nHow would you do it with regex101.com? It doesn't seem to be working.\n<|/ c |>\n<| c |>\nI used that as a guide for my answer. Did you copy/paste my solution? It looks about right.\n<|/ c |>\n<| a dscore=5 tags=python,regex |>\nA variation on a theme suggested in the comments:\n<code>\ndef correct_bracketing(s):\n    return len(s[s.index('(') + 1:s.index(')')-1]) == 2\n</code>\n<|/ a |>\n<| c |>\nWhat if I want to test if one bracketing pair is inside another bracketing pair? `(')(abc(')` is inside `(')abc((')` but it's outside `('abc((')`. Can I do this?\n<|/ c |>\n<| c |>\n: yes, just use `[...]` instead of `'...'`.\n<|/ c |>\n<| c |>\nI get a `TypeError: object of type 'int' has no len()`\n<|/ c |>\n<| c |>\n: sorry, I didn't test it. I would expect `correct_bracketing` to be a function that returns true or false, so that `len",
    "grade-0": {
      "execution": 0
    },
    "1": "brackets = brackets.replace(/\\(|\\)/g, \"\"); //remove the brackets from the string.\n    if(brackets.length != brackets.toUpperCase().length)\n        return false;\n    var length = brackets.length;\n    for(var i = 0;i < length; i++){\n        if(brackets.toUpperCase()[i] != brackets.charAt(i))\n            return false;\n    }\n    return true;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "brackets = brackets.split(\"\");\n\tlet opening_brackets = brackets.filter((bracket_number) => bracket_number === 0);\n\tlet closing_brackets = brackets.filter((bracket_number) => bracket_number === 1);\n\t\n\treturn opening_brackets.length + closing_brackets.length === brackets.length;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const stack = [];\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] === '('){\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i] === ')'){\n            if (stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "//Step 1: How to do parentheses matching problem?\n    //Step 2: How to handle errors?\n    //Step 3: How to use stack?\n    //Step 4: How to find the current parentheses is a left parentheses or right parentheses?\n    //Step 5: How to compare the left parentheses with right parentheses?\n    //Step 6: How to judge the parentheses is error or not?\n    //Step 7: How to output the result?\n    //Step 8: How to write the test case?\n    if(brackets.length == 0) {\n        return false;\n    }\n    var bracket_list = brackets.split(\"\");\n    var stack = [];\n    for(var i = 0; i < bracket_list.length; i++) {\n        if(bracket_list[i] == \"(\") {\n            stack.push(bracket_list[i]);\n        } else if(bracket_list[i] == \")\") {\n            if(stack.length == 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var num_left = 0;\n    var num_right = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            num_left++;\n        }\n        else{\n            num_right++;\n        }\n    }\n    if (num_left == num_right){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nfunction tri(n){\n",
    "task_id": "130",
    "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n",
    "simplified_intent": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
    "snippet": [
      "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let result = [];\n    \n    if(n === 1) return [3, 1];\n    \n    for(let i = 0; i < (n + 1) / 2; i++) {\n        result.push(tri(n - i) + tri(n - i - 1) + tri(n + i));\n    }\n    \n    return result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(n === 0)\n    return [];\n  if((n & 1) === 0)\n    return [((n / 2) | ((n / 2) & 1)) + 1, ((n / 2) | ((n / 2) & 1)) + 1, (n / 2)];\n  return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var result = []\n  for(var i = 1; i < n; i++){\n    result.push(tri(i))\n  }\n  return result\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let arr = [1, 3, 2];\n  while (arr.length < n + 1) {\n    let num = arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3];\n    arr.push(num);\n  }\n  return arr;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let arr = [1, 3, 2];\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 3];\n  for (let i = 3; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "const tribonacciSequence = [1, 3, 2];\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n === 3) {\n    return tribonacciSequence;\n  }\n  let counter = 3;\n  while (counter < n) {\n    tribonacciSequence.push(tribonacciSequence[counter] + tribonacciSequence[counter - 1] + tribonacciSequence[counter - 2]);\n    counter++;\n  }\n  return tribonacciSequence;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nfunction strlen(string){\n",
    "task_id": "23",
    "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n",
    "simplified_intent": "Return length of given string",
    "snippet": [
      "  return string.length;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return utf8Length(string);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return string.length || 0;\n}",
    "grade-1": {
      "execution": 1
    },
    "2": "if(!string){\n\t\treturn 0;\n\t}\n\treturn string.length||0;\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "var stringLength = 0;\n  while(string[stringLength] != undefined){\n    stringLength++;\n  }\n  return stringLength;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return(string.length);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "//base case\n    if(string.length === 0){\n        return 0;\n    }\n    //recursive case\n    return 1 + strlen(string.slice(1));\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt(s){\n",
    "task_id": "89",
    "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n",
    "simplified_intent": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
    "snippet": [
      "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Create an array of 26 variables and a variable for the alphabet \n  // characters that will be rotated\n  let alphabet = `abcdefghijklmnopqrstuvwxyz`.split('');\n  let rotator = 0;\n\n  // While there are characters in the string to be rotated \n  while (s.length > 0){\n    // Rotate the alphabet to the left by one and store it in a temporary variable\n    let temp = alphabet[rotator];\n    // Rotate the alphabet to the next character by two and store it in \n    // another temporary variable\n    rotator += 2;\n    // Replace the current character with the next character in the alphabet\n    alphabet[rotator] = alphabet[rotator+1];\n    // Update the alphabet with that of the new alphabet\n    alphabet[rotator+1] = temp;\n    // Get the first character in the string to be rotated and remove it from the string\n    s = s.charAt(0).toLowerCase();\n  }\n  // Return the encrypted string\n  return alphabet.join(s);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "//Using .split() to turn the string into a character array.\n  var chars = s.split('');\n  \n  //Starting with the first character in the string, move two places in the \n  //alphabet at a time until we reach the end.\n  var encrypted = chars[0];\n  for(var i = 1; i < chars.length; i++){\n    var next = chars[i];\n    var newNext = encrypt(next);\n    var newEncrypted = encrypted + newNext;\n    encrypted = newEncrypted;\n  }\n  return encrypted;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var rotated_alphabet = \"\";\n    for(var i = 0; i < alphabet.length; i++){\n        rotated_alphabet += alphabet.charAt(alphabet.indexOf(alphabet.charAt(i)) + 2);\n    }\n    var rotated_s = \"\";\n    for(var i = 0; i < s.length; i++){\n        var current_char = s.charAt(i);\n        var current_index = alphabet.indexOf(current_char);\n        current_index += 2\n        rotated_s += rotated_alphabet.charAt(current_index);\n    }\n    return rotated_s;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  var beta = \"cdefghijklmnopqrstuvwxyzab\";\n  var str1 = \"\";\n  for(var i = 0; i < s.length; i++){\n      str1 += beta[alpha.indexOf(s[i])];\n  }\n  return str1;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var newString = \"\";\n    for(var i = 0; i < s.length; i++){\n        var index = alphabet.indexOf(s[i]);\n        if(index + 6 < 26){\n            newString += alphabet[index + 6];\n        }\n        else{\n            newString += alphabet[index + 6 - 26];\n        }\n    }\n    return newString;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var eString = \"\";\n  for(var i = 0; i < s.length; i++){\n    eString += String.fromCharCode(s.charCodeAt(i) + 2 * 2);\n  }\n  return eString;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n",
    "task_id": "64",
    "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n",
    "simplified_intent": "Add more test cases.",
    "snippet": [
      "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var vowels = ['a','e','i','o','u'];\n  return vowels.filter((v) => s.slice(-1) === v).length;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let vowels = ['a','e','i','o','u','y']\n  let count = 0\n  for(let i=0; i<s.length; i++){\n    if(vowels.indexOf(s[i]) > -1){\n      count++\n    }\n  }\n  return count\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var count = 0;\n   var vowel = \"aeiou\";\n   for(var i=0;i<s.length;i++){\n       if(vowel.indexOf(s[i])>=0){\n           count++;\n       }\n   }\n   return count;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var num=0;\n  var vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n  for(var i=0;i<s.length;i++){\n    if(vowels.indexOf(s[i].toLowerCase())!=-1){\n      num++;\n    }\n  }\n  return num;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for (var i = 0; i < s.length; i++){\n        if (vowels.indexOf(s[i].toLowerCase()) !== -1){\n            count++;\n        }\n    }\n    return count;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let word = s.toLowerCase();\n    let count = 0;\n    for(let i = 0; i < word.length; i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n",
    "task_id": "8",
    "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n",
    "simplified_intent": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
    "snippet": [
      "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// If list is empty, sum should be 0 and product should be 1.\n  if (numbers.length === 0) {\n    return (0,1);\n  }\n  \n  let sum = 0;\n  let product = 1;\n  \n  numbers.forEach(number => {\n    sum += number;\n    product *= number;\n  });\n  \n  return ([sum, product]);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(numbers.length == 0){\n    return (0, 1);\n  }\n\n  var sum = numbers.reduce(function (a, b){ return a + b; });\n  var product = numbers.reduce(function (a, b){ return a * b; });\n\n  return (sum, product);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer. It doesn't answer my question. But I appreciate your effort to help me. Your method is great but I don't think it will pass all the tests. Because there are some tests are still not passed. So I am thinking to use other methods. I have updated my question with my answer.\n<|/ c |>\n<| c |>\nThanks for accepting my answer. I'll update my answer to use your method, and also update my question to show you how to use my method to solve the problem you're working on. I'll see if I can work out what tests you missed and how to fix them. :)\n<|/ c |>\n<| c |>\nThanks. I appreciate your effort to help me. I think that your method is good enough. :)\n<|/ c |>\n<| c |>\nI'm glad you found my answer helpful, and I'm happy to hear that you got it working! And thanks for coming back and up-voting my answer. :)\n<|/ c |>\n<| a dscore=0 |>\nMy final solution which passes all tests:\n<code>\nconst sum_product = (numbers) => {\n  const sum = numbers.reduce((a, b)=>a+b);\n  const product = numbers.reduce((a, b)=>a*b);\n  if(sum===0 && product===1) return true\n  return false;\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nWhy do you need `if (sum===0 && product===1) return true` when the first two lines in your function body already do it?\n<|/ c |>\n<| c |>\nIt doesn't pass all the tests. The test cases are too much. I think the sum of numbers is equal 0, and the product of numbers is 1. But your method doesn't pass all the tests. So I am thinking to use other methods. I have updated my question with my answer.\n<|/ c |>\n<| a dscore=0 |>\nYou can try this :\n<code>\nconst sum_product = (numbers) => {\n  if (numbers.length === 0) return false\n  if(numbers.reduce((a,b)=> a + b)===0 && numbers.reduce((a,b)=> a * b)===1) return true\n  return false\n}\n</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nconst sum_",
    "grade-1": {
      "execution": 0
    },
    "2": "numbers.reduce(function(a, b){\n    return a + b;\n  });\n  numbers.reduce(function(a, b){\n    return a * b;\n  });\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var sum = 0;\n  var product = 1;\n  if (numbers.length == 0){\n    return [sum, product];\n  } else {\n    for (var i = 0; i < numbers.length; i++){\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n    return [sum, product];\n  }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var sum = 0, product = 1;\n    for(i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var sum = 0;\n    var product = 1;\n    if(numbers.length == 0){\n        return [sum, product];\n    }\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n",
    "task_id": "36",
    "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n",
    "simplified_intent": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
    "snippet": [
      "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "n = n - 1;\n  var count = 0;\n  while (n>0){\n    if(n % 11 == 0 || n % 13 == 0){\n      count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(n===0) return 0;\n  if(n%11===0) return 1;\n  if(n%13===0) return 2;\n  return fizz_buzz(n/10)+1;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var count = 0;\n    var result = \"\";\n\n    //Check if n is divisible by both 11 and 13\n    if(n % 11 == 0 && n % 13 == 0){\n        count++;\n    }\n\n    //Check if n is divisible by 11.\n    if(n % 11 == 0){\n        result += \"11\";\n        count++;\n    }\n\n    //Check if n is divisible by 13.\n    if(n % 13 == 0){\n        result += \"13\";\n        count++;\n    }\n\n    //Check if n is divisible by both 11 and 13.\n    if(n % 11 == 0 && n % 13 == 0){\n        count++;\n    }\n\n    return count;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var count = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tcount += i.toString().split(\"\").filter(function(a){return a == 7}).length;\n\t\t}\n\t}\n\treturn count;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let result = 0;\n\tfor(let i = 0; i < n; i++){\n\t\tlet currentDigit = i;\n\t\tif(currentDigit % 11 === 0 || currentDigit % 13 === 0){\n\t\t\tif(currentDigit === 7){\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\twhile(currentDigit > 0){\n\t\t\t\tif(currentDigit % 10 === 7){\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t\tcurrentDigit = (currentDigit - currentDigit % 10) / 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let count = 0;\n    for(let i = 1; i < n; i++){\n        if((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')){\n            count++;\n        }\n    }\n    return count;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\nfunction string_xor(a, b){\n",
    "task_id": "11",
    "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n",
    "simplified_intent": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
    "snippet": [
      "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return String.fromCharCode(\n        (a.charCodeAt(0) ^ b.charCodeAt(0))\n    );\n}\n</code>\nIf you would like to be able to perform binary operations on any type of input, you would need to first convert the input into an array of integers. Then perform the operations and then convert the results back to a string. The above code is an example of how to perform binary operations on strings and produce a string. You could also perform the same operations on floats or doubles.\nThe above code was written as a JavaScript function and tested in node version v10.16.0.\n<|/ a tags=javascript |>\n<| a tags=javascript dscore=3 |>\nYou can't. JavaScript is strongly typed, so only primitives can be assigned to variables.\nYou can, however, use a string as input and convert it to an appropriate number by converting it to a number using +:\n<code>\nvar a = +prompt(\"Enter 1st Number:\");\nvar b = +prompt(\"Enter 2nd Number:\");\n</code>\n<|/ a |>\n<| c |>\n`prompt()` returns a string in this case. `+` will coerce it to a number if needed.\n<|/ c |>\n<| c |>\nAgreed, but in the question, it seems like the OP has already entered them as strings in the prompts\n<|/ c |>\n<| c |>\nThis worked like a charm. Thanks. I really appreciate your help.\n<|/ c |>\n<| a tags=javascript |>\nWhen a user inputs a string into a prompt it will return it as a string. You can however add an argument which specifies how to convert it to an integer.\n<code>\nvar a = prompt(\"Enter 1st Number:\");\nvar b = prompt(\"Enter 2nd Number:\");\nvar c = parseInt(a, 10);\nvar d = parseInt(b, 10);\n</code>\nIf the user enters an invalid input like 'abcd' this will return NaN and you can check if it is not a number (NaN is \"Not a Number\"):\n<code>\nif(isNaN(c)){\n   alert('Please input a valid number');\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nTry this one\n<code>\nvar a = prompt(\"Enter 1st Number:\");\nvar b = prompt(\"Enter 2nd Number:\");\n\nvar c = Number(a);\nvar d = Number(b);",
    "grade-0": {
      "execution": 0
    },
    "1": "return \"00000000\".split(\"\").map(function (i) {\n    return parseInt(a) ^ parseInt(b);\n  }).reduce(function (i) { return ((i >> 1 & 1) ? \"1\" : \"0\") + i; }, '');\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return a.replace(/./g, function(x){return x^b});\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(a.length != b.length){\n    return \"Not the same length\";\n  }\n  var newString = '';\n  for(var i = 0; i < a.length; i++){\n    if(a[i] == b[i]){\n      newString += '0';\n    }\n    else{\n      newString += '1';\n    }\n  }\n  return newString;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return (a.split('').map(function(item, index){\n    return Number(item) !== Number(b[index]) ? '1' : '0';\n  })).join('');\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var result = '';\n  a = a.split('');\n  b = b.split('');\n  for(var i = 0; i < a.length; i++){\n    if (a[i] === b[i]){\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n",
    "task_id": "25",
    "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n",
    "simplified_intent": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
    "snippet": [
      "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let factors = []\n\tlet factor = 1\n\tlet p = 2\n\twhile(p < n){\n\t\twhile(n % p === 0){\n\t\t\tfactors.push(p)\n\t\t\tn /= p\n\t\t}\n\t\tp++\n\t}\n\tif(n > 1){\n\t\tfactors.push(n)\n\t}\n\treturn factors\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "var primeFactors=[];\n    var factors=[];\n    var p=2;\n    while(p <= n){\n        factors=[];\n        for(var i = 1;i <= p; ++i){\n            while(n % p===0 && n !== 1){\n                factors.push(p);\n                n /= p;\n            }\n        }\n        primeFactors=[];\n        for(var i=0;i<factors.length;++i){\n            var mult=factors[i];\n            for(var j=0;j<primeFactors.length;++j){\n                if(primeFactors[j]+1 === mult)\n                    break;\n            }\n            primeFactors.push(mult);\n        }\n        p+=1;\n    }\n    return primeFactors;\n}\n</textarea>\n</div>\n\n    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n        theme: \"default\"\n      });\n    </script>\n    <h3>The BigInt Class</h3>\n    <textarea id=\"code2\" class=\"CodeMirror-code\">\n# class BigInt\n# Integer class which can store numbers of any size.\n# Extends Integer class which can store numbers larger than a 64 bit integer in 64 bits.\n\nclass BigInt:\n    def __init__(self, num = \"\"):\n        if isinstance(num, str):\n            self.val = eval(num)\n        else:\n            self.val = num\n\n    def __add__(self, other):\n        return BigInt(self.val + other)\n\n    def __mul__(self, other):\n        return BigInt(self.val * other)\n\n    def __div__(self, other):\n        return BigInt(self.val / other)\n\n    def __repr__(self):\n        return str(self.val)\n    \n    # Function to convert string in exponential form of number to decimal form.\n    @staticmethod\n    def exponentialToDecimal(num):\n        num, power = BigInt.__split_exponential(num)\n        result = BigInt.__multiply_by_power(num, power)\n        return result\n\n    @staticmethod\n    def __split_exponential(num):\n        power = 1\n        product = 1\n        digits = []\n        digit = 0\n        for c in num:\n            if c == 'e' or c == 'E':\n                power *= 10\n                digits.append(digit)\n                digit = 0\n            else:\n                digit += 1\n        if digit != 0:\n            digits.append(digit)\n        return num, power\n\n    @staticmethod\n    def __multiply_by_power(num, power):\n        if power < 0:\n            num = BigInt.__zero_padding(num, power)\n            return BigInt.__multiply_by_power(num, -power)\n        else:\n            return num * BigInt.__power_of_ten(power)\n\n    @staticmethod\n    def __zero_padding(num, power):\n        if len(num) < power:\n            num = ('0' * (power - len(num",
    "grade-1": {
      "execution": 0
    },
    "2": "if(!n){\n    return [];\n  }\n  var factors = [];\n  factors.push(n);\n  for(var i = 2; i < Math.sqrt(n); i++){\n    if(n % i === 0){\n      factors.push(i);\n      n = n / i;\n      factors.forEach(function(factor){\n        factors.push(factor * i);\n      });\n      break;\n    }\n  }\n  return factors;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "for (var arr = [], i = 2; i <= n; i++) {\n    while ((n % i) === 0) {\n      arr.push(i);\n      n /= i;\n    }\n  }\n  return arr;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let primeFactors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            primeFactors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return primeFactors;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var res = [];\n    while(n % 2 === 0){\n        res.push(2);\n        n /= 2;\n    }\n    for(var i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i === 0){\n            res.push(i);\n            n /= i;\n        }\n    }\n    if(n > 2){\n        res.push(n);\n    }\n    return res;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nfunction below_zero(operations){\n",
    "task_id": "3",
    "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n",
    "simplified_intent": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
    "snippet": [
      "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return operations.some(function(x){\n        return x < 0;\n    });\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return operations.reduce((acc,elem)=>{\n\t\tconst depositOrWithdrawal = elem[0] === \"d\" || elem[0] === \"w\";\n\t\treturn depositOrWithdrawal ? acc : elem[1] < 0 ? acc : false;\n\t},true)\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// Use loops to check each element of the array for being below zero\n    for(let i = 0; i < operations.length; i++){\n        if(operations[i] <= 0){\n            return true;\n        }\n    }\n    return false;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var account_balance = 0;\n    for (var i = 0; i < operations.length; i++){\n        account_balance += operations[i];\n        if (account_balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "}",
    "grade-4": {
      "execution": 0
    },
    "5": "for(let i = 0; i < operations.length; i++){\n        if(operations[i] < 0){\n            return true;\n        }\n    }\n    return false;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n",
    "task_id": "72",
    "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) \u279e false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) \u279e false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) \u279e true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) \u279e true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n",
    "simplified_intent": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
    "snippet": [
      "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let maxWight = w;\n\tlet palindrome = q.reverse();\n\tpalindrome.sort((a,b)=>a-b);\n\t\n\tlet maxSum = palindrome.map(e=>Math.abs(e)).reduce((a,b)=>a+b);\n\t\n\treturn maxWight < maxSum;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(q.length == 0){\n\t\treturn true;\n\t}\n\tif(q.splice(0, q.length).reverse().join() == q.toString()){\n\t\tif(q.length == 0 || q.sum() <= w){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (w<0)\n        return false;\n    \n    let res = [];\n    for(let i=0;i<q.length;i++)\n        res.push(q[i].weight);\n    \n    for(let i=0;i<q.length;i++)\n    {\n        if (q[i].weight<=w)\n            continue;\n        \n        let w1 = w-q[i].weight;\n        let w2 = i-w;\n        let n1 = q[i].value;\n        let n2 = q[w2].value;\n        \n        if (w1+n2==0)\n            return true;\n        else\n            return false;\n    }\n    return false;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "for(let i = 0; i<q.length/2; i++){\n        if(q[i] !== q[q.length-1-i]){\n            return false;\n        }\n    }\n    if(q.reduce((a,b)=>a+b)<=w){\n        return true;\n    }else{\n        return false;\n    }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let sum = 0;\n    let first = q[0];\n    let second = q[q.length-1];\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    return sum <= w && first === second;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "const sum = q.reduce((total, num) => total + num);\n    const isBalanced = q.join(\"\") === q.reverse().join(\"\");\n    return isBalanced && sum <= w ? true : false;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nfunction digitSum(s){\n",
    "task_id": "66",
    "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n",
    "simplified_intent": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
    "snippet": [
      "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var sum = 0;\n\tfor(var i=0; i<s.length; i++){\n\t\tsum += toUpper(s.charCodeAt(i));\n\t}\n\treturn sum;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return s.split('').filter(function(d){\n    return (d >= 'a' && d <= 'z') || (d >= 'A' && d <= 'Z');\n  }).reduce(function(sum, char){\n    return (sum + (char.charCodeAt(0) - 'a'.charCodeAt(0)) * Math.pow(26, (char.length-1)));\n  }, 0);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return s.split('').filter(c => c.match(/\\d/)).map(c => c.charCodeAt(0) - '0'.charCodeAt(0) + 1).reduce((a,b) => a + b);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      total += s.charCodeAt(i);\n    }\n  }\n  return total;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return [...s].reduce((acc,v)=>acc+v.charCodeAt(),0)\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let array = s.split('');\n    let sum = 0;\n    for(let i = 0; i < array.length; i++){\n        if(array[i] === array[i].toUpperCase()){\n            sum += array[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n",
    "task_id": "128",
    "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n",
    "simplified_intent": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
    "snippet": [
      "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var ret = 0;\n    for(var i=0; i<arr.length; i++){\n        var num = arr[i];\n        while((num < 0) && (i !== arr.length-1)){\n            num = -num;\n            i++;\n        }\n        var sign = num % 2 ? 1 : -1;\n        ret += sign * Math.pow(Math.abs(num), 2);\n    }\n    return ret;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i] * (arr[i] >= 0 ? 1 : -1);\n    }\n    return sum;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var n = arr.length;\n  var sum = 0;\n  for(var i=0; i<n; i++){\n    sum += Math.pow(arr[i], i);\n  }\n  return sum < 0 ? 0 : sum;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if (arr.length === 0) {\n    return;\n  }\n\n  var signs = 1;\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      signs *= -1;\n    } else if (arr[i] > 0) {\n      signs *= 1;\n    } else {\n      signs *= 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return sum * signs;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let sum = 0;\n  let prod = 1;\n  if(arr.length !== 0){\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] > 0){\n        sum += arr[i];\n        prod *= 1;\n      }\n      else if(arr[i] < 0){\n        sum += Math.abs(arr[i]);\n        prod *= -1;\n      }\n      else{\n        sum += 0;\n        prod *= 0;\n      }\n    }\n    return sum * prod;\n  }\n  else{\n    return null;\n  }\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "if(arr.length < 1){\n        return null;\n    }\n    var sum = arr.reduce(function(a, b){\n        return Math.abs(a) + Math.abs(b);\n    });\n    var signs = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signs *= -1;\n        }\n        else if(arr[i] == 0){\n            signs = 0;\n        }\n    }\n    return sum * signs;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n",
    "task_id": "100",
    "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n",
    "simplified_intent": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
    "snippet": [
      "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var pile=[];\n  for(var i=0;i<n;i++)\n    pile.push(i);\n  pile.sort(function(a,b){\n    return b-a;\n  });\n  for(var i=0;i<pile.length;i++){\n    pile[i]+=1;\n  }\n  for(var i=0;i<pile.length;i++){\n    pile[i]-=1;\n  }\n  return pile;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=arrays,sorting,javascript |>\n<code>\nvar stones=3;\nvar arr=Array.apply(null,new Array(stones+1));\narr.forEach(function(val,i){\n  arr[i]=i+1;\n});\narr.forEach(function(val,i){\n  if(i%2===0)\n    arr[i]+=1;\n  else if(i%2!==0)\n    arr[i]-=1;\n});",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n % 2 == 0){\n        let num_stones = n + make_a_pile((n - 1) / 2);\n        return [num_stones];\n    }\n    else{\n        let num_stones = n + make_a_pile(n / 2);\n        return [num_stones];\n    }\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var p = [];\n    if(n%2===0) p.push(n);\n    else for(var i = 3; i<=n; i+=2){\n        p.push(i);\n    }\n    return p;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const stones = [n];\n  while (stones[stones.length - 1] !== 1) {\n    if (stones[stones.length - 1] % 2 === 0) {\n      stones.push(stones[stones.length - 1] - 1);\n    } else {\n      stones.push(stones[stones.length - 1] - 2);\n    }\n  }\n  return stones;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var arr = [];\n    for(var i = 0; i < n; i++){\n        if(i === 0){\n            arr.push(n);\n        }\n        else if(i % 2 !== 0){\n            arr.push(arr[i-1] + 2);\n        }\n        else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var result = [n];\n  for(var i = 1; i < n; i++){\n    if(n % 2 == 0){\n      n += 2;\n    }\n    else{\n      n += 1;\n    }\n    result.push(n);\n  }\n  return result;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n",
    "task_id": "84",
    "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n",
    "simplified_intent": "Given a positive integer N, return the total sum of its digits in binary.",
    "snippet": [
      "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let digits;\n  digits = parseInt(N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < digits.length; i++){\n    sum += parseInt(digits[i]);\n  }\n  return sum;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var ans = \"\";\n  var i = 0;\n  while( i < N ){\n    var tmp = Math.floor( N / 10 ) % 10;\n    ans += tmp;\n    N = N - tmp*10;\n    i++;\n  }\n  return ans;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(N<0){\n        return \"-1\";\n    }\n    if(N%2==0){\n        return \"0\";\n    }\n    return solve(N/2);\n    \n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let binString = N.toString(2);\n    let splitString = binString.split('');\n    let sumDigits = 0;\n    for(let i = 0; i < splitString.length; i++){\n        sumDigits += parseInt(splitString[i]);\n    }\n    return sumDigits;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "//write your code here\n    return (N >>> 0).toString(2).split('').reduce((a,b) => +a + +b);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return N.toString(2).split('').reduce((a,b)=>+a+ +b)\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n// digits(235) == 15\nfunction digits(n){\n",
    "task_id": "131",
    "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n",
    "simplified_intent": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
    "snippet": [
      "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var product = 1;\n\twhile(n>0){\n\t\tn--;\n\t\tif(n % 2 == 1){\n\t\t\tproduct *= 2;\n\t\t}\n\t\tn /= 2;\n\t}\n\treturn product;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return n%2 == 0 ? n*(n+1)/2 : n;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(n%2 == 0){\n\t\treturn n*(n+1)/2\n\t}\n\treturn 0\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let arr = n.toString().split('')\n  let ans = arr.filter(el => el % 2 !== 0)\n  return ans.length === 0 ? 0 : ans.reduce((a, b) => a * b)\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "//write your code here\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var str = n.toString();\n  var arr = str.split('');\n  var total = 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      total *= arr[i];\n    }\n  }\n  return total;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n",
    "task_id": "159",
    "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n",
    "simplified_intent": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
    "snippet": [
      "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "while(need > remaining && number > 0){\n        remaining = remaining - need;\n        number = number - 1;\n    }\n\n    var totalEaten = 0;\n    var leftOver = 0;\n    while(leftOver < number && remaining > 0){\n        remaining = remaining - 1;\n        leftOver = leftOver + 1;\n        totalEaten = totalEaten + 1;\n    }\n    return [[totalEaten, leftOver]];\n}\n\nvar day = 7;\nvar eatenCarrots = [6,8,10,11,13,16,18,19,20,21,22,23,25,26,27,28,29,30];\nvar carrots = eatenCarrots.length;\nvar hungryRabbit = eat(day-1, eatenCarrots, carrots);\n\nvar total = 0;\nfor(var i = 0; i < hungryRabbit.length; i++){\n    total = total + hungryRabbit[i][0];\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(remaining >= need){\n    remaining -= need;\n    return [number, remaining];\n  }\n  else{\n    return [number, remaining];\n  }\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let eatenCarrots = 0;\n  let leftCarrots = remaining;\n  while(eatenCarrots < number && leftCarrots > 0){\n    eatenCarrots += Math.floor(Math.random() * (leftCarrots + 1));\n    leftCarrots -= eatenCarrots;\n  }\n  if(eatenCarrots < number){\n    eatenCarrots += Math.floor(Math.random() * (number - eatenCarrots));\n    leftCarrots = number;\n  }\n  return [eatenCarrots, leftCarrots];\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var eat = number + need;\n  if (remaining >= eat) {\n    var ret = [eat, remaining - eat];\n  } else {\n    var ret = [eat - remaining, 0];\n  }\n  return ret;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return [number+need<=remaining?number+need:remaining, remaining-need>=0?remaining-need:0];\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return (remaining >= need) ? [number + need, remaining - need] : [number + remaining, 0];\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nfunction iscube(a){\n",
    "task_id": "77",
    "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n",
    "simplified_intent": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
    "snippet": [
      "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(a===0){\n\t\treturn true;\n\t}\n\tvar n1 = a%1;\n\tvar n2 = a%1;\n\tvar n3 = a%1;\n\tvar n4 = a%1;\n\tvar n5 = a%1;\n\tvar n6 = a%1;\n\tvar n7 = a%1;\n\tvar n8 = a%1;\n\tvar n9 = a%1;\n\tvar n10 = a%1;\n\tvar n11 = a%1;\n\tvar n12 = a%1;\n\tvar n13 = a%1;\n\tvar n14 = a%1;\n\tvar n15 = a%1;\n\tvar n16 = a%1;\n\tvar n17 = a%1;\n\tvar n18 = a%1;\n\tvar n19 = a%1;\n\tvar n20 = a%1;\n\tvar n21 = a%1;\n\tvar n22 = a%1;\n\tvar n23 = a%1;\n\tvar n24 = a%1;\n\tvar n25 = a%1;\n\tvar n26 = a%1;\n\tvar n27 = a%1;\n\tvar n28 = a%1;\n\tvar n29 = a%1;\n\tvar n30 = a%1;\n\treturn (n1 == n2 && n2 == n3 && n3 == n4 && n4 == n5 && n5 == n6 && n6 == n7 && n7 == n8 && n8 == n9 && n9 == n10 && n10 == n11 && n11 == n12 && n12 == n13 && n13 == n14 && n14 == n15 && n15 == n16 && n16 == n17 && n17 == n18 && n18 == n19 && n19 == n20 && n20 == n21 && n21 == n22 && n22 == n23 && n23 == n24 && n24 == n25 && n25 == n26 && n26 == n27 && n27 == n28 && n28 == n29 && n29 == n30 && n30 == n31 && n31 == n32 && n32 == n33 && n33 == n34 && n34 == n35 && n35 == n36 && n36 == n37 && n37 == n38 && n38 == n39 && n39 == n40 && n40 == n41 && n41 == n42 && n42 == n43 && n43 == n44 && n44 == n45 && n45 == n46 && n46 == n47 && n47 == n48 && n48 == n49 && n49 == n50 && n",
    "grade-0": {
      "execution": 0
    },
    "1": "if(a ==1 && a %1 ==0) return true\n if(a ==2 && a %2 ==0) return true\n if(a ==3 && a %3 ==0) return true\n if(a ==4 && a %4 ==0) return true\n if(a ==5 && a %5 ==0) return true\n if(a ==6 && a %6 ==0) return true\n if(a ==7 && a %7 ==0) return true\n if(a ==8 && a %8 ==0) return true\n if(a ==9 && a %9 ==0) return true\n if(a ==10 && a %10 ==0) return true\n if(a ==11 && a %11 ==0) return true\n if(a ==12 && a %12 ==0) return true\n if(a ==13 && a %13 ==0) return true\n if(a ==14 && a %14 ==0) return true\n if(a ==15 && a %15 ==0) return true\n if(a ==16 && a %16 ==0) return true\n if(a ==17 && a %17 ==0) return true\n if(a ==18 && a %18 ==0) return true\n if(a ==19 && a %19 ==0) return true\n if(a ==20 && a %20 ==0) return true\n if(a ==21 && a %21 ==0) return true\n if(a ==22 && a %22 ==0) return true\n if(a ==23 && a %23 ==0) return true\n if(a ==24 && a %24 ==0) return true\n if(a ==25 && a %25 ==0) return true\n if(a ==26 && a %26 ==0) return true\n if(a ==27 && a %27 ==0) return true\n if(a ==28 && a %28 ==0) return true\n if(a ==29 && a %29 ==0) return true\n if(a ==30 && a %30 ==0) return true\n if(a ==31 && a %31 ==0) return true\n if(a ==32 && a %32 ==0) return true\n if(a ==33 && a %33 ==0) return true\n if(a ==34 && a %34 ==0) return true\n if(a ==35 && a %35 ==0) return true\n if(a ==36 && a %36 ==0) return true\n if(a ==37 && a %37",
    "grade-1": {
      "execution": 0
    },
    "2": "}",
    "grade-2": {
      "execution": 0
    },
    "3": "var m=Math.cbrt(a);\n    if(m%1==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if(a === 0) return true;\n    return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return (Math.cbrt(a) % 1 === 0)\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// compare_one(1, 2.5) \u279e 2.5\n// compare_one(1, \"2,3\") \u279e \"2,3\"\n// compare_one(\"5,1\", \"6\") \u279e \"6\"\n// compare_one(\"1\", 1) \u279e None\nfunction compare_one(a, b){\n",
    "task_id": "137",
    "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) \u279e 2.5\n  compareOne(1, \"2,3\") \u279e \"2,3\"\n  compareOne(\"5,1\", \"6\") \u279e \"6\"\n  compareOne(\"1\", 1) \u279e null\n  */\nconst compareOne = (a, b) => {\n",
    "simplified_intent": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
    "snippet": [
      "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(typeof(a) === \"string\" ){\n        a = parseFloat(a.replace(/[^\\d\\.-]/g, \"\"));\n    }\n    if(typeof(b) === \"string\" ){\n        b = parseFloat(b.replace(/[^\\d\\.-]/g, \"\"));\n    }\n    if(typeof(a) === \"number\" ){\n        if(typeof(b) === \"number\" ){\n            return Math.max(a, b);\n        }\n        else{\n            return null;\n        }\n    }\n    else if(typeof(b) === \"number\" ){\n        return null;\n    }\n    else{\n        if(a < b) return -1;\n        if(a > b) return 1;\n        return 0;\n    }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(a === b) return a;\n    if(typeof(a) == 'number' && typeof(b) == 'number'){\n        return a > b ? a : b;\n    }else if(typeof(a) == 'string'){\n        a = a.split('.');\n        b = b.split('.');\n        if(a[0] == '' && b[0] == '') return a;\n        if(a[0] == '' && b[0] != '') return b;\n        if(a != a) return b;\n        if(b != b) return a;\n        if(a[0] == b[0] && a[1] == b[1] && a[2] == b[2]) return null;\n        if(a[0] != b[0]) return b;\n        if(a[1] != b[1]) return a;\n        if(a[2] != b[2]) return a;\n        return b;\n    }\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (a.constructor.toString() == b.constructor.toString()){\n\t\tfor (var i in a){\n\t\t\tif (a[i] != b[i])\n\t\t\t\treturn a[i];\n\t\t}\n\t\treturn None;\n\t}\n\telse\n\t\treturn None;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(!isNaN(a) && !isNaN(b)) {\n    return a > b ? a : b\n  }\n  if(isNaN(a) && isNaN(b)) {\n    return a > b ? a : b\n  }\n  return null\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if (a == b){\nreturn None\n} else if (a < b){\nreturn b\n} else {\nreturn a\n}\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var r = null;\n    if(typeof a == typeof b){\n        if(typeof a == \"number\"){\n            r = (a > b) ? a : b;\n        }else if(typeof a == \"string\"){\n            r = (parseFloat(a) > parseFloat(b)) ? a : b;\n        }\n    }\n    return r;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3, 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunction triangle_area(a, b, c){\n",
    "task_id": "71",
    "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n",
    "simplified_intent": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
    "snippet": [
      "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var s = a + b + c;\n    if (s === 0 || s === a) return 0;\n    return ((s - a) * (s - b) * (s - c)) / Math.sqrt(Math.pow(s-a, 2) + Math.pow(s-b, 2) + Math.pow(s-c, 2));\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if ( b < c )\n  {\n    var t = a;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return ((b * b) - (4 * a * c)) / (2 * a);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let s = a + b + c;\n\tif (s >= 0)\n\t\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\treturn -1;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if (a+b<c || a+c<b || b+c<a) return -1;\n\tvar p = (a+b+c)/2;\n\treturn Math.round(Math.sqrt(p*(p-a)*(p-b)*(p-c))*100)/100;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if (a + b > c && a + c > b && b + c > a) {\n    return Number(((a + b + c) / 2 * (Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a))) / 2).toFixed(2));\n  } else {\n    return -1;\n  }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if( a+b>c && a+c>b && b+c>a){\n        let p = (a+b+c)/2;\n        let sq = p*(p-a)*(p-b)*(p-c);\n        return Math.sqrt(sq).toFixed(2);\n    }else{\n        return -1;\n    }\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n",
    "task_id": "120",
    "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n",
    "simplified_intent": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
    "snippet": [
      "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let index = 0;\n    let max = [];\n    let maxIndex = [];\n    arr.forEach(value => {\n        if (value>max[k-1]) {\n            max[k-1] = value;\n            maxIndex[k-1] = index;\n        }\n        index++;\n    });\n    for (let i=k-2; i<maxIndex.length; i++){\n        if (maxIndex[i] < maxIndex[i+1]){\n            max = max.concat(maxIndex[i+1]);\n            break;\n        }\n    }\n    return max;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let sorted = new Array();\n  \n  for (let i = 0; i<k; i++){\n    let max = 0;\n    for (let j = 0; j<i; j++){\n      if (arr[i]>arr[j] && max<arr[j]){\n        max = arr[j];\n      }\n    }\n    sorted.push(max);\n  }\n  \n  return sorted;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let result = [];\n    arr.sort((a,b) => a-b);\n    let tmp = [];\n    for(let i = 0; i < k; i++ ){\n        for(let j = 0; j < k; j++){\n            if(i == j)\n                tmp.push(arr[j]);\n            if((tmp.length + 1) <= k){\n                result.push(tmp);\n                tmp = [];\n            }else{\n                tmp.push(arr[j]);\n            }\n        }\n    }\n    result.push(tmp);\n    for(let i = 1; i < result.length; i++){\n        result[i] = result[i].concat(result[i-1]);\n    }\n    result.sort((a,b) => a-b);\n    return result;\n}\nvar maxK = function(arr, k) {\n  return Array.from({ length: k }, (_, i) => Math.max(...arr.map(x => x))).slice(0, k);\n};",
    "grade-2": {
      "execution": 0
    },
    "3": "let list = [], ans = [], i, length = arr.length;\n    for(i = 0; i < length; i++){\n        if(list.length == 0 || arr[i] > list[0]){\n            list.unshift(arr[i]);\n        }\n        else{\n            list.push(arr[i]);\n        }\n    }\n    for(i = 0; i < k; i++){\n        ans.push(list.shift());\n    }\n    return ans;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "// return max(arr, k, 0, arr.length-1);\n    return quickSelect(arr, k, 0, arr.length-1);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let result = [];\n\tfor(let i = 0; i < k; i++){\n\t\tresult.push(Math.max(...arr));\n\t\tarr.splice(arr.indexOf(Math.max(...arr)), 1);\n\t}\n\treturn result;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n",
    "task_id": "56",
    "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n",
    "simplified_intent": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
    "snippet": [
      "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let bracketList = brackets.split('<');\n    for (let i = 0; i < bracketList.length; i++){\n        if (bracketList[i] == \"<\"){\n            bracketList.splice(i, 1, \">\");\n            bracketList.splice(i, 0, \"\");\n        }\n    }\n    let result = bracketList.every((element, index, arr) => element == arr[0]);\n    return result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var openings = brackets.match(/(<+)/g);\n    var closings = brackets.match(/(>+)/g);\n    \n    var correct_bracketing = true;\n    for(var i = 0; i < openings.length; i++){\n        if(openings[i].match(/(<+)/) !=  closings[i].match(/(>+)/) ){\n            correct_bracketing = false;\n        }\n    }\n    \n    return correct_bracketing;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var openings = 0;\n    var closings = 0;\n    for(var i=0; i<brackets.length; i++){\n        switch(brackets.charAt(i)){\n        case '<':\n            openings++;\n            break;\n        case '>':\n            closings++;\n            break;\n        }\n    }\n    return openings == closings;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            count++;\n        }\n        else if (brackets[i] == \">\"){\n            count--;\n        }\n        if (count < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var opening = 0;\n    var closing = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            opening += 1;\n        }\n        else if (brackets[i] == \">\") {\n            closing += 1;\n        }\n    }\n    if (opening == closing) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var i;\n  var j;\n  for (i = 0; i < brackets.length; i += 1){\n    if (brackets[i] === \"<\"){\n      for (j = i; j < brackets.length; j += 1){\n        if (brackets[j] === \">\"){\n          break;\n        }\n      }\n      if (j === brackets.length){\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s, n){\n",
    "task_id": "117",
    "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n",
    "simplified_intent": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
    "snippet": [
      "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// code here\n\tif (s.length === 0) {\n\t\treturn [];\n\t}\n\tlet list = [];\n\tlet j = 0;\n\tfor (let i = 0; i < s.length; i++){\n\t\tif (s.charAt(i) === \" \") {\n\t\t\tlist.push(s.substring(j, i));\n\t\t\tj = i;\n\t\t}\n\t}\n\tlist.push(s.substring(j));\n\treturn list.filter(a => a.split(\" \").length == n)\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if (s === \"\") return [];\n  s = s.split(\"\");\n  var a = [];\n  \n  // for each letter in string\n  for (var i = 0; i < s.length; i++){\n    //remove letter and count how many consonants there are\n    var c = s.slice(0, i).join(\"\").match(/[b-df-hj-np-tv-z]/g).length;\n    //if there aren't enough consonants then remove letter from string\n    if (c < n) continue;\n    //if no more letters left then add to array\n    if (i == s.length - 1) a.push(s.slice(i).join(\"\"));\n  }\n  \n  return a;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your solution here\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const regex = /[aeiou\\s]/g;\n    const words = s.split(' ').filter(word => !(word.match(regex) || []).length);\n    return words.filter(word => word.length === n);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return s.split(' ').filter(word => {\n        return word.split('').filter(char => {\n            return /[bcdfghjklmnpqrstvwxyz]/i.test(char);\n        }).length === n;\n    });\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return s.split(\" \").filter(v => [...v].filter(v => isVowel(v)).length == n);\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num){\n",
    "task_id": "78",
    "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n",
    "simplified_intent": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
    "snippet": [
      "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let arr = [];\n  for(i = 0; i < num.length; i++){\n    let n = num.charCodeAt(i);\n    arr.push(n);\n  }\n  \n  if(num.length === 0) return 0;\n  \n  if(num.length === 1) return 1;\n  \n  let n1 = parseInt(arr[0], 16);\n  let n2 = parseInt(arr[1], 16);\n  \n  if(arr[0] === arr[1]) return 2;\n  \n  if(arr[2] === arr[3]) return 4;\n  \n  if(arr[0] === arr[2]) return 8;\n  \n  if(arr[0] === arr[3]) return 16;\n  \n  if(arr[4] === arr[5]) return 4;\n  \n  if(arr[4] === arr[6]) return 4;\n  \n  if(arr[4] === arr[7]) return 4;\n  \n  if(arr[4] === arr[8] || arr[4] === arr[9] || arr[4] === arr[10] || arr[4] === arr[11] || arr[4] === arr[12] || arr[4] === arr[13] || arr[4] === arr[14] || arr[4] === arr[15]) return 6;\n  \n  if(arr[5] === arr[6]) return 8;\n  \n  if(arr[5] === arr[7]) return 8;\n  \n  if(arr[5] === arr[8] || arr[5] === arr[9] || arr[5] === arr[10] || arr[5] === arr[11] || arr[5] === arr[12] || arr[5] === arr[13] || arr[5] === arr[14] || arr[5] === arr[15]) return 8;\n  \n  if(arr[6] === arr[7]) return 16;\n  \n  if(arr[6] === arr[8] || arr[6] === arr[9] || arr[6] === arr[10] || arr[6] === arr[11] || arr[6] === arr[12] || arr[6] === arr[13] || arr[6] === arr[14] || arr[6] === arr[15]) return 16;\n  \n  if(arr[7] === arr[8] || arr[7] === arr[9] || arr[7] === arr[10] || arr[7] === arr[11] || arr[7] === arr[12] || arr[7] === arr[13] || arr[7] === arr[14] || arr[7] === arr[15]) return 4;\n  \n  if(arr[8] === arr[9] || arr[8] === arr[10] || arr[8] === arr[11] || arr[8] === arr[12] || arr[8] === arr[13] || arr[8] === arr[14] || arr[8] === arr[15]) return 8;\n  \n  if(arr[9] === arr[10] || arr[9] === arr[11] || arr[9] === arr[12] || arr[9] === arr[13] || arr[9] === arr[14] || arr[9] === arr[15]) return 16;\n  \n  if(arr[10] === arr[11] ||",
    "grade-0": {
      "execution": 0
    },
    "1": "let hex_count = 0;\n  let num_str = num.toUpperCase();\n  let num_len = num_str.length;\n  if (num_len == 0) {\n    return 0;\n  }\n  \n  // Counting number of digits before first \"A\"\n  while (num_str.substring(0, 1) != \"A\") {\n    if (num_len == 1) {\n      return 0;\n    }\n    num_str = num_str.substring(1, num_len);\n    num_len = num_str.length;\n  }\n\n  let num_str2 = num_str.substring(1, num_len);\n  // Counting number of digits after last \"A\"\n  while (num_str.substring(num_str.length - 1) != \"A\") {\n    num_str = num_str.substring(0, num_str.length - 1);\n  }\n\n  let num_len2 = num_str2.length;\n  let num_hex = num_len2 * 16;\n  let num_num_len = num_hex / num_len;\n  if (num_num_len > 0 && num_num_len < 2) {\n    return 1;\n  }\n  let num_num_len2 = num_num_len - 1;\n  let num_num_hex2 = num_num_len2 * 16;\n  let num_num_num_hex = num_num_hex2 / num_hex;\n  let num_num_num_hex2 = num_num_num_hex / num_num_hex;\n  if (num_num_num_hex2 > 0 && num_num_num_hex2 < 2) {\n    return 2;\n  }\n  let num_num_num_hex3 = num_num_num_hex2 / 2;\n  if (num_num_num_hex3 > 0 && num_num_num_hex3 < 2) {\n    return 3;\n  }\n  let num_num_num_hex4 = num_num_num_hex2 / 3;\n  if (num_num_num_hex4 > 0 && num_num_num_hex4 < 2) {\n    return 4;\n  }\n  let num_num_num_hex5 = num_num_num_hex2 / 4;\n  if (num_num_num_hex5 > 0 && num_num_num_hex5 < 2) {\n    return 5;\n  }\n  let num_num_num_hex6 = num_num_num_hex2 / 5;\n  if (num_num_num_hex6 > 0 && num_num_num_hex6 < 2) {\n    return 6;\n  }\n  let num_num_num_hex7 = num_num_num_hex2 / 6;\n  if (num_num_num_hex7 > 0 && num_num_num_hex7 < 2) {\n    return 7;\n  }\n  let num_num_num_hex8 = num_num_num_hex2 / 7;\n  if (num_num_num_hex8 > 0 && num_num_num_hex8 < 2) {\n    return 8;\n  }\n  let num_num_num_hex9 = num_num_num_hex2 / 8;\n  if (num_num_num_hex9 > 0 && num_num_num_hex9 < 2) {\n    return 9;\n  }\n  let num_num_num_hex10 = num_num_num_hex2 / 9;\n  if (num_num_num_hex10 > 0 && num_num_num_hex10 < 2) {\n    return 10;\n  }",
    "grade-1": {
      "execution": 0
    },
    "2": "const n = num.replace(/ /g,'').toUpperCase().split('');\n    let hex = '';\n    const primes = Array(10).fill(0);\n    primes[8] = 1; //8 is the index of the hexadecimal digit '0' \n    primes[9] = 1; //9 is the index of the hexadecimal digit '1'\n    for (let i = 0; i <= n.length; i++){\n        primes[parseInt(n[i])] = 1;\n    }\n    \n    for(let i = 0; i < primes.length; i++){\n        if(primes[i] == 0){\n            break;\n        }\n    }\n    return primes[i]; \n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return \"123456789ABCDEF\".indexOf(num);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var hex_nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    var hex_keys = {};\n    for(var i = 0; i < hex_nums.length; i++){\n        hex_keys[hex_nums[i]] = i;\n    }\n    return hex_keys[num];\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let hexKey = {\n    'A': 10,\n    'B': 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  return hexKey[num]\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n",
    "task_id": "80",
    "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n",
    "simplified_intent": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
    "snippet": [
      "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let count = 0;\n    for (let i = 0; i < s.length; i++){\n        if (i === 0){\n            if (s[i] !== s[i + 1]){\n                count++;\n            }\n        }\n        if (i === 1){\n            if (s[i] !== s[i + 1]){\n                count++;\n            }\n        }\n        if (i === 2){\n            if (s[i] !== s[i + 1]){\n                count++;\n            }\n        }\n        if (count === 3){\n            return true;\n        }\n    }\n    return false;\n}\n\nlet tests = [\n    [\"a\", \"\"],\n    [\"a\", \"a\"],\n    [\"a\", \"a\", \"a\"],\n    [\"aaaa\", \"a\", \"a\", \"a\"],\n    [\"aabb\", \"b\", \"b\", \"b\"]\n];\n\nfor (let i = 0; i < tests.length; i++){\n    let string = tests[i][0];\n    let actual = is_happy(string);\n    let expected = tests[i][1];\n    if (expected === actual){\n        console.log(\"Passed: is_happy(\" + string + \")\");\n    } else {\n        console.log(\"Failed: is_happy(\" + string + \")\");\n        console.log(\"     Expected: \" + expected);\n        console.log(\"     Actual: \" + actual);\n    }\n}</code>\n<|/ a tags=string,javascript dscore=0 |>\n<| c |>\nOh well, didn't see it right away either. Thanks for the feedback.\n<|/ c |>\n<| c |>\nThe test cases \"a\" and \"aaaa\" return true but should be false. Did I miss something?\n<|/ c |>\n<| c |>\nOh sorry I missed that one. You are right. I updated the answer.\n<|/ c |>\n<| c |>\nThank you very much for you time and effort. Although this solution is good, I'm going with the other answer since it's shorter :) Thanks again!\n<|/ c |>\n<| a |>\nI would write a recursive solution. Here is how I would do it:\n\n<code>",
    "grade-0": {
      "execution": 0
    },
    "1": "for(var i=1;i<s.length-3;i++){\n        var a = s.substr(0,i);\n        var b = s.substr(i,3);\n        if(a.includes(b)){\n            return false;\n        }\n    }\n    return true;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var count = 0;\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)==s.charAt(i+1)){\n            count++;\n        }\n        if(count>=3){\n            return false;\n        }\n    }\n    if(count>=3){\n        return true;\n    }\n    return false;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return s.length>2&&s.split('').map((e,i,a)=>i>0?e!==a[i-1]:false).filter(e=>e).length===s.length-1;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return s.length >= 3 && s.split('').every((v,i,a) => i < a.length - 2 ? v !== a[i+1] && v !== a[i+2] : true)\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var consecutiveLetters = [];\n    for (var i = 0; i < s.length; i++) {\n        consecutiveLetters.push(s[i]);\n        if (consecutiveLetters.length === 3 && (consecutiveLetters[0] === consecutiveLetters[1] || consecutiveLetters[1] === consecutiveLetters[2] || consecutiveLetters[0] === consecutiveLetters[2])) {\n            return false;\n        }\n        if (consecutiveLetters.length === 3) {\n            consecutiveLetters = [];\n        }\n    }\n    return true;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7, 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunction x_or_y(n, x, y){\n",
    "task_id": "150",
    "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n",
    "simplified_intent": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
    "snippet": [
      "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(n == 1){\n        return y;\n    }\n    \n    var x_1 = x_or_y(n-1, x-2, y);\n    \n    if(n%2 == 0){\n        return x_1;\n    }\n    \n    var x_2 = x_or_y(n-1, x-1, y);\n    \n    return x_2;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n == 1 && y == 0) {\n\t\treturn x\n\t}\n\tif (n == 1 && y == 1) {\n\t\treturn x\n\t}\n\tif (n == 1 && y == -1) {\n\t\treturn x\n\t}\n\tif (n == 1 && y == -1) {\n\t\treturn y\n\t}\n\tif (n == 0 && y == 0) {\n\t\treturn x\n\t}\n\tif (n == 0 && y == 1) {\n\t\treturn x\n\t}\n\tif (n == 0 && y == -1) {\n\t\treturn x\n\t}\n\tif (n == 0 && y == -1) {\n\t\treturn y\n\t}\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n % 2 == 0) return x;\n    return y;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "// const arr = []\n  // for(var i = 2; i < n; i++){\n  //   if(n % i == 0){\n  //     arr.push(i)\n  //   }\n  // }\n  // if(arr.length > 0){\n  //   return y\n  // } else {\n  //   return x\n  // }\n  return n == 1 || n == 2 ? x : y\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "for(var i = 2; i < n; i++){\n\t\tif(n % i === 0){\n\t\t\treturn y;\n\t\t}\n\t}\n\treturn x;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(n===1){\n        return y;\n    }\n    else if(n===2){\n        return x;\n    }\n    else{\n        for(let i=2; i<n; i++){\n            if(n%i===0){\n                return y;\n            }\n        }\n        return x;\n    }\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n",
    "task_id": "149",
    "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n",
    "simplified_intent": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
    "snippet": [
      "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "//YOUR CODE HERE\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "lst.sort(function(a, b){\n\t\tvar lenA = a.length,\n\t\t\tlenB = b.length;\n\t\tif(lenA > lenB){\n\t\t\treturn 1;\n\t\t}else if(lenA < lenB){\n\t\t\treturn -1;\n\t\t}else{\n\t\t\tif(a.toLowerCase() < b.toLowerCase()){\n\t\t\t\treturn 1;\n\t\t\t}else{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t});\n\treturn lst;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let temp=[];\n    let len=lst.map(v=>v.length);\n    for(let i=0; i<lst.length; i++){\n        temp.push(lst[i].replace(/\\b[a-z]+\\b/g, \"\"));\n    }\n    temp=temp.sort((a,b)=>a.length-b);\n    return temp.map(a=>a.replace(/^[a-z]+/i,''));\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var temp;\n    for(var i = 0; i < lst.length; i++){\n        for(var j = i + 1; j < lst.length; j++){\n            if(lst[i].length > lst[j].length){\n                temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n    return lst;\n}\n\nvar lst = [\"aa\", \"a\", \"aaa\"];",
    "grade-3": {
      "execution": 0
    },
    "4": "var lst_sorted = lst.sort(function(a, b){\n        if (a.length > b.length) return -1;\n        if (a.length < b.length) return 1;\n        if (a < b) return -1;\n        if (a > b) return 1;\n        return 0;\n    });\n    var count = 1;\n    while (count < lst_sorted.length){\n        if (lst_sorted[count-1].length == lst_sorted[count].length){\n            lst_sorted.splice(count, 1);\n        }\n        else {\n            count ++;\n        }\n    }\n    return lst_sorted;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "// filter out the odd length words\n    var result = lst.filter(function(word){\n        return word.length % 2 === 0;\n    });\n    //sort the list by length of each word\n    result.sort(function(a, b){\n        return a.length - b.length;\n    });\n    //return the list sorted by that rule\n    return result;\n}\nvar lst = [\"ab\", \"a\", \"aaa\", \"cd\"];",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nfunction even_odd_count(num){\n",
    "task_id": "155",
    "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n",
    "simplified_intent": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
    "snippet": [
      "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var counter = 0;\n  while(num > 0){\n    num = num/10;\n    counter++;\n  }\n  return [counter,counter];\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let count = 0;\n    num = Math.abs(num);\n    while (num > 0){\n        num = num / 10;\n        count++;\n    }\n    return count;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return even_odd_count_helper(num, 0);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let even = 0, odd = 0\n    if(num == 0){\n        return(0,0)\n    }\n    while(num != 0){\n        if(num % 2 == 0){\n            even = even + 1\n        }\n        else{\n            odd = odd + 1\n        }\n        num = Math.floor(num / 10)\n    }\n    return (even, odd)\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let number = Math.abs(num)\n    let even = 0\n    let odd = 0\n    while(number > 0){\n        let digit = number % 10\n        if(digit % 2 === 0){\n            even += 1\n        }else{\n            odd += 1\n        }\n        number = Math.floor(number / 10)\n    }\n    return [even, odd]\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var arr = num.toString().split('');\n    var newArr = [];\n    var x = 0;\n    var y = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            x++;\n        }\n        else if(arr[i] % 2 != 0){\n            y++;\n        }\n    }\n    return newArr = [x, y];\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n",
    "task_id": "33",
    "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n",
    "simplified_intent": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
    "snippet": [
      "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var l2 = [];\n    var l3 = [];\n    var l4 = 0;\n    var l5 = 0;\n    for(var i = 0; i < l.length; i++){\n        if(i%3 == 0){\n            l2.push(l[i]);\n        }\n        if(i%3 == 1){\n            l3.push(l[i]);\n        }\n        if(i%3 == 2){\n            l4.push(l[i]);\n        }\n        if(i%3 == 3){\n            l5.push(l[i]);\n        }\n    }\n    var i = 0;\n    for(var i = 0; i < l2.length; i++){\n        while(l3[i] != l2[i] && l4[i] != l2[i] && l5[i] != l2[i]){\n            i++;\n        }\n        if(i == l2.length){\n            l2.push(l2[i]);\n        }\n    }\n    for(var i = 0; i < l3.length; i++){\n        while(l4[i] != l3[i] && l5[i] != l3[i]){\n            i++;\n        }\n        if(i == l3.length){\n            l3.push(l3[i]);\n        }\n    }\n    for(var i = 0; i < l4.length; i++){\n        while(l5[i] != l4[i]){\n            i++;\n        }\n        if(i == l4.length){\n            l4.push(l4[i]);\n        }\n    }\n    for(var i = 0; i < l5.length; i++){\n        while(l2[i] != l5[i]){\n            i++;\n        }\n        if(i == l5.length){\n            l5.push(l5[i]);\n        }\n    }\n    return l2;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your help. This does work. But can you explain how you came up with the logic? I'm not very good with coding so I'm not sure what to understand or how to get it.\n<|/ c |>\n<| c |>\nSure. I'll do that by editing the post in a minute (it won't let me edit my comment because I'm a new user). When you think about it, it's basically the same idea as sorting a list with just one number in it - you add all the numbers to one list, then you sort that list. The only difference is that the list has three values at once, instead of just one.\n<|/ c |>\n<| c |>\nI think I understand it. Thanks so much for your help.\n<|/ c |>\n<| c |>\nSorry for the late reply. I'm glad I could help. As for explaining it: I did this by using the list as a tree. I've added a diagram of what it looks like (I used a pen and paper, so the numbers are easier to",
    "grade-0": {
      "execution": 0
    },
    "1": "var res = [];\n    for(var i = 0; i < l.length; i++){\n        var n = l[i];\n        var j = i+1;\n        while(j < l.length && n % l[j] == 0){\n            n *= l[j];\n            j++;\n        }\n        res.push(n);\n    }\n    return res;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var res = [];\n  var len = l.length;\n  for(var i = 0; i< len; i+=3){\n    var index = (i%3) + 1;\n    var value = l[i];\n    var newValue = l[i+1];\n    var newValue = newValue != l[i+2] ? newValue : value; // only keep non-identical values\n    res.push(newValue);\n  }\n  return res;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if (l.length == 0){\n        return [];\n    }\n    else{\n        let l_new = l.slice(0);\n        for (let i = 2; i < l.length; i += 3){\n            l_new[i] = Array.from(l_new[i]).sort();\n        }\n        return l_new;\n    }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let l1 = []\n  let l2 = []\n  let l3 = []\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      l1.push(l[i])\n    }\n    else if (i % 3 == 1){\n      l2.push(l[i])\n    }\n    else{\n      l3.push(l[i])\n    }\n  }\n  l1.sort()\n  l2.sort()\n  l3.sort()\n  let res = []\n  let x = 0\n  let y = 0\n  let z = 0\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      res.push(l1[x])\n      x++\n    }\n    else if (i % 3 == 1){\n      res.push(l2[y])\n      y++\n    }\n    else{\n      res.push(l3[z])\n      z++\n    }\n  }\n  return res\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var newlist = l;\n    var oldlist = l;\n    var i;\n    var j;\n    var k;\n    var m;\n    var z;\n    var x;\n    var e;\n    for (i = 0; i < newlist.length; i = i + 3){\n        for (j = i; j < (i + 3); j++){\n            for (k = i; k < (i + 3); k++){\n                if (newlist[j] < newlist[k]){\n                    m = newlist[j];\n                    newlist[j] = newlist[k];\n                    newlist[k] = m;\n                }\n            }\n        }\n    }\n    for (x = 0; x < oldlist.length; x = x + 3){\n        for (z = 0; z < (i + 3); z++){\n            if (newlist[x] == oldlist[z]){\n                e = z;\n                break;\n            }\n        }\n        oldlist[e] = newlist[x];\n    }\n    return oldlist;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Create a function that returns True if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and False otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n// check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n// check_if_last_char_is_a_letter(\"\") \u279e False\nfunction check_if_last_char_is_a_letter(txt){\n",
    "task_id": "134",
    "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") \u279e false\n  checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n  checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n  checkIfLastCharIsALetter(\"\") \u279e false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n",
    "simplified_intent": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
    "snippet": [
      "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return txt[txt.length-1] != \" \" && !(/^[A-z]+$/).test(txt[txt.length-1]);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "// Start by checking if the last character of the string is not a space\n    if(txt.length !== 0 && txt[txt.length-1] !== \" \") {\n        // The last character is not a space, check if the last character is a\n        // letter. \n        var last_char = txt.substring(txt.length - 1, txt.length);\n        var is_a_letter = alphabet_check(last_char);\n        // If the last character is a letter or if the string is not empty\n        // and the last character is not the beginning of the string\n        // return True\n        return (is_a_letter || txt.length !== 0 || txt[0]!==' ');\n    }\n    // If the last character is a space or if the string is not empty or \n    // the first character is not the beginning of the string\n    // return False\n    return false;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return /\\w$/.test(txt[txt.length - 1]);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if (txt.length < 1){\n    return false;\n  }\n  if (txt[txt.length - 1].match(/[A-Za-z]/)){\n    return true;\n  } else {\n    return false;\n  }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let result = txt.match(/\\s?([a-z])$/i);\n  return result ? true : false;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if (txt.length === 0) return false;\n    else if (!txt.match(/\\w\\s$/)) return true;\n    else return false;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string, substring){\n",
    "task_id": "18",
    "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n",
    "simplified_intent": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
    "snippet": [
      "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "string = string.split(substring);\n  \n  var count = 0;\n  for(var i = 0;i < string.length; i++){\n    count = count + string[i].split(substring).length - 1;\n  }\n  return count;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var occurrences = 0;\n  for (var i = 0; i < string.length; i++){\n    if (string.substr(i, substring.length) === substring){\n      occurrences++;\n    }\n  }\n  return occurrences;\n}",
    "grade-1": {
      "execution": 1
    },
    "2": "var count = 0;\n  for(var i=0; i<string.length; i++){\n    count += string.indexOf(substring, i);\n    if(count >= substring.length) break;\n  }\n  return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is amazing solution!\n<|/ c |>\n<| a dscore=1 |>\nAs long as I understand your question, this would work:\n<code>",
    "grade-2": {
      "execution": 0
    },
    "3": "var count = 0;\n  var index = 0;\n  while (index <= string.length - substring.length){\n    if (string.slice(index,index+substring.length) == substring){\n      count += 1;\n      index += substring.length;\n    }\n    else{\n      index += 1;\n    }\n  }\n  return count;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var times = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.slice(i, substring.length + i) === substring) {\n      times += 1;\n    }\n  }\n  return times;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "// your code here\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return True else return False.\n// If the given array is empty then return True.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n",
    "task_id": "109",
    "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n",
    "simplified_intent": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
    "snippet": [
      "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var temp = [];\n\t\n\tif(arr.length==1){\n\t\treturn true;\n\t}\n\t\n\tif(arr.length==0){\n\t\treturn true;\n\t}\n\t\n\tfor(var i=0;i<arr.length;i++){\n\t\t\n\t\t//If we are left of starting index i.e i>0, then shift all elements\n\t\t//of array one position to the left i.e to the right i.e i+1\n\t\tif(i>0){\n\t\t\ttemp = temp.concat(arr.slice(0,i+1));\n\t\t\t//push element of array one position less than current index i\n\t\t\ttemp.push(arr[i]);\n\t\t\t//push element of array one position greater than current index i\n\t\t\ttemp.push(arr.slice(i+1));\n\t\t\t\n\t\t}\n\t\t//If we are right of starting index i.e i<arr.length-1, then\n\t\t//shift all elements of array one position to the right i.e to the left\n\t\t//i.e i-1\n\t\telse if(i<arr.length-1){\n\t\t\ttemp = temp.concat(arr.slice(0,i));\n\t\t\ttemp.push(arr[i]);\n\t\t\ttemp.push(arr.slice(i+1));\n\t\t}\n\t\t//If we are on starting index i.e i==arr.length-1, then\n\t\t//shift all elements of array one position to the right i.e to the left\n\t\t//i.e i-1\n\t\telse{\n\t\t\ttemp = temp.concat(arr.slice(0,i));\n\t\t\ttemp.push(arr[i]);\n\t\t\ttemp.push(arr.slice(i+1));\n\t\t}\n\t\t\n\t}\n\t\n\t//push the last element of array to starting position\n\ttemp = temp.concat(arr.slice(0,arr.length-1));\n\t\n\tif(temp.length!=0){\n\t\t//return if sorted array\n\t\treturn true;\n\t}\n\t\n\treturn false;\n\t\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let start = 0;\n    let end = arr.length - 1;\n    let count = Math.floor(Math.random() * (end - start + 1) + start);\n    let temp = arr[0];\n    while(count > 0){\n        arr[count] = arr[end];\n        end--;\n        count --;\n    }\n    arr[count] = temp;\n    return true;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// code goes here\n  if(arr.length===0){\n    return true;\n  }\n  \n  if(arr.length===1){\n    return false;\n  }\n  \n  var count=0;\n  for(var i=0;i<arr.length;i++){\n    for(var j=i+1;j<arr.length;j++){\n      count++;\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n  \n  for(var i=arr.length-1;i>0;i--){\n    var temp=arr[i];\n    arr[i]=arr[arr.length-1];\n    arr[arr.length-1]=temp;\n  }\n  \n  count--;\n  \n  if(count===0){\n    return true; \n  }\n  \n  return false;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(arr.length==0) return true;\n    let arr2 = arr.map(x=>x);\n    let len = arr.length;\n    let n = 0;\n    while(n<len){\n        let temp = arr2.pop();\n        arr2.unshift(temp);\n        if(isIncrease(arr2)) return true;\n        n++;\n    }\n    return false;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(arr.length === 0) return true;\n    let min = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] >= min) min = arr[i];\n        else return false;\n    }\n    return true;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(arr.length===0){\n        return true;\n    }\n    let sorted=arr.sort((a,b)=>a-b);\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]!==sorted[i]){\n            return false;\n        }\n    }\n    return true;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunction check_dict_case(dict){\n",
    "task_id": "95",
    "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n",
    "simplified_intent": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
    "snippet": [
      "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Insert code here\n  if(dict.length == 0) return false;\n  var i = 0;\n  while(i < dict.length){\n    if(typeof dict[i] == \"string\"){\n      var str = dict[i].toLowerCase();\n      var str_upper = dict[i].toUpperCase();\n      var str_length = str.length;\n      if(str == str_upper){\n        dict.splice(i,1);\n      }else{\n        dict.splice(i,1);\n      }\n    }\n    i++;\n  }\n  return dict.length == 0;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "for(var key in dict){\n\t\tif(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key].toLowerCase()){\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let keys = Object.keys(dict).sort();\n\tfor( let i=0;i<keys.length;i++){\n\t\tif( typeof dict[keys[i]] === 'string' ){\n\t\t\tif(keys[i].toLowerCase() === 'name' || keys[i].toLowerCase() === 'city' || keys[i].toLowerCase() === 'zip' || keys[i].toLowerCase() === 'state'){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(keys[i].toLowerCase() === keys[i].toUpperCase()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(Object.keys(dict).length === 0){\n        return false;\n    }\n\n    let lowerCase = 0;\n    let upperCase = 0;\n\n    for(key in dict){\n        if(key === key.toLowerCase()){\n            lowerCase += 1;\n        }else if(key === key.toUpperCase()){\n            upperCase += 1;\n        }\n    }\n\n    if(lowerCase === Object.keys(dict).length || upperCase === Object.keys(dict).length){\n        return true;\n    }\n\n    return false;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "//YOUR CODE GOES HERE\n    if (Object.keys(dict).length == 0) {\n        return false;\n    }\n    var keys = Object.keys(dict);\n    var lower = /^[a-z]+$/;\n    var upper = /^[A-Z]+$/;\n    if (lower.test(keys[0])) {\n        for (var i = 0; i < keys.length; i++) {\n            if (!lower.test(keys[i])) {\n                return false;\n            }\n        }\n    } else if (upper.test(keys[0])) {\n        for (var i = 0; i < keys.length; i++) {\n            if (!upper.test(keys[i])) {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n    return true;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "if(Object.keys(dict).length == 0){\n\t\treturn false;\n\t}\n\tvar result = Object.keys(dict).every(key => key == key.toLowerCase());\n\tif(result){\n\t\treturn true;\n\t}\n\tresult = Object.keys(dict).every(key => key == key.toUpperCase());\n\tif(result){\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes(string){\n",
    "task_id": "14",
    "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n",
    "simplified_intent": "Return list of all prefixes from shortest to longest of the input string",
    "snippet": [
      "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var prefixes = []\n\n  for(var i = 0; i < string.length; i++){\n    for(var j = 0; j < prefixes.length; j++){\n      if (string.substr(0,j+1) === prefixes[j]) {\n        prefixes.splice(j, 1);\n      }\n    }\n    prefixes.push(string.substr(0,i+1));\n  }\n  return prefixes\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        for(var j = 0;j < string.length; j++){\n            if(i != j && string.substr(i, j) == string.substr(j, i)){\n                prefixes.push(string.substr(i, j));\n            }\n        }\n    }\n    return prefixes;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(!string){\n        return [];\n    }\n    var prefixes = [];\n    var i;\n    for(i = string.length; i >= 0; i--){\n        prefixes.unshift(string.substring(0, i));\n    }\n    return prefixes;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var prefixes = [];\n\tfor (var i = 0; i < string.length; i++){\n\t\tprefixes.push(string.slice(0, i+1));\n\t}\n\treturn prefixes;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var list = [];\n  for (var i = 1; i <= string.length; i++){\n    list.push(string.slice(0, i));\n  }\n  return list;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var prefixes = [];\n    for (var i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n",
    "task_id": "21",
    "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n",
    "simplified_intent": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
    "snippet": [
      "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(numbers.length == 0){\n        return numbers;\n    }\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] = (numbers[i] < numbers[0]) ? numbers[0] : (numbers[i] > numbers[numbers.length - 1]) ? numbers[numbers.length - 1] : numbers[i];\n    }\n    return numbers;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if (numbers.length === 0)\n        return [];\n    var max_value = Math.max.apply(null, numbers);\n    if (max_value === 0)\n        return [];\n    var min_value = Math.min.apply(null, numbers);\n    if (min_value === 0)\n        return [];\n\n    var result = [];\n    for (var i = 0; i < numbers.length; i++)\n    {\n        var number = numbers[i];\n        if (number > 0)\n        {\n            number = number / max_value;\n            if (number > 1)\n                number = 1;\n        }\n        else\n        {\n            number = number / min_value;\n            if (number < 0)\n                number = 1;\n        }\n\n        result.push(number);\n    }\n    return result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var max_ = Math.max(...numbers);\n    var min_ = Math.min(...numbers);\n    return numbers.map(function(x){ return (x - min_) * max_ / min_; });\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const difference = max - min;\n  const result = numbers.map(val => (val - min) / difference);\n  return result;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var delta = max - min;\n    var rescaled = [];\n    for (var i = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i] - min) / delta);\n    }\n    return rescaled;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var tmp = [];\n    for (var i = 0; i < numbers.length; i++){\n        tmp.push((numbers[i] - min) / (max - min));\n    }\n    return tmp;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n",
    "task_id": "4",
    "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n",
    "simplified_intent": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
    "snippet": [
      "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(numbers.length === 0) {\n    return NaN;\n  }\n  var mean = _.mean(numbers);\n  var deviations = [];\n  _.each(numbers, function(number){\n    deviations.push(Math.pow(number - mean, 2));\n  });\n  return _.mean(deviations);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "// We need at least two numbers to calculate MAD.\n    if(numbers.length < 2)\n        throw new Error('Mean Absolute Deviation calculation needs at least two data points');\n    var mean;\n    var squared_diff;\n    numbers.forEach(function(d){\n        // The mean of a set of numbers can be calculated as:\n        // mean = sum(d) / numbers.length\n        // http://en.wikipedia.org/wiki/Mean\n        mean = (sum(d,numbers) / numbers.length);\n        // The Squared Mean is calculated as \n        // squared_diff = (x_i - mean)^2\n        // http://en.wikipedia.org/wiki/Mean_squared_error\n        squared_diff = (d - mean) * (d - mean);\n        // We calculate the MAD as \n        // MAD = Mean Absolute Deviation - SQUARED_MEAN\n        // http://en.wikipedia.org/wiki/Median_absolute_deviation\n        mad += Math.pow(squared_diff, 0.5);\n    });\n    return mad / numbers.length;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var n = numbers.length;\n  var mean = 0;\n  for(var i = 0; i < n; i++){\n    mean += Math.abs(numbers[i] - mean);\n  }\n  return mean / n;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var mean = arithmetic_mean(numbers);\n  var abs_devs = [];\n  for(var i = 0; i < numbers.length; i++){\n    abs_devs.push(Math.abs(numbers[i] - mean));\n  }\n  return arithmetic_mean(abs_devs);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var mean_value = mean(numbers);\n  var squared_absolute_differences = [];\n  for (var i = 0; i < numbers.length; i++){\n    squared_absolute_differences.push(Math.abs(numbers[i] - mean_value));\n  }\n  return mean(squared_absolute_differences);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var sum = 0;\n\tvar mean = jStat.mean(numbers);\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum / numbers.length;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n",
    "task_id": "139",
    "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n",
    "simplified_intent": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
    "snippet": [
      "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var f = 1;\n\tfor(var i = 2; i <= n; i++){\n\t\tf = f * i;\n\t}\n\treturn f;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "for(var i = 2; i <= n; i++){\n        factorial = factorial*i;\n    }\n    console.log(factorial);\n    return factorial;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n === 1 || n === 2)\n    return 1;\n  else if (n <= 3)\n    return n * special_factorial(n - 1);\n  else\n    return special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n - 3);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var product = 1;\n  for (i = n; i > 0; i--){\n    product *= i;\n  }\n  for (i = n-1; i > 0; i--){\n    product *= i;\n  }\n  return product;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *= i;\n    }\n    return factorial;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *= i;\n    }\n    return factorial;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nfunction valid_date(date){\n",
    "task_id": "124",
    "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n",
    "simplified_intent": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
    "snippet": [
      "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Write your code here\n  if(!date || date === ''){\n    return false;\n  }\n  if(isNaN(date)){\n    return false;\n  }\n  if(date.length < 5 || date.length > 10){\n    return false;\n  }\n  var days_in_month = days_in_months[date.substr(2,2)];\n  var days_valid = date.split('-').map(function(day){\n    return parseInt(day); // day -> Number\n  });\n  if(days_valid[0] < 1 || days_valid[0] > 31 || days_valid[1] < 1 || days_valid[1] > 30){\n    return false;\n  }\n  if(days_valid[0] > days_in_month || days_valid[1] > days_in_month){\n    return false;\n  }\n  return true;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "// Write your code here\n  date_regex = /^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|20)\\d\\d$/;\n  if(date_regex.test(date)){\n    //return true;\n  }else{\n    //return false;\n  }\n}\n</code>\n<|/ a dscore=0 tags=javascript,validation,regex |>\n<| a |>\n<code>",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your code here.\n  let dateObject = date.split('-');\n  dateObject[1] = parseInt(dateObject[1]);\n  dateObject[2] = parseInt(dateObject[2]);\n  dateObject[1] = dateObject[1] - 1; //Javascript months are 0-based.\n  dateObject[2] = dateObject[2] - 1;\n  \n  if(dateObject[1] < 1 || dateObject[1] > 12){\n    return false;\n  }\n  if(dateObject[2] < 1 || dateObject[2] > 31){\n    return false;\n  }\n  if(dateObject[1] < 1 || dateObject[1] > 12){\n    return false;\n  }\n  if(dateObject[2] < 1 || dateObject[2] > 29){\n    return false;\n  }\n  return true;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let check = true;\n    if (date === \"\") {\n        check = false;\n    } else {\n        let arrDate = date.split(\"-\");\n        if (arrDate.length !== 3) {\n            check = false;\n        } else {\n            if (arrDate[1] > 31) {\n                check = false;\n            } else if (arrDate[1] > 30 && arrDate[0] % 2 === 0) {\n                check = false;\n            } else if (arrDate[1] > 29 && arrDate[0] % 2 === 1) {\n                check = false;\n            } else if (arrDate[0] > 12) {\n                check = false;\n            }\n        }\n    }\n    return check;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return /^(?:(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[12][0-9]{3})$/.test(date);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "}\n\n\n  //Write a function named get_string_length which returns the length of a given string.\n  // The length is equal to the number of Unicode characters in the string.\n  // For example, the length of the string \"hello world\" is 11.\n  // Please note that white spaces are included in the length of the string.\n  // For example, the length of the string \"hello world\" is 11.\n  // Please note that white spaces are included in the length of the string.\n  function get_string_length(str){\n    \n  }\n\n\n  //Write a function named great_than which takes two arguments,\n  // a and b, and returns True if a is greater than b and False otherwise.\n  function great_than(a,b){\n    \n  }\n\n\n  //Write a function named less_than which takes two arguments,\n  // a and b, and returns True if a is less than b and False otherwise.\n  function less_than(a,b){\n    \n  }\n\n\n  //Write a function named equal_to which takes two arguments,\n  // a and b, and returns True if a is equal to b and False otherwise.\n  function equal_to(a,b){\n    \n  }\n\n\n  //Write a function named greater_than_or_equal_to which takes two arguments,\n  // a and b, and returns True if a is greater than or equal to b and False otherwise.\n  function greater_than_or_equal_to(a,b){\n    \n  }\n\n\n  //Write a function named less_than_or_equal_to which takes two arguments,\n  // a and b, and returns True if a is less than or equal to b and False otherwise.\n  function less_than_or_equal_to(a,b){\n    \n  }\n\n\n  //Write a function named is_even which takes one argument, a, and returns True if a is even and False otherwise.\n  function is_even(a){\n    \n  }\n\n\n  //Write a function named is_odd which takes one argument, a, and returns True if a is odd and False otherwise.\n  function is_odd(a){\n    \n  }\n\n\n  //Write a",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search(lst){\n",
    "task_id": "69",
    "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n",
    "simplified_intent": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
    "snippet": [
      "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let max=0;\n\tfor (let i of lst){\n\t\tif (i>max){\n\t\t\tmax=i;\n\t\t}\n\t}\n\tfor (let i of lst){\n\t\tif (i>max && i>lst[lst.length-1]){\n\t\t\tmax=i;\n\t\t}\n\t}\n\treturn max;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var min = lst[0];\n    var maxIndex = -1;\n    for(var i=0;i<lst.length;i++){\n        if(lst[i] > max){\n            max = lst[i];\n            maxIndex = i;\n        }\n    }\n    if(maxIndex < 0){\n        return -1;\n    }\n    var freq = lst[maxIndex];\n    var searchResult = lst[0];\n    for(var i=0;i<lst.length;i++){\n        var element = lst[i];\n        if(freq === element){\n            searchResult = element;\n        }\n        if(freq > element){\n            break;\n        }\n    }\n    return searchResult;\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays,algorithm |>\n<| a dscore=0 |>\n<code>",
    "grade-1": {
      "execution": 0
    },
    "2": "}\n</cell>\n<cell>",
    "grade-2": {
      "execution": 0
    },
    "3": "if (lst.length === 0) return -1;\n    let lstSorted = lst.sort((a, b) => a - b);\n    let maxFrequency = 0;\n    let value = -1;\n    for (let i = 0; i < lstSorted.length; i++) {\n        let element = lstSorted[i];\n        let freq = lstSorted.filter(v => v === element).length;\n        if (freq >= element && freq >= maxFrequency) {\n            maxFrequency = freq;\n            value = element;\n        }\n    }\n    return value;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "// get count of the highest number in the list\n  let highestNum = Math.max(...lst);\n  //count the frequency of the highest number in the list\n  let numCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === highestNum) {\n      numCount++;\n    }\n  }\n  // the value of the frequency must be greater than or equal to the value of the highest number\n  if (numCount >= highestNum) {\n    return highestNum;\n  } else {\n    return -1;\n  }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let counts = {};\n    for (let i = 0; i < lst.length; i++) {\n        counts[lst[i]] = (counts[lst[i]] || 0) + 1;\n    }\n    let keys = Object.keys(counts);\n    keys.sort(function(a, b){return counts[b]-counts[a]});\n    let winner = parseInt(keys[0]);\n    if (winner >= counts[winner]) {\n        return winner;\n    } else {\n        return -1;\n    }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunction find_closest_elements(numbers){\n",
    "task_id": "20",
    "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n",
    "simplified_intent": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
    "snippet": [
      "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var i;\n  if(numbers.length === 0){\n    throw new Error(\"Can't select an element from an empty list of numbers\");\n  }\n  for(i = 1; numbers.length > i; i++){\n    if(numbers[i-1] > numbers[i]){\n      var t = numbers[i-1];\n      numbers[i-1] = numbers[i];\n      numbers[i] = t;\n    }\n  }\n  return numbers;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let min_diff = Number.POSITIVE_INFINITY;\n  let closest_1 = numbers[0];\n  let closest_2 = numbers[0];\n  for (let i = 1; i < numbers.length; i++){\n    let diff = numbers[i] - closest_1;\n    if (diff > min_diff){\n      min_diff = diff;\n      closest_1 = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++){\n    let diff = numbers[i] - closest_2;\n    if (diff > min_diff){\n      min_diff = diff;\n      closest_2 = numbers[i];\n    }\n  }\n  return [closest_1, closest_2];\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var largest = numbers[0];\n\tvar smallest = numbers[0];\n\tvar i, j, new_number;\n\tvar length = 0;\n\tfor(i = 1; i < numbers.length; i++){\n\t\tnew_number = numbers[i];\n\t\tif((smallest > new_number) && (new_number > largest)){\n\t\t\tlargest = smallest;\n\t\t\tsmallest = new_number;\n\t\t\tlength = i;\n\t\t}else{\n\t\t\tsmallest = new_number;\n\t\t}\n\t}\n\tvar returnArray = [];\n\tfor(i = 0; i < length; i++){\n\t\treturnArray[returnArray.length] = smallest;\n\t}\n\treturnArray[returnArray.length] = largest;\n\treturnArray.reverse();\n\treturn returnArray;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "numbers.sort();\n    var closest_distance = Math.abs(numbers[0] - numbers[1]);\n    var first_number = numbers[0];\n    var second_number = numbers[1];\n    for (var i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < closest_distance) {\n            closest_distance = Math.abs(numbers[i] - numbers[i + 1]);\n            first_number = numbers[i];\n            second_number = numbers[i + 1];\n        }\n    }\n    return(first_number, second_number);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var smallest = numbers[0];\n\tvar largest = numbers[0];\n\tvar difference = [];\n\tvar newList = [];\n\tfor(i=0; i<numbers.length; i++){\n\t\tvar value = numbers[i];\n\t\tif(value < smallest){\n\t\t\tsmallest = value;\n\t\t}\n\t\tif(value > largest){\n\t\t\tlargest = value;\n\t\t}\n\t}\n\tfor(i=0; i<numbers.length; i++){\n\t\tif(numbers[i] == smallest){\n\t\t\tcontinue;\n\t\t}\n\t\tdifference.push(largest - numbers[i]);\n\t}\n\tfor(i=0; i<difference.length; i++){\n\t\tif(i == 0){\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i] < newList[0]){\n\t\t\tnewList = [];\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i] == newList[0]){\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t}\n\tfor(i=0; i<numbers.length; i++){\n\t\tfor(j=0; j<newList.length; j++){\n\t\t\tif(largest - numbers[i] == newList[j]){\n\t\t\t\treturn smallest + \", \" + numbers[i];\n\t\t\t}\n\t\t}\n\t}\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var closest_numbers = [];\n    var closest_diff = -1;\n    for (i = 0; i < numbers.length; i++){\n        for (j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (closest_diff == -1 || diff < closest_diff){\n                closest_diff = diff;\n                closest_numbers = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    if (closest_numbers[0] > closest_numbers[1]){\n        var temp = closest_numbers[0];\n        closest_numbers[0] = closest_numbers[1];\n        closest_numbers[1] = temp;\n    }\n    return closest_numbers;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n",
    "task_id": "58",
    "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n",
    "simplified_intent": "Return sorted unique common elements for two lists.",
    "snippet": [
      "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var ret = [];\n  for(var i=0; i<l1.length; i++){\n    for(var j=0; j<l2.length; j++){\n      if(l1[i]==l2[j]){\n        ret.push(l1[i]);\n      }\n    }\n  }\n  return ret;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var result = [];\n    var len = Math.min(l1.length, l2.length);\n    for(var i = 0; i < len; i++){\n        if(l1[i] === l2[i]){\n            result.push(l1[i]);\n        }\n    }\n    return result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let unique = [];\n\t\n\tfor(let i = 0, len = l1.length; i < len; i++){\n\t\tlet l1e = l1[i];\n\t\tfor(let j = 0, len2 = l2.length; j < len2; j++){\n\t\t\tlet l2e = l2[j];\n\t\t\t\n\t\t\tif((l1e === l2e) && (!unique.includes(l1e))){\n\t\t\t\tunique.push(l1e);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "l1.sort(function(a, b){return a-b});\n    l2.sort(function(a, b){return a-b});\n    var i = 0;\n    var j = 0;\n    var result = [];\n    while (i < l1.length && j < l2.length){\n        if (l1[i] == l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]){\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return result;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var l3 = l1.concat(l2);\n    return l3.filter(function(item, pos) {\n        return l3.indexOf(item) == pos;\n    });\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return (l1.concat(l2)).sort().filter( function(el, i, arr){ return (arr.indexOf(el) == i); } );\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nfunction string_to_md5(text){\n",
    "task_id": "162",
    "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n",
    "simplified_intent": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
    "snippet": [
      "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (text == ''){\n\t\treturn '';\n\t}\n\tvar hash = 0;\n\tvar i;\n\tvar sl = text.length;\n\tfor (i = 0; i < sl; i++){\n\t\tvar chr = text.charCodeAt(i);\n\t\thash += ((hash << 5) + chr + (hash << 16) - hash);\n\t\thash &= hash;\n\t}\n\treturn hash.toString(16);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n},{\"./md5\":20}],20:[function(require,module,exports){\nmodule.exports = function md5(text) {\n  return text.toString().trim().split('').map(function(c){ return ('0' + c.charCodeAt(0).toString(16)).slice(-2) }).join('')\n}\n},{}],21:[function(require,module,exports){",
    "grade-1": {
      "execution": 0
    },
    "2": "// If the string is an empty string, return None.\n    if(!text){\n        return;\n    }\n    // Otherwise, we will compute our md5 hash using the CryptoJS library.\n    var md5 = CryptoJS.algo.MD5.create();\n    md5.update(text); // Update the string with our text.\n    return md5.finalize(); // Finalize the md5 hash.\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(text == ''){\n    return null;\n  }\n  var md5 = require('crypto-js/md5');\n  return md5(text).toString();\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return crypto.createHash('md5').update(text).digest('hex');\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(text === ''){\n    return null;\n  }\n  return hex_md5(text);\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n",
    "task_id": "83",
    "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n",
    "simplified_intent": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
    "snippet": [
      "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return Math.floor((n-1)/10) + 1;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let count = 0\n  while(n>0){\n    count += n%10 == 1 || n%10 == 0 //counting how many times 1 starts or ends with 1\n    n /= 10\n  }\n  return count\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(n<=1)return 0;\n  var cnt=0;\n  var start=1;\n  var end=0;\n  while(1){\n    var temp=Math.floor(n/10);\n    if(temp==1)\n      if(start==1)\n        cnt++;\n      start=0;\n      end=0;\n    else\n      start=1;\n    num=n%10;\n    if(num==1)\n      end++;\n    n=Math.floor(n/10);\n  }\n  return cnt;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "//we count from 1 to 1000 how many times \"1\" is found\n    var count = 0;\n    for(var i = 1; i <= Math.pow(10, n) - 1; i++){\n        count += count_one(i.toString());\n    }\n    return count;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(n == 1){\n        return 10;\n    }\n    return (9*ten_pow(n-1)) + starts_one_ends(n-1);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let count = 0;\n    for(let i = 1; i <= n; i++){\n        count += Math.pow(10, i - 1);\n    }\n    return count;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n",
    "task_id": "57",
    "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n",
    "simplified_intent": "Return True is list elements are monotonically increasing or decreasing.",
    "snippet": [
      "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var l = l.slice();\n    l.sort(function(a, b){\n        return a - b;\n    });\n    return l[0] == l[l.length-1] && l[0] >= 0;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var s = l.slice();\n  return s._a === undefined || s._a === s._d ? !s._h : s._h;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (l.length === 0) {\n        return true;\n    }\n    var s = l.sort(function(a, b){\n        return a - b;\n    });\n    var fromLast = s[0] <= s[l.length - 1];\n    var fromFirst = s[0] >= s[l.length - 1];\n    return fromLast && fromFirst;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "// your code here\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "console.log(l);\n    let len = l.length-1;\n    let count = 0;\n    let val = (l[0] < l[1]) ? 0 : 1;\n    for(let i=0; i<len; i++){\n        if(val == 0){\n            if(l[i] < l[i+1]){\n                count++;\n            }else{\n                break;\n            }\n        }else{\n            if(l[i] > l[i+1]){\n                count++;\n            }else{\n                break;\n            }\n        }\n    }\n    console.log((count+1) == len);\n}\nmonotonic([1, 20, 4, 10]);",
    "grade-4": {
      "execution": 0
    },
    "5": "var count1 = 0;\n    var count2 = 0;\n    for(var i = 0; i < l.length-1; i++){\n        if(l[i] < l[i+1]){\n            count1++;\n        }\n        else if(l[i] > l[i+1]){\n            count2++;\n        }\n    }\n    if(count1 == 0 || count2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman(number){\n",
    "task_id": "156",
    "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n",
    "simplified_intent": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
    "snippet": [
      "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var roman = int_to_roman(number);\n  return roman.substr(0, roman.length-1)\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var roman = \"\";\n    while(number >= 100){\n        roman += \"c\";\n        number -= 100;\n    }\n    while(number >= 90){\n        roman += \"x\";\n        number -= 90;\n    }\n    while(number >= 50){\n        roman += \"l\";\n        number -= 50;\n    }\n    while(number >= 40){\n        roman += \"i\";\n        number -= 40;\n    }\n    while(number >= 10){\n        roman += \"v\";\n        number -= 10;\n    }\n    while(number >= 5){\n        roman += \"i\";\n        number -= 5;\n    }\n    while(number >= 1){\n        roman += \"n\";\n        number -= 1;\n    }\n    while(number >= 1){\n        roman += \"m\";\n        number -= 1;\n    }\n    return roman;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let roman = {\n        'I':1,'V':5,'X':10,\n        'L':50,'C':100,'D':500,'M':1000\n    };\n\n    let arr = [];\n    for(let i = 0; i < number; i++){\n        arr.push(roman[Object.keys(roman)[i]]);\n    }\n    return arr;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(number > 1000){\n      return \"Too Big\"\n   }\n\n   if(number < 1){\n      return \"Too Small\"\n   }\n\n   let finalString = \"\"\n   let digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n   let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n\n   for(let i = 0; i < digits.length; i++){\n      while(number >= digits[i]){\n         finalString += roman[i]\n         number -= digits[i]\n      }\n   }\n\n   return finalString.toLowerCase()\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let t = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"];\n    let h = [\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"];\n    let o = [\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"];\n    let roman = t[Math.floor(number/100)] + h[Math.floor((number%100)/10)] + o[number%10];\n    return roman.toLowerCase();\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var romanNum = \"\";\n    var tensArray = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    var onesArray = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n    romanNum += tensArray[Math.floor(number/10)];\n    romanNum += onesArray[number%10];\n    return romanNum;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nfunction rounded_avg(n, m){\n",
    "task_id": "103",
    "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n",
    "simplified_intent": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
    "snippet": [
      "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var n = parseInt(n, 10);\n    var m = parseInt(m, 10);\n    if (n <= m) return -1;\n    var sum = 0;\n    var count = 0;\n    for (var i = n; i <= m; i++) {\n        count++;\n        sum += i;\n    }\n    sum = Math.round(sum / count);\n    var res = \"\";\n    for (var i = 0; i < sum; i++) {\n        res += \"1\";\n    }\n    res = \"0b\" + res;\n    return res;\n}\n\nvar arr = [2, 4, 8, 16];\nvar max = Math.max.apply(null, arr);",
    "grade-0": {
      "execution": 0
    },
    "1": "let avg = (n - m) / 2;\n    let bin_avg = new Array(avg);\n    for(let i=0; i<bin_avg.length; i++){\n        bin_avg[i] = \"0b\"\n    }\n    let binary_avg = bin_avg.join().split('');\n    binary_avg = binary_avg.map(Number);\n    return binary_avg.reduce((a,b)=>{\n        if(a > b)return -1;\n        else return a + 1;\n    }, 0);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var sum = n + m;\n   return Math.ceil(sum/2) >> 0;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var ans = (n + m) / 2\n  return ans >= 0 ? '0b' + Math.round(ans).toString(2) : -1\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(n > m){\n      return -1;\n   }\n   var i = n;\n   var sum = 0;\n   while(i <= m){\n      sum += i;\n      i++;\n   }\n   var rounded = Math.round(sum/(m-n+1));\n   return rounded.toString(2);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let average = (m+n)/2;\n    if(n>m){\n      return -1;\n    }else{\n      return '0b' + Math.round(average).toString(2);\n    }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return True if all numbers in the list l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// True\n// >>> below_threshold([1, 20, 4, 10], 5)\n// False\nfunction below_threshold(l, t){\n",
    "task_id": "52",
    "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n",
    "simplified_intent": "Return True if all numbers in the list l are below threshold t.",
    "snippet": [
      "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "for (var i = 0; i < l.length; i++){\n\t\tif(l[i]<t && i>0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "for(var i=l.length-1; i>=0; --i){\n        if(l[i] < t){\n            return false;\n        }\n    }\n    return true;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "for(let i = 0; i < l.length; i++){\n        if(l[i] > t)\n            return false;\n    }\n    return true;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return all(curry(lt)(t), l);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return some(l, function(n){\n        return n < t;\n    });\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var temp = l.every(function(value,index,arr){\n    return (value<t)\n  })\n  return temp\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Write a function that takes a string and returns True if the string\n// length is a prime number or False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\nfunction prime_length(string){\n",
    "task_id": "82",
    "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n",
    "simplified_intent": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
    "snippet": [
      "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (string.length == 1){\n    return false;\n  }\n  var prime = true;\n  for (var i = 2; i <= string.length; i++){\n    if (string.charAt(i) != string.charAt(string-length)){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return is_prime(string) && string.length % 2 == 1;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "string = string.toLowerCase();\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u'){\n            return false;\n        }\n    }\n    return true;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var count = 0;\n  for(var i = 1; i <= string.length; i++){\n    if(string.length % i == 0){\n      count++;\n    }\n  }\n  if(count == 2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if(string.length % 2 === 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\nfunction has_close_elements(numbers, threshold){\n",
    "task_id": "0",
    "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n",
    "simplified_intent": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
    "snippet": [
      "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var num1s = numbers.map(function(elem){return Math.abs(elem)});\n    var num2s = numbers.map(function(elem){return Math.abs(elem)});\n    return num1s.some(function(val, i){return val === num2s[i];});\n}\n</code>\n<|/ a tags=performance,javascript,arrays |>\n<| c |>\nYour `has_close_elements` function returns `numbers` if no element is closer to any other (including itself). You probably meant to use `Math.min(...)` instead of `Math.abs()`\n<|/ c |>\n<| c |>\nThanks I've changed it.\n<|/ c |>\n<| c |>\n`Math.abs(num1s[i] - num2s[i])` will also return `0` when `num1s[i] == num2s[i]`. You need `Math.min`\n<|/ c |>\n<| c |>\nThanks I've changed it accordingly.\n<|/ c |>\n<| c |>\nThanks guys. I tested them all and they all seem to be faster. I think this one is best in terms of performance. https://jsfiddle.net/kq9xqoe2/\n<|/ c |>\n<| a |>\nIt would probably be a little faster if you could find an item in a hashmap rather than iterate over the array once for each element in the array.\n<code>\nconst arr = [1,2,3,4,5]\nconst threshold = 0.2\nconst hashmap = new Map()\nfor(var i = 0; i < arr.length; i++) {\n    const value = arr[i]\n    if(!hashmap.has(value)) hashmap.set(value, {count: 1, min: value})\n    else hashmap.set(value).count++\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let numbers_sorted;\n    if (numbers.length > 0) numbers_sorted = numbers.slice().sort((a,b) => a - b);\n    else numbers_sorted = numbers;\n    return numbers_sorted.some(function(el, i, arr){\n        i = i + 1;\n        const prev_el = arr[i - 1];\n        return el > threshold && el > prev_el ? true : false;\n    });\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (numbers.length === 1) return false;\n    var sorted_numbers = numbers.slice().sort();\n    var sorted_threshold = sorted_numbers.slice().sort();\n    var diff = 0;\n    var i = 0;\n    var j = 0;\n    var found = false;\n    var checker = function(arr1, arr2){\n        return arr1.indexOf(arr2[j++]) < arr1.indexOf(arr2[j++])\n    };\n    while (i < sorted_numbers.length && j < sorted_numbers.length){\n        if (checker(sorted_numbers, sorted_threshold)){\n            found = true;\n            break;\n        }\n        if (sorted_numbers[i] + diff < threshold && sorted_numbers[j] + diff < threshold){\n            found = true;\n            break;\n        }\n        diff = sorted_numbers[j] - sorted_numbers[i];\n        i++;\n        j++;\n    }\n    return found;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "for(var i = 0; i < numbers.length; i++){\n    for(var j = 0; j < numbers.length; j++){\n      if(i != j){\n        var diff = numbers[i] - numbers[j];\n        diff = diff > 0 ? diff : -diff;\n        if(diff < threshold){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var i;\n    for(i = 0; i < numbers.length; i++){\n        for(j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nfunction reverse_delete(s, c){\n",
    "task_id": "112",
    "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n",
    "simplified_intent": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
    "snippet": [
      "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let result = '';\n  let i = 0;\n  for(let j = s.length-1; j >= 0 ; j--){\n    if(s[j] === c[i]){\n      result  += s[j];\n    }\n    i++;\n  }\n  return result===c?([result,false]):([result,true]);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "//code here\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var result=\"\";\n    var check=false;\n    for(i=0;i<s.length-1;i++)\n    {\n      if(s.substr(i,1).indexOf(c)>=0)\n      {\n        result+=s.substr(i,1);\n      }\n      else\n      {\n        check=true;\n      }\n    }\n    return (result,check);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "s = s.split('').filter(i => !c.includes(i)).join('');\n    return [s, s === s.split('').reverse().join('')];\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var newStr = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(c.indexOf(s[i]) === -1){\n      newStr += s[i];\n    }\n  }\n  var reversed = newStr.split(\"\").reverse().join(\"\");\n  return [newStr, newStr === reversed];\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "c = [...new Set(c)];\n    s = s.split('').filter(a => !c.includes(a)).join('');\n    return [s, s === s.split('').reverse().join('')];\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u279e True\n// is_nested('[]]]]]]][[[[[]') \u279e False\n// is_nested('[][]') \u279e False\n// is_nested('[]') \u279e False\n// is_nested('[[][]]') \u279e True\n// is_nested('[[]][[') \u279e True\nfunction is_nested(string){\n",
    "task_id": "132",
    "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') \u279e true\n  isNested('[]]]]]]][[[[[]') \u279e false\n  isNested('[][]') \u279e false\n  isNested('[]') \u279e false\n  isNested('[[][]]') \u279e true\n  isNested('[[]][[') \u279e true\n  */\nconst isNested = (string) => {\n",
    "simplified_intent": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
    "snippet": [
      "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Your code here\n}\n</cell>\n<text>\nThe string '[[]][[]]' has two valid bracket-nesting subsequences:\n\n'[[[]]]', which has one bracket-nested subsequence\n'[[]][', which has one bracket-nested subsequence\n\nThe string '[[]]' has one valid bracket-nesting subsequence:\n\n'[[]]'\n\nThe string '[]]' has one valid bracket-nesting subsequence:\n\n'[]]'\n\n\n</text>\n<cell>",
    "grade-0": {
      "execution": 0
    },
    "1": "let stack = []\n\n    for (let i = 0; i < string.length; i++){\n        if (stack.length == 0 ||\n            stack[stack.length-1] != '[' ||\n            string.charAt(i) != '[' ||\n            string.charAt(i) != string.charAt(i-1) ){\n            stack.push(string.charAt(i))\n        }\n        else if (stack.length == 1 || \n                 string.charAt(i) != ']' ||\n                 string.charAt(i) != string.charAt(i+1) ){\n            return false\n        }\n        else stack.pop()\n    }\n\n    return stack.length == 0\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "for (var i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      if (string[(i+1)] == ']') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let i = 0\n    for(i = 0; i < string.length; i++){\n        if(string[i] === \"[\" && string[i+1] === \"]\"){\n            return true\n        }\n    }\n    return false\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var count = 0;\n    var arr = string.split('');\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === '['){\n            count++;\n        }\n        if(arr[i] === ']'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count === 0;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(string.indexOf('[][]') !== -1){\n        return false;\n    }else if(string.indexOf('[]') !== -1){\n        return false;\n    }else if(string.indexOf('[[][]]') !== -1){\n        return true;\n    }else if(string.indexOf('[[]][[') !== -1){\n        return true;\n    }else if(string.indexOf('[[]]') !== -1){\n        return true;\n    }else if(string.indexOf('[]]]]]]][[[[[]') !== -1){\n        return false;\n    }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n",
    "task_id": "37",
    "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n",
    "simplified_intent": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
    "snippet": [
      "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "for(let i=0, j=l.length-1; i<j; i++){\n        let val = l[i];\n        l[i] = l[j];\n        l[j] = val;\n    }\n    return l;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var l = l.slice();\n    for(var i = l.length-1; i > 0; i--){\n        if(i%2 == 1){\n            l.splice(i, 1);\n        }\n    }\n    l.sort();\n    return l;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var l = l.slice();\n  for (var i = 1; i < l.length; i++){\n    if (l[i] !== l[i-1])\n      l.splice(i, 0, l[i]);\n  }\n  return l;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var new_list = [];\n  var i;\n  var len = l.length;\n  for(i = 0; i < len; i++){\n    if(i % 2 === 0){\n      new_list.push(l[i]);\n    }\n    else{\n      var temp = l.slice(i, i+2);\n      temp.sort();\n      new_list.push(temp[0]);\n      new_list.push(temp[1]);\n      i++;\n    }\n  }\n  return new_list;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var even_list = [];\n\tfor(var i = 0; i < l.length; i += 2){\n\t\teven_list.push(l[i]);\n\t}\n\teven_list.sort();\n\tfor(var i = 0; i < l.length; i += 2){\n\t\tl[i] = even_list[i/2];\n\t}\n\treturn l;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var l2 = new Array();\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l2.push(l[i]);\n        }\n        else{\n            var temp = l.slice(i, i+2);\n            temp.sort();\n            l2.push(temp[0]);\n            l2.push(temp[1]);\n            i = i + 1;\n        }\n    }\n    return l2;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279e True\n// any_int(3, 2, 2) \u279e False\n// any_int(3, -2, 1) \u279e True\n// any_int(3.6, -2.2, 2) \u279e False\nfunction any_int(x, y, z){\n",
    "task_id": "92",
    "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) \u279e true\n  anyInt(3, 2, 2) \u279e false\n  anyInt(3, -2, 1) \u279e true\n  anyInt(3.6, -2.2, 2) \u279e false\n  */\nconst anyInt = (x, y, z) => {\n",
    "simplified_intent": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
    "snippet": [
      "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (x===y){\n      if (x===z){\n        return x===z;\n      }else{\n        return false;\n      }\n    }else{\n      return false;\n    }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\t\n\tfor(a; a<3; a++){\n\t\t\n\t}\n\t\n\tfor(b; b<3; b++){\n\t\t\n\t}\n\t\n\tfor(c; c<3; c++){\n\t\t\n\t}\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var xNum = parseInt(x, 10);\n    var yNum = parseInt(y, 10);\n    var zNum = parseInt(z, 10);\n    //return true if any number is equal to the sum of the other two, false otherwise\n    return (xNum + yNum + zNum == sum(xNum, yNum, zNum));\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if((x===y+z || y===x+z || z===x+y) && x%1===0 && y%1===0 && z%1===0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(x % 1 == 0 && y % 1 == 0 && z % 1 == 0 && (x + y == z || x + z == y || y + z == x)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return (x === (y + z) || y === (x + z) || z === (x + y)) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ? true : false;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n",
    "task_id": "116",
    "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n",
    "simplified_intent": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
    "snippet": [
      "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let isArr = Array.isArray(arr);\n    let len = 0;\n    if(!isArr || arr.length === 0)\n        return [];\n    else if(arr.length === 1)\n        return arr;\n\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0)\n            len++;\n    }\n\n    let minIndex = Math.floor(len/2);\n    let maxIndex = len-minIndex;\n    let minValue = arr[minIndex];\n    let maxValue = arr[maxIndex];\n\n    if(maxIndex > minIndex){\n        //sort\n        let result = [];\n        for(let i = minIndex; i < maxIndex; i++){\n            result.push(arr[i]);\n        }\n\n        for(let i = maxIndex - 1; i >= minIndex; i--){\n            result.push(arr[i]);\n        }\n\n        return result;\n    }\n    else{\n        //reverse sort\n        let result = [];\n        for(let i = minIndex; i <= maxIndex; i++){\n            result.push(arr[i]);\n        }\n\n        for(let i = minIndex; i < maxIndex; i++){\n            result.push(arr[i]);\n        }\n\n        return result;\n    }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var len = arr.length;\n\tvar result = [];\n\tfor(var i = 0; i < len; i++){\n\t\tresult.push(get_index(arr[i]));\n\t}\n\tresult.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\treturn result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "arr.sort(function(a, b){\n        return (a-b);\n    });\n\n    for(var i in arr){\n        arr[i] = arr[i]*1;\n    }\n\n    return arr;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var maxOnes = 0;\n    var minOnes = 0;\n    var temp = [];\n    var tempArr = [];\n    var tempObj = {};\n    var count;\n    var maxInt;\n    var newArr = [];\n    var result = [];\n    if(arr.length > 1){\n        maxInt = Math.max.apply(null, arr);\n        count = (maxInt >>> 0).toString(2).split('').length;\n        for(var i = 0; i < arr.length; i++){\n            temp = (arr[i] >>> 0).toString(2).split('');\n            while(temp.length < count){\n                temp.unshift('0');\n            }\n            tempObj = {};\n            tempObj.num = arr[i];\n            tempObj.ones = temp.join('').split('1').length - 1;\n            if(tempObj.ones > maxOnes){\n                maxOnes = tempObj.ones;\n            }\n            if(tempObj.ones < minOnes){\n                minOnes = tempObj.ones;\n            }\n            tempArr.push(tempObj);\n        }\n        for(var j = minOnes; j <= maxOnes; j++){\n            tempArr.forEach(function(item){\n                if(item.ones === j){\n                    newArr.push(item.num);\n                }\n            });\n        }\n        result = newArr;\n    } else {\n        result = arr;\n    }\n    return result;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "//storing number of 1s in binary representation of each number in array\n    var onesArray = [];\n    //storing the decimal values\n    var decArray = [];\n    //storing the values in right order\n    var result = [];\n    //storing the binary representation of each number\n    var binary = [];\n    //storing the binary representation of each number\n    var binRep = [];\n    //storing the unique value for the numbers\n    var unique = [];\n    //storing the number of time each number occurs in the array\n    var occurrences = [];\n    //storing the index from which each number occurs in the array\n    var index = [];\n    for(var i = 0; i < arr.length; i++){\n        //storing the binary representation of each number\n        binary.push(arr[i].toString(2));\n        //finding the number of 1s in the binary representation of each number\n        onesArray.push(binary[i].replace(/0/g, '').length);\n        //storing the decimal value\n        decArray.push(arr[i]);\n    }\n    //Finding the unique values\n    for(var j = 0; j < arr.length; j++){\n        if(unique.indexOf(onesArray[j]) === -1){\n            unique.push(onesArray[j]);\n        }\n    }\n    //sorting the unique values\n    unique.sort();\n    //finding the number of time each number occurs in the array\n    for(var k = 0; k < unique.length; k++){\n        occurrences.push(onesArray.filter(function(elem){\n            return elem === unique[k];\n        }).length);\n    }\n    //finding the index from which each number occurs in the array\n    for(var l = 0; l < unique.length; l++){\n        for(var m = 0; m < arr.length; m++){\n            if(onesArray[m] === unique[l]){\n                index.push(m);\n                break;\n            }\n        }\n    }\n    //sorting the numbers according to the given conditions\n    for(var n = 0; n < occurrences.length; n++){",
    "grade-4": {
      "execution": 0
    },
    "5": "return arr.sort(function(a, b){\n    if (a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) === null){\n      return a - b;\n    } else if (a.toString(2).match(/1/g) === null){\n      return -1;\n    } else if (b.toString(2).match(/1/g) === null){\n      return 1;\n    } else if (a.toString(2).match(/1/g).length === b.toString(2).match(/1/g).length){\n      return a - b;\n    } else {\n      return a.toString(2).match(/1/g).length - b.toString(2).match(/1/g).length;\n    }\n  });\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n",
    "task_id": "30",
    "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n",
    "simplified_intent": "Return only positive numbers in the list.",
    "snippet": [
      "  return l.filter(e => e > 0);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = [];\n\t\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\tresult.push(l[i]);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "var p = [];\n\tfor(var i=0; i<l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\tp.push(l[i]);\n\t\t}\n\t}\n\treturn p;\n}",
    "grade-1": {
      "execution": 1
    },
    "2": "return l.filter((item) => (item >= 0));\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "//Your code here\n    var ans = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            ans.push(l[i]);\n        }\n    }\n    return ans;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return l.filter(function(n){\n    return n > 0;\n  });\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return l.filter(function(num){\n    return num > 0;\n  });\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s){\n",
    "task_id": "86",
    "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n",
    "simplified_intent": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
    "snippet": [
      "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "s=s.replace(/\\W/g,''); //remove all non alphanumeric characters\n    return s.split(' ').sort().join(' ');\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let result = '';\n\t\n\tlet word_arr = s.split(' ');\n\t\n\tfor(let i=0; i<word_arr.length; i++){\n\t\tlet cur_word = word_arr[i];\n\t\t\n\t\tlet chars = cur_word.split('');\n\t\t\n\t\tfor(let j=0; j<chars.length; j++){\n\t\t\tlet cur_char = chars[j];\n\t\t\tlet new_char = cur_char;\n\t\t\t\n\t\t\tif(cur_char > 96){\n\t\t\t\tnew_char++;\n\t\t\t}else if(cur_char > 64){\n\t\t\t\tnew_char++;\n\t\t\t\tif(cur_char > 96){\n\t\t\t\t\tnew_char++;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tnew_char++;\n\t\t\t}\n\t\t\t\n\t\t\tchars[j] = new_char;\n\t\t}\n\t\t\n\t\tresult += chars.join('');\n\t}\n\t\n\treturn result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let r = '';\n    let l = 0;\n    for( let i = 0; i < s.length; i++ ){\n        if( l >= r.length ){\n            r += s.slice(l, i+1);\n            l = i+1;\n        }else{\n            let j = 0;\n            let temp = '';\n            for( ; j < r.length; j++ ){\n                temp += r.charAt(j);\n            }\n            if( s.charAt(i) >= temp.charAt(0) ){\n                r += s.slice(l, i+1);\n                l = i+1;\n            }else{\n                r += r.charAt(j);\n                r += s.slice(l, i+1);\n                l = i+1;\n            }\n        }\n    }\n    return r;\n}\n</code>\nThe first solution you created is basically the one I said above:\n<code>",
    "grade-2": {
      "execution": 0
    },
    "3": "var wordArray = s.split(\" \");\n  for (var i = 0; i < wordArray.length; i++) {\n    wordArray[i] = wordArray[i].split(\"\").sort().join(\"\");\n  }\n  return wordArray.join(\" \");\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "}",
    "grade-4": {
      "execution": 0
    },
    "5": "let arr = s.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    result += sort(arr[i]) + \" \";\n  }\n  return result.trim();\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nfunction compare(game, guess){\n",
    "task_id": "152",
    "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n",
    "simplified_intent": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
    "snippet": [
      "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "const matchScore = game.reduce((sum, score) => sum + score, 0);\n  const gameSum = game.reduce((sum, score) => sum + score, 0);\n  const gameDiff = gameSum - matchScore;\n  const guessesSum = guess.reduce((sum, score) => sum + score, 0);\n  const guessesDiff = guessesSum - matchScore;\n\n  if(gameDiff === 0)\n    return guessesDiff;\n  else\n    return Math.abs(guessesDiff);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "game = game.sort((a, b) => a - b);\n  guess = guess.sort((a, b) => a - b);\n  let gameLen = game.length;\n  let guessLen = guess.length;\n  let result = [];\n  for(let i = 0; i < gameLen; i++){\n    result.push( Math.abs(guess[i]-game[i]) );\n  }\n  return result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(guess.length !== game.length){\n    console.log('guess.length !== game.length');\n    return null;\n  }\n\n  var result = [];\n  for(var i = 0; i < game.length; i++){\n    var diff = Math.abs(guess[i] - game[i]);\n    if(guess[i] === game[i]){\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n\n  return result;\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "return game.map((e,i)=>{\n        return (e-guess[i])===0? 0: Math.abs(e-guess[i])\n    })\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return game.map((score, index) => score - guess[index]);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let answer = []\n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            answer.push(0)\n        }else if(game[i] !== guess[i]){\n            answer.push(Math.abs(game[i] - guess[i]))\n        }\n    }\n    return answer\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest(strings){\n",
    "task_id": "12",
    "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n",
    "simplified_intent": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
    "snippet": [
      "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (strings.length === 0) { return null; }\n    var longer = strings[0];\n    var shortest = null;\n    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length > longer.length) {\n            longer = strings[i];\n        }\n        else if (strings[i].length < shortest.length ||\n                  strings[i].length === shortest.length &&\n                  strings[i] < shortest)\n        {\n            shortest = strings[i];\n        }\n    }\n    return longer;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(!strings || strings.length == 0) return None;\n  if(strings.length === 1) return strings[0];\n\n  var maxLength = 0;\n  var maxString = null;\n\n  strings.forEach(function(str){\n    if(str.length > maxLength){\n      maxLength = str.length;\n      maxString = str;\n    }\n  });\n\n  return maxString;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(strings.length == 0) return None;\n    var maxLength = 0;\n    var result = strings[0];\n    for(var i = 1; i < strings.length; i++){\n        var length = strings[i].length;\n        if(length > maxLength) maxLength = length;\n        if(length > maxLength) result = strings[i];\n    }\n    return result;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(strings.length == 0){\n    return \"None\";\n  }\n  let longestLength = 0;\n  let longestString = \"\";\n  for(let i = 0; i < strings.length; i++){\n    if(strings[i].length > longestLength){\n      longestLength = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if (strings.length === 0) return;\n    let long = strings[0];\n    for (let word of strings){\n        if (word.length > long.length){\n            long = word;\n        }\n    }\n    return long;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "//return strings.sort()[strings.length - 1];\n    let long = strings[0];\n    for(let i = 0; i < strings.length; i++){\n        if(strings[i].length > long.length){\n            long = strings[i];\n        }\n    }\n    return long;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nfunction split_words(txt){\n",
    "task_id": "125",
    "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n",
    "simplified_intent": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
    "snippet": [
      "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let words = [];\n  let counter = 0;\n  for (let i = 0; i < txt.length; i++){\n    if (txt[i] === \" \" || txt[i] === \",\"){\n      words.push(txt.slice(counter, i));\n      counter = i;\n    }\n  }\n  return words;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var words = txt.split(' ');\n\t\n\treturn words.filter(function(word) {\n\t\tvar firstChar = word[0];\n\t\tvar lastChar = word[word.length - 1];\n\t\tvar numOddOrder = firstChar - lastChar;\n\t\treturn numOddOrder % 2 === 1;\n\t}).join(' ');\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "txt = txt.toLowerCase().trim();\n    \n    var words = txt.split(' ');\n    var new_words = [];\n    \n    for(var i = 0; i < words.length; i++){\n        \n        var letter = words[i].charCodeAt(0) - 65;\n        \n        if(letter%2 === 1) new_words.push(words[i]);\n    }\n    \n    return new_words;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let f = txt.split(\" \");\n    let l = txt.split(\",\");\n    if(txt.indexOf(\" \") > -1) {\n        return f;\n    } else if(txt.indexOf(\",\") > -1) {\n        return l;\n    } else {\n        let x = 0;\n        for(let i = 0; i < txt.length; i++) {\n            if(i % 2 != 0) {\n                x++;\n            }\n        }\n        return x;\n    }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(txt.indexOf(\" \") != -1){\n        return txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return txt.split(\",\");\n    }\n    else{\n        var counter = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n                counter++;\n            }\n        }\n        return counter;\n    }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let temp = [];\n    if(txt.indexOf(' ') > -1){\n        temp = txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        temp = txt.split(',');\n    }\n    else{\n        let sum = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(i % 2 == 1){\n                sum += txt.charCodeAt(i) - 97;\n            }\n        }\n        temp.push(sum);\n    }\n    return temp;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n",
    "task_id": "88",
    "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n",
    "simplified_intent": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
    "snippet": [
      "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var sum = 0;\n    for(var i = 0;i < array.length;i++){\n        sum += array[i];\n    }\n    if(sum % 2 == 1){\n        array.sort();\n    }else{\n        array.sort(function(a, b){\n            return b - a;\n        });\n    }\n    return array;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThanks, but this isn't working for me. `[3, 4, 1, 0]` sorts correctly, but `[3, 4, 1, 0, 5]` doesn't.\n<|/ c |>\n<| a tags=javascript,algorithm dscore=0 |>\nJust for fun, here's another take on the question. I just came up with a solution that works but it's not very efficient as is. If you have a more efficient solution, I'd be happy to see it. If I figure it out, I'll update the answer with the solution.\n<code>\nvar array = [3, 4, 5, 0, 1, 4, 2, 6, 7];\nvar copy = [];",
    "grade-0": {
      "execution": 0
    },
    "1": "if(array.length === 0){\n        return array;\n    }\n    \n    let sorted = array.slice(0);\n    \n    let sumArray = sorted.map((item)=>{\n        return item + item;\n    });\n    let sumArraySum = sumArray.reduce((acc, cur)=>{\n        return acc + cur;\n    });\n    \n    if(sumArraySum%2 === 0){\n        sorted.sort((a,b)=>{\n            return a - b;\n        });\n    }else{\n        sorted.sort((a,b)=>{\n            return b - a;\n        });\n    }\n    \n    return sorted;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let sorted_array = []\n  const firstIndexArray = array.map((element) => element)\n  \n  // if first index is odd, sort it in ascending order, else sort it in descending order\n  if (firstIndexArray[0]%2 !== 0){\n    firstIndexArray.sort((a, b) => a-b)\n  } else {\n    firstIndexArray.sort((a, b) => b-a)\n  }\n\n  for(let i = 1; i < firstIndexArray.length; i++){\n    sorted_array.push(firstIndexArray[i])\n  }\n  \n  return sorted_array\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort(function(a, b) {\n      return b - a;\n    });\n  } else {\n    return array.sort(function(a, b) {\n      return a - b;\n    });\n  }\n}\nsort_array([2, 4, 3, 0, 1, 5, 6]);",
    "grade-3": {
      "execution": 1
    },
    "4": "if(array.length<=1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum%2===0){\n    return array.sort((a,b)=>b-a);\n  }\n  return array.sort((a,b)=>a-b);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var sum = array[0] + array[array.length - 1];\n  if (sum % 2 == 0) {\n    return array.sort(function(a, b){return b - a});\n  } else {\n    return array.sort(function(a, b){return a - b});\n  }\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n",
    "task_id": "143",
    "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n",
    "simplified_intent": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
    "snippet": [
      "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "const arr=sentence.split(\" \").map(v=>{\n    if(Number(v)*Number(v)===v){\n      return v\n    }\n  })\n  return arr.filter(v=>v.length%2===0).join(\" \")\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let arr = [];\n    for(let i = 0; i < sentence.length; i++){\n        arr.push(sentence.slice(i,i+1));\n    }\n    let arr2 = [];\n    for (let i = 0; i < arr.length; i++){\n        let count = 0;\n        for (let j = 0; j < arr[i].length; j++) {\n            for (let k = 0; k < arr.length; k++) {\n                if(arr[i][j] == arr[k][j]){\n                    count++;\n                }\n            }\n        }\n        if(count == arr[i].length){\n            arr2.push(arr[i]);\n        }\n    }\n    return arr2.join(' ');\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let result = [];\n    for(let word of sentence.split(' ')) {\n        result.push(...prime_numbers(word.length));\n    }\n    return result.join(' ');\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let new_sentence = '';\n    let word_list = sentence.split(' ');\n    for(let i = 0; i < word_list.length; i++){\n        if(is_prime(word_list[i].length)){\n            new_sentence += word_list[i];\n            new_sentence += ' ';\n        }\n    }\n    return new_sentence.trim();\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let is_prime = [false, false];\n    for(let i = 2; i < 101; i++){\n        is_prime[i] = true;\n    }\n    for(let i = 2; i < 101; i++){\n        if(is_prime[i]){\n            for(let j = i * i; j < 101; j += i){\n                is_prime[j] = false;\n            }\n        }\n    }\n    let result = [];\n    for(let i = 0; i < sentence.length; i++){\n        if(sentence[i] !== ' '){\n            let word = '';\n            while(i < sentence.length && sentence[i] !== ' '){\n                word += sentence[i];\n                i++;\n            }\n            if(is_prime[word.length]){\n                result.push(word);\n            }\n        }\n    }\n    return result.join(' ');\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "const words = sentence.split(' ')\n  const prime_words = words.filter(word => is_prime(word.length))\n  return prime_words.join(' ')\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nfunction sum_squares(lst){\n",
    "task_id": "133",
    "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n",
    "simplified_intent": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var sum = 0;\n  \n  for(var i of lst){\n    sum += Math.round(i*i)*Math.round(i*i);\n  }\n\n  return sum;\n}\n\nvar sum_sqrs_test = [\n  {\n    \"name\": \"should return 14\",\n    \"lst\": [ 1, 2, 3 ],\n    \"exp\": 14\n  },\n  {\n    \"name\": \"should return 98\",\n    \"lst\": [ 1, 4, 9 ],\n    \"exp\": 98\n  },\n  {\n    \"name\": \"should return 84\",\n    \"lst\": [ 1, 3, 5, 7 ],\n    \"exp\": 84\n  },\n  {\n    \"name\": \"should return 29\",\n    \"lst\": [ 1.4, 4.2, 0 ],\n    \"exp\": 29\n  },\n  {\n    \"name\": \"should return 6\",\n    \"lst\": [-2.4, 1, 1 ],\n    \"exp\": 6\n  },\n  {\n    \"name\": \"should return 0\",\n    \"lst\": [ 0, 0 ],\n    \"exp\": 0\n  }\n];\n\nTest.runTests(sum_sqrs_test);",
    "grade-0": {
      "execution": 0
    },
    "1": "let result = 0;\n    for(let item of lst){\n      result = Math.ceil(Math.pow(item, 2))+result;\n    }\n    return result\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return lst.map(function(v){return Math.ceil(Math.sqrt(v))}).reduce(function(a,b){return a+b})\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let squares = [];\n  for (let i = 0; i < lst.length; i++) {\n    let element = lst[i];\n    let rounded = Math.ceil(element);\n    let squared = rounded * rounded;\n    squares.push(squared);\n  }\n  let sum = 0;\n  for (let i = 0; i < squares.length; i++) {\n    let element = squares[i];\n    sum += element;\n  }\n  return sum;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return sum;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        var number = lst[i];\n        var numberSquared = Math.ceil(number * number);\n        sum += numberSquared;\n    }\n    return sum;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n",
    "task_id": "85",
    "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n",
    "simplified_intent": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
    "snippet": [
      "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var evens = lst.reduce((a, v)=>{\n    if(v%2==0){\n      a.push(v);\n    }\n    return a;\n  },[]);\n  return evens.length;\n}\nvar add = add(lst);",
    "grade-0": {
      "execution": 0
    },
    "1": "let count = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % 2 === 0) {\n      count += lst[i]\n    }\n  }\n  return count\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let evenArr = [];\n    let oddArr = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            evenArr.push(lst[i]);\n        }else{\n            oddArr.push(lst[i]);\n        }\n    }\n    return evenArr.concat(oddArr);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let add = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            add += lst[i];\n        }\n    }\n    return add;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "}\n\nmodule.exports = {\n  \"add\": add\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n",
    "task_id": "60",
    "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n",
    "simplified_intent": "sum_to_n is a function that sums numbers from 1 to n.",
    "snippet": [
      "  return n * (n + 1) / 2;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let result = 0;\n  for (let i = 1; i <= n; i++){\n    result += i;\n  }\n  return result;\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "return function(num){\n    return num + num + num + num + num;\n  };\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return function(a){\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n      sum += a;\n      a = a + 1;\n    }\n    return sum;\n  }\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum = sum + i;\n\t}\n\treturn sum;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var sum = 0;\n    for(var i = 0; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "//solution goes here\n\tvar sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n",
    "task_id": "24",
    "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n",
    "simplified_intent": "For a given number n, find the largest number that divides n evenly, smaller than n",
    "snippet": [
      "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let counter = 1;\n  while(n > counter){\n    n--;\n    counter *= 2;\n  }\n  return n;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var max_divisor = Math.floor(Math.sqrt(n));\n  \n  while(n%max_divisor === 0){\n    max_divisor++;\n  }\n  return max_divisor;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let largest_d = n\n  for(let d = 2; d <= n; d++){\n    if(n % d == 0){\n      largest_d = d\n    }\n  }\n  return largest_d\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var largest_divisor = 0;\n    for(var i = 1; i < n; i++){\n        if(n % i == 0){\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let i = n;\n  while (i > 0){\n    if (n % i === 0){\n      return i;\n    }\n    i -= 1;\n  }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n",
    "task_id": "45",
    "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n",
    "simplified_intent": "Given length of a side and high return area for a triangle.",
    "snippet": [
      "  return a * h / 2.0;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return a * (h / 2.0);\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "return a * (h / 2)*(h / 2);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var hw = h*w/2;\n    return hw*Math.sqrt(3-2*h*h/a);\n}\n</code>\nThe triangle's area can be calculated using the triangle_area function. The height of the triangle can be calculated using triangleHeight.\n<|/ a tags=geometry,javascript |>\n<| a dscore=0 |>\n<code>",
    "grade-2": {
      "execution": 0
    },
    "3": "}",
    "grade-3": {
      "execution": 0
    },
    "4": "return a * h / 2;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return 0.5 * a * h;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nfunction get_odd_collatz(n){\n",
    "task_id": "123",
    "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n",
    "simplified_intent": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
    "snippet": [
      "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(n < 1){\n        return [[]];\n    }\n\n    let odd_collatz_list = [];\n    let current_odd_number = 1;\n    let current_odd_number_list = [];\n\n    for (let i = 1; i <= n; i++){\n        if (i % 2 == 0){\n            current_odd_number += 2;\n        }else{\n            current_odd_number += 1;\n        }\n        current_odd_number_list.push(current_odd_number);\n        odd_collatz_list.push(current_odd_number_list);\n    }\n\n    return odd_collatz_list;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var odd_collatz = [];\n\tif(n == 1 || n == 0){\n\t\todd_collatz.push(n);\n\t}\n\telse{\n\t\todd_collatz.push(get_odd_collatz(n/2));\n\t\todd_collatz.push(n % 2 + 1);\n\t}\n\treturn odd_collatz;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(n <= 1){\n    return [1]\n  }else{\n    let list = get_odd_collatz(n-1);\n    let odd_list = [];\n    for(let i=0; i<list.length; i++){\n      let item = list[i];\n      if(item % 2 === 0){\n        odd_list.push(item/2)\n      }else{\n        odd_list.push(3*item+1)\n      }\n    }\n    return odd_list.sort()\n  }\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var c = [n];\n  for(i=0; i<c.length; i++){\n    if(c[i] % 2 == 0){\n      c.push(c[i]/2);\n    }\n    else{\n      c.push(c[i]*3+1);\n    }\n  }\n  var odds = c.filter(function(item){\n    return item % 2 == 1;\n  });\n  return odds;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var seq = [n];\n    var i = 0;\n    while(seq[i] != 1){\n        if(seq[i] % 2 == 0){\n            seq.push(seq[i] / 2);\n        }else{\n            seq.push(seq[i] * 3 + 1);\n        }\n        i++;\n    }\n    var arr = [];\n    for(var x = 0; x < seq.length; x++){\n        if(seq[x] % 2 == 1){\n            arr.push(seq[x]);\n        }\n    }\n    return arr;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let arr = [];\n  while(n>1){\n    if(n%2==1){\n      arr.push(n);\n    }\n    n = n % 2 == 0 ? n/2 : 3*n+1;\n  }\n  arr.push(1);\n  return arr;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(', ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens(lst){\n",
    "task_id": "119",
    "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n",
    "simplified_intent": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
    "snippet": [
      "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Your code here\n    let firstIndex = lst[0];\n    let secondIndex = lst[1];\n    let firstParenCount = 0;\n    let secondParenCount = 0;\n    for(let i = 0; i<lst.length; i++){\n        if(lst[i] == firstIndex){\n            firstParenCount++;\n        }\n        else if(lst[i] == secondIndex){\n            secondParenCount++;\n        }\n    }\n    if(firstParenCount == secondParenCount){\n        return 'Yes';\n    }\n    else return 'No';\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(lst.length < 2){\n    return false\n  }\n  if(lst[0] === lst[1]){\n    return true\n  }\n  return match_parens(lst[0]) && match_parens(lst[1])\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "str = lst.join(\"\");\n    return (str.match(/(\\))*(\\))/g)==null)\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let open = 0;\n  let close = 0;\n  lst[0].split('').forEach(element => {\n    if (element === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  });\n  lst[1].split('').forEach(element => {\n    if (element === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  });\n  if (open === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var left = [], right = [];\n  for (var i = 0; i < lst[0].length; i++) {\n    lst[0][i] == '(' ? left.push(lst[0][i]) : right.push(lst[0][i]);\n  }\n  for (var i = 0; i < lst[1].length; i++) {\n    lst[1][i] == '(' ? left.push(lst[1][i]) : right.push(lst[1][i]);\n  }\n  while (left.length > 0 && right.length > 0) {\n    left.pop();\n    right.pop();\n  }\n  return left.length == 0 && right.length == 0 ? 'Yes' : 'No';\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var left = 0, right = 0;\n    var str1 = lst[0], str2 = lst[1];\n    for (var i = 0; i < str1.length; i++) {\n        if (str1[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n    }\n    for (var i = 0; i < str2.length; i++) {\n        if (str2[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n    }\n    if (left > right) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero(l){\n",
    "task_id": "43",
    "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n",
    "simplified_intent": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
    "snippet": [
      "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var t=[]\n    for(var i=0;i<l.length;i++){\n        if(l[i]!==0) t.push(l[i])\n    }\n    var i=t.length\n    while(i--){\n        for(var j=i+1;j<t.length;j++){\n            if(t[i]+t[j]===0){\n                return false\n            }\n        }\n    }\n    return true\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let n = l.length;\n    let m = n-1;\n    for(let i=0; i<n; i++){\n        for(let j=i+1; j<m; j++){\n            if(l[i] + l[j] == 0){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "for(var i = 0; i < l.length; i++){\n    var sum = 0;\n    for(var j = 0; j < l.length; j++){\n      if(i != j){\n        if(l[j] > 0){\n          sum = sum + l[j];\n        }\n      }\n    }\n    if(sum != 0){\n      return true;\n    }\n  }\n  return false;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if (l.length < 2) {\n        return false;\n    }\n    else {\n        var a = l.length;\n        for (var i = 0; i < a; i++){\n            for (var j = i + 1; j < a; j++){\n                if (l[i] + l[j] == 0){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if (l.length < 2) {\n        return false;\n    }\n    for (var i = 0; i < l.length; i++) {\n        for (var j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "if (l.length == 0){\n        return False;\n    }\n    var i = 0;\n    var j = 1;\n    while (i < l.length - 1){\n        while (j < l.length){\n            if (l[i] + l[j] == 0){\n                return True;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    return False;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\nfunction fruit_distribution(s, n){\n",
    "task_id": "67",
    "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n",
    "simplified_intent": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
    "snippet": [
      "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var num;\n    var num2;\n    var num3;\n    var num4;\n    var num5;\n    var num6;\n    var num7;\n    var num8;\n    var num9;\n    num = s.split(\"apples and oranges\")[1];\n    num2 = num.split(\"and\");\n    num3 = num2[0].split(\" and \");\n    num4 = num3[0];\n    num5 = num3[1];\n    num6 = num4.split(\" \");\n    num7 = num6[0];\n    num8 = num6[1];\n    num9 = num7.split(\" \");\n    return num9[0] - n; \n}\n</code>\n<|/ a tags=javascript |>\n<| a |>\n<code>\nvar s = \"4 apples and 3 oranges\";\nvar n = s.split(\"apples and oranges\")[1].split(\"and\");\nvar x = n[0].split(\" \")[0];",
    "grade-0": {
      "execution": 0
    },
    "1": "var total = 0;\n  s = s.split(\" \");\n  for(var i = 0; i < s.length; i++){\n    total += parseInt(s[i]);\n  }\n  var num = parseInt(n) - total;\n  if(num < 0) return \"Invalid input\";\n  return num;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// the idea is to count how many times each fruit appears\n    // and than subtract it from the total\n    \n    // you can use a loop to go through all the characters in the string\n    // and increment a counter for each character you encounter\n    // this loop can be done using either recursion or a loop like in this example\n    \n    // here is a small example using a recursive solution\n    // this solution will always return the same number no matter what\n    // the string or the integer you pass in\n    // but you can see how you can easily extend this to solve this problem using loops\n    // like we saw earlier\n    \n    if(s.length == 0){\n        return n\n    }\n    \n    let fruits = s.split(\"\").filter(v => v != \" \")\n    let fruits_freq = []\n    \n    for(let i = 0; i < fruits.length; i++){\n        fruits_freq.push(fruits.filter(f => f == fruits[i]).length)\n    }\n    \n    let sum = 0\n    for(let i = 0; i < fruits_freq.length; i++){\n        sum += fruits_freq[i]\n    }\n    return sum - n\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(s.length == 0 || typeof s != \"string\") return \"Invalid input\";\n    let num = \"0123456789\";\n    let fruits = s.split(\" \");\n    let num_of_apples = 0;\n    let num_of_oranges = 0;\n    let total_fruits = 0;\n    for(let i = 0; i < fruits.length; i++){\n        for(let j = 0; j < fruits[i].length; j++){\n            if(num.includes(fruits[i][j])){\n                if(fruits[i-1] == \"apples\"){\n                    num_of_apples = parseInt(fruits[i]);\n                }else if(fruits[i-1] == \"oranges\"){\n                    num_of_oranges = parseInt(fruits[i]);\n                }\n            }\n        }\n    }\n    return n - num_of_apples - num_of_oranges;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var str = s.split(\" \");\n    var len = str.length;\n    var sum = 0;\n    var str1 = [];\n    var str2 = [];\n    for(var i = 0; i < len; i++){\n        if(str[i] == \"apples\"){\n            str1.push(str[i-1]);\n        }\n        if(str[i] == \"oranges\"){\n            str2.push(str[i-1]);\n        }\n    }\n    var str3 = str1.concat(str2);\n    var str4 = str3.join(\" \");\n    var str5 = str4.split(\" \");\n    var len2 = str5.length;\n    for(var j = 0; j < len2; j++){\n        sum += parseInt(str5[j]);\n    }\n    var n1 = n - sum;\n    return n1;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nfunction string_sequence(n){\n",
    "task_id": "15",
    "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n",
    "simplified_intent": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
    "snippet": [
      "  return [...Array(n).keys(), n].join(' ')\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = '';\n  for(var i=0; i<n; i++){\n    result += string_sequence_item(i);\n  }\n  return result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var s = '';\n  for(var i=0;i<n;i++){\n    s += i.toString(36);\n  }\n  return s;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var result = '';\n    for(var i = 0; i < n; i++)\n        result += string_of(i);\n    return result;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var seq=\"\";\n    for(var i=0;i<=n;i++){\n        seq+=i;\n        if(i!=n){\n            seq+=\" \";\n        }\n    }\n    return seq;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if (n === 0) {\n        return '0';\n    } else {\n        return string_sequence(n - 1) + ' ' + n;\n    }\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var output = \"\";\n    for(var i = 0; i <= n; i++){\n        output += i + \" \";\n    }\n    return output;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n",
    "task_id": "75",
    "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n",
    "simplified_intent": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
    "snippet": [
      "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var multiples = 1;\n\t\n\tfor(var i = 3; i< a; i+=2){\n\t\tif((multiples % i) == 0){\n\t\t\treturn false;\n\t\t}\n\t\tmultiples += i;\n\t}\n\treturn true;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var isMultipletPrime = true;\n\ta = a % 100;\n\tif (a > 1){\n\t\tif (a > 10){\n\t\t\ta = is_multiply_prime(a/10);\n\t\t\tisMultipletPrime = isMultipletPrime && a;\n\t\t}\n\t\telse if (a > 5) {\n\t\t\ta = is_multiply_prime(a/5);\n\t\t\tisMultipletPrime = isMultipletPrime && a;\n\t\t}\n\t\telse if (a > 2) {\n\t\t\ta = is_multiply_prime(a/2);\n\t\t\tisMultipletPrime = isMultipletPrime && a;\n\t\t}\n\t\telse if (a > 1) {\n\t\t\ta = is_multiply_prime(a);\n\t\t\tisMultipletPrime = isMultipletPrime && a;\n\t\t}\n\t}\n\treturn isMultipletPrime;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if((a % 3 == 0) && (a > 2 && a < 100)){\n    var prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    for(var num in prime_numbers){\n      if(a%prime_numbers[num] == 0){\n        return false;\n      }\n    }\n  }\n  else{\n    return false;\n  }\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var check = a;\n\tvar y = 1;\n\tvar num = 2;\n\tvar nums = [];\n\tvar prime = [];\n\tfor(var i = 0;i < check;i++){\n\t\tnums.push(i);\n\t}\n\tnums.shift();\n\tnums.shift();\n\twhile(true){\n\t\tif(check%num === 0){\n\t\t\ty = y * num;\n\t\t\tprime.push(num);\n\t\t\tcheck = check/num;\n\t\t}\n\t\tif(y === a){\n\t\t\tif(prime.length === 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tnum++;\n\t}\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var arr = prime_numbers(a);\n\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = 0; j < arr.length; j++){\n\t\t\tfor(var k = 0; k < arr.length; k++){\n\t\t\t\tif(arr[i] * arr[j] * arr[k] == a){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(a==0){\n\t\treturn false;\n\t}else if(a==1){\n\t\treturn true;\n\t}else{\n\t\tfor(var i=2;i<=a;i++){\n\t\t\tif(a%i==0){\n\t\t\t\ta/=i;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif(a==1){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n",
    "task_id": "2",
    "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n",
    "simplified_intent": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
    "snippet": [
      "  return number % 1.0;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var re = /^\\-?\\d+/;\n\tif(!number.match(re)){\n\t\tthrow new Error(\"Input argument is not a number: \" + number);\n\t}\n\tvar digits = number.match(re);\n\tvar decimals = digits[1] - 0;\n\tvar whole = digits[2];\n\tif(whole == 0 || decimals == 0){\n\t\treturn 0;\n\t}\n\tvar factor = Math.pow(10,decimals);\n\tnumber = Math.round(number * factor) / factor;\n\treturn number;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "number = Math.round(number);\n\t\n\t// return Math.floor(number);\n\treturn number;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let float_number = parseFloat(number);\n\tlet decimal_part = number_utils.truncate_decimal(float_number);\n\tlet integer_part = number_utils.truncate_int(float_number);\n\treturn decimal_part + '/' + integer_part;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var integer = Math.floor(number);\n\tvar decimal = number - integer;\n\treturn decimal;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "}",
    "grade-4": {
      "execution": 0
    },
    "5": "let i = parseInt(number);\n    return number - i;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word){\n",
    "task_id": "118",
    "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n",
    "simplified_intent": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
    "snippet": [
      "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "word = word.toLowerCase()\n  if(word.length <= 2){\n    return \"\"\n  }\n  if(word.includes(\"a\") || word.includes(\"e\") || word.includes(\"i\") || word.includes(\"o\") || word.includes(\"u\") || word.includes(\"y\")){\n    return word.substr(word.length - 2)\n  }\n  for(let i = 0; i < word.length - 1; i++){\n    if(word[i] === \"a\" || word[i] === \"e\" || word[i] === \"i\" || word[i] === \"o\" || word[i] === \"u\" || word[i] === \"y\"){\n      return word[i]\n    }\n  }\n  return \"\"\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "// Write your code here\n    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = {};\n    vowels.forEach(function(item){\n        vowelsCount[item] = 0;\n    });\n    word = word.toLowerCase();\n    for(let i = word.length-1; i>0; i--){\n        for(let j = 1; j < i; j++){\n            if(word[i] == word[j] && !vowelsCount[word[i]]) vowelsCount[word[i]]++;\n        }\n    }\n    console.log(vowelsCount)\n    return Object.keys(vowelsCount).sort(function(a, b){\n        return vowelsCount[a] - vowelsCount[b];\n    }).reverse().join('');\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "for(var i = 1; i<word.length; i++){\n    if(word[i]!=='u' && word[i]!=='A' && word[i]!=='E' && word[i]!=='I' && word[i]!=='O' && word[i]!=='U'){\n      return word[i];\n    }\n  }\n  return \"\";\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const vowels = \"aeiou\"\n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let result = []\n    let c = 0\n    for(let i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            result.push(i)\n        }\n        if(consonants.includes(word[i])){\n            c = i\n            break\n        }\n    }\n    let closest = 0\n    if(result.length > 0){\n        for(let i = 0; i < result.length; i++){\n            if(result[i] > c){\n                closest = result[i]\n                break\n            }\n        }\n    }\n    return word[closest] || \"\"\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "word = word.split('').reverse();\n    let regex = /[aeiou]/;\n    let vowel = '';\n    for(let i = 0; i < word.length; i++){\n        if(regex.test(word[i])){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let vowels = 'aeiouAEIOU';\n    let arr = word.split('');\n    let index = arr.reverse().findIndex(letter => {\n        if(vowels.includes(letter)){\n            return vowels.includes(letter);\n        }\n    });\n    return index == -1 ? '' : arr[index];\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction decimal_to_binary(decimal){\n",
    "task_id": "79",
    "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n",
    "simplified_intent": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
    "snippet": [
      "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Your code here\n  var result = 'db';\n  var binary_num = '';\n  for (var i = decimal; i > 0; i--){\n    if(i%2 != 0) binary_num += 1;\n    else binary_num += 0;\n  }\n  return binary_num + result + 'db';\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return parseInt(decimal).toString(2);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let decimalToBinary = (decimal) => {\n    let res = \"\";\n    if (decimal < 2) {\n      res += \"0\";\n    }\n    for (let i = decimal; i > 0; i--) {\n      if (decimal % 2 === 0) {\n        res += \"1\";\n      } else {\n        res += \"0\";\n      }\n      decimal = decimal / 2;\n    }\n    return res;\n  };\n  if (decimal === 0 || decimal === 1){\n    return decimal;\n  } else {\n    return decimalToBinary(decimal);\n  }\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var bin_str = decimal.toString(2);\n    bin_str = 'db' + bin_str + 'db';\n    return bin_str;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return 'db' + decimal.toString(2) + 'db';\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let result = [];\n  while (decimal >= 1) {\n    result.unshift(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + result.join('') + 'db';\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) \u279e True\n// is_sorted([1, 2, 3, 4, 5]) \u279e True\n// is_sorted([1, 3, 2, 4, 5]) \u279e False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\nfunction is_sorted(lst){\n",
    "task_id": "126",
    "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) \u279e true\n  isSorted([1, 2, 3, 4, 5]) \u279e true\n  isSorted([1, 3, 2, 4, 5]) \u279e false\n  isSorted([1, 2, 3, 4, 5, 6]) \u279e true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e false\n  isSorted([1, 2, 2, 3, 3, 4]) \u279e true\n  isSorted([1, 2, 2, 2, 3, 4]) \u279e false\n  */\nconst isSorted = (lst) => {\n",
    "simplified_intent": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
    "snippet": [
      "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var prev = null;\n  for(var i = 0; i<lst.length; i++){\n    if( prev === null){\n      prev = lst[i];\n      continue;\n    }\n    if(prev === lst[i]){\n      if(prev !== lst[i-1]){\n        return false;\n      }\n      continue;\n    }\n    if(prev < lst[i]){\n      return false;\n    }\n  }\n  return true;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var counter = 0;\n\tvar len = lst.length;\n\tfor(var i=0;i<len;i++){\n\t\tfor(var j=i;j<len;j++){\n\t\t\tif(lst[i]<lst[j]){\n\t\t\t\tcounter++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(counter>=len){\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (lst.length < 2){\n        return true;\n    }\n    var hash = {};\n    for (var i = 0; i < lst.length; i++){\n        hash[lst[i]] = hash[lst[i]] || 0;\n        hash[lst[i]] += 1;\n    }\n    var sorted = true;\n    for (var k in hash){\n        if (hash[k] > 1){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let prev = -Infinity;\n    for (let num of lst) {\n        if (num <= prev) return false;\n        prev = num;\n    }\n    return true;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "lst = lst.filter((a,b) => lst.indexOf(a) === b)\n\treturn lst.every((a,b) => b === 0 || a >= lst[b-1])\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] < lst[i + 1]){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length(arr){\n",
    "task_id": "105",
    "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n",
    "simplified_intent": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
    "snippet": [
      "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var sorted = arr.sort(function(a, b) {\n\t\treturn a-b;\n\t});\n\tvar reversed = sorted.reverse();\n\tfor(var i = 0; i < reversed.length; i++) {\n\t\tvar index = parseInt(reversed[i], 10);\n\t\treversed[i] = by_index[index % 10]; //use index % 10 to get the corresponding number in by_index\n\t}\n\treturn reversed.reverse();\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(!Array.isArray(arr)){return []};\n\tlet len = arr.length;\n\tlet max_num = Math.max(...arr);\n\tlet new_arr = arr.reduce((a, c, i) => {\n\t\tif(c === max_num) {\n\t\t\ta[len-i] = i;\n\t\t}\n\t\treturn a;\n\t},[]);\n\treturn new_arr.sort().map(e => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][e]).reverse();\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let res = [];\n  if(arr.length == 0) return [];\n  for(let num of arr){\n    if(num >= 1 && num <= 9){\n      res.push(\"One\");\n    }\n    else if(num >= 10 && num <= 99){\n      res.push(\"Two\");\n    }\n    else if(num >= 100 && num <= 999){\n      res.push(\"Three\");\n    }\n    else if(num >= 1000 && num <= 9999){\n      res.push(\"Four\");\n    }\n    else if(num >= 10000 && num <= 99999){\n      res.push(\"Five\");\n    }\n    else if(num >= 100000 && num <= 999999){\n      res.push(\"Six\");\n    }\n    else if(num >= 1000000 && num <= 9999999){\n      res.push(\"Seven\");\n    }\n    else if(num >= 10000000 && num <= 999999999){\n      res.push(\"Eight\");\n    }\n    else if(num >= 1000000000 && num <= 99999999999){\n      res.push(\"Nine\");\n    }\n  }\n  return res.reverse();\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let newArr = arr.sort(function(a, b){\n      return b.length - a.length;\n    });\n    return newArr;\n  }",
    "grade-3": {
      "execution": 0
    },
    "4": "let arr_map = arr.map(e => e.toString().length);\n    let map_group = group_by(arr_map);\n    let sort_group = sort_by(map_group, 0, 1);\n    let map_sort = sort_group.map(e => e[1]);\n    let output = [];\n    map_sort.forEach(e => {\n        output = output.concat(e);\n    });\n    return output;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "arr.sort(function(a, b){\n        return a - b;\n    });\n    return arr;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n",
    "task_id": "68",
    "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n",
    "simplified_intent": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
    "snippet": [
      "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let even = arr \n    for (let i = 0; i < arr.length; i++) {\n      if(arr[i] % 2 === 0) {\n        even.splice(even.indexOf(arr[i]), 1);\n      }\n    }\n    if (even.length == 0) {\n      return []\n    }\n    return even.sort((a,b)=>a-b)[0]\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var minValue = Number.MAX_VALUE;\n\tvar minIndex = -1;\n\tvar temp = [];\n\tfor(var i = 0, len = arr.length; i < len; i++){\n\t\tvar num = arr[i];\n\t\tif(num < 0){\n\t\t\tnum *= -1;\n\t\t}\n\t\tif(num > minValue){\n\t\t\tminValue = num;\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\twhile(minIndex >= 0){\n\t\ttemp.push(minValue);\n\t\tminIndex--;\n\t}\n\tif(temp.length == 0){\n\t\treturn [];\n\t}\n\treturn temp;\n}\n\nvar pluck2 = function(arr){\n\tvar minValue = Number.MAX_VALUE;\n\tvar minIndex = -1;\n\tvar temp = [];\n\tfor(var i = 0, len = arr.length; i < len; i++){\n\t\tvar num = arr[i];\n\t\tif(num < 0){\n\t\t\tnum *= -1;\n\t\t}\n\t\tif(num > minValue){\n\t\t\tminValue = num;\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\tif(minIndex == -1){\n\t\treturn [];\n\t}\n\twhile(true){\n\t\ttemp.push(minValue);\n\t\tminIndex--;\n\t\tif(minIndex >= 0 && arr[minIndex] % 2 == 0){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(temp.length == 0){\n\t\treturn [];\n\t}\n\treturn temp;\n};\n\nvar pluck3 = function(arr){\n\tvar minValue = Number.MAX_VALUE;\n\tvar minIndex = -1;\n\tvar temp = [];\n\tfor(var i = 0, len = arr.length; i < len; i++){\n\t\tvar num = arr[i];\n\t\tif(num < 0){\n\t\t\tnum *= -1;\n\t\t}\n\t\tif(num > minValue){\n\t\t\tminValue = num;\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\tif(minIndex == -1){\n\t\treturn [];\n\t}\n\twhile(true){\n\t\ttemp.push(minValue);\n\t\tminIndex--;\n\t\tif(minIndex >= 0 && arr[minIndex] % 2 == 1){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(temp.length == 0){\n\t\treturn [];\n\t}\n\treturn temp;\n};",
    "grade-1": {
      "execution": 0
    },
    "2": "const len = arr.length;\n    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    let smalest_value;\n    let smalest_index;\n    for(let i = 0;i < len;i++){\n        if(arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if(min === Number.MAX_SAFE_INTEGER){\n        return [smalest_value, smalest_index];\n    }\n    for(let i = 0;i < len;i++){\n        if(arr[i] === min){\n            smalest_value = arr[i];\n            smalest_index = i;\n        }\n    }\n    return [smalest_value, smalest_index];\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(arr.length === 0){\n        return [];\n    }\n    const even = arr.filter(val => val % 2 === 0).sort((a,b) => a - b)[0];\n    if(even === undefined){\n        return [];\n    }\n    const ind = arr.indexOf(even);\n    return [even, ind];\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let evens = arr.filter(n => n % 2 === 0);\n    let minEven = Math.min(...evens);\n    let minEvenIndex = arr.indexOf(minEven);\n    return [minEven, minEvenIndex];\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let smallestEven = null;\n\tlet smallestEvenIndex = null;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0){\n\t\t\tif(smallestEven === null){\n\t\t\t\tsmallestEven = arr[i];\n\t\t\t\tsmallestEvenIndex = i;\n\t\t\t}\n\t\t\telse if(arr[i] < smallestEven){\n\t\t\t\tsmallestEven = arr[i];\n\t\t\t\tsmallestEvenIndex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn smallestEven === null ? [] : [smallestEven, smallestEvenIndex];\n}\n\nlet arr1 = [4,2,3];\nlet arr2 = [1,2,3];\nlet arr3 = [];\nlet arr4 = [5, 0, 3, 0, 4, 2];",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3]) = -1\nfunction can_arrange(arr){\n",
    "task_id": "135",
    "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n",
    "simplified_intent": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
    "snippet": [
      "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var maxIndex = 0;\n    var maxElem = arr[0];\n\n    for (var i=1; i<arr.length; i++){\n        if (arr[i] >= maxElem){\n            maxIndex = i;\n        }\n    }\n\n    return maxIndex;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > max && arr[i] != arr[i-1])\n            max = arr[i];\n    }\n    return max;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let maxVal = arr[0];\n  let maxIdx = 0;\n  for (let i = 1; i < arr.length; i++){\n    if (arr[i] < maxVal){\n      maxVal = arr[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i+1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "for (var i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i-1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var len = arr.length, index = len - 1;\n  for(var i = 0; i < len; i++){\n    if(arr[i] > arr[i + 1]){\n      index = i;\n      break;\n    }\n  }\n  return index;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunction f(n){\n",
    "task_id": "106",
    "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n",
    "simplified_intent": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
    "snippet": [
      "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = [];\n   for(var i = 0; i < n; i++){\n      var fac = 1;\n      for(var j = i; j < n; j++){\n         fac *= j;\n      }\n      result.push(fac)\n   }\n   return result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if(n<=1){\n      return [1]\n  }\n  else{\n      var factorials = [];\n      for(var i = 1; i <= n; i++){\n          factorials.push(1*i+ factorials[factorials.length-1]);\n      }\n      return factorials;\n  }\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var arr = [];\n  for(i = 1; i<=n; i++){\n    if(i%2 === 0){\n      arr.push(i*i);\n    }else{\n      arr.push(i+1);\n    }\n  }\n  return arr;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let array = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            array.push(factorial(i));\n        } else {\n            array.push(sum(i));\n        }\n    }\n    return array;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let numberArray = []\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        numberArray.push(factorialize(i))\n      } else {\n        numberArray.push(sumOfNumbers(i))\n      }\n    }\n    return numberArray\n  }\n  \n  function factorialize(num) {\n    let factorial = 1\n    for (let i = 1; i <= num; i++) {\n      factorial *= i\n    }\n    return factorial\n  }\n  \n  function sumOfNumbers(num) {\n    let sum = 0\n    for (let i = 1; i <= num; i++) {\n      sum += i\n    }\n    return sum\n  }\n  \n  console.log(f(5))\n  console.log(f(6))",
    "grade-4": {
      "execution": 1
    },
    "5": "const list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i%2 === 0 ? i * (i-1) : (i*(i+1))/2);\n  }\n  return list;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n",
    "task_id": "34",
    "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n",
    "simplified_intent": "Return sorted unique elements in a list",
    "snippet": [
      "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return sortUnique(uniq(l || []));\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return l.sort(function(a, b){\n        return a - b;\n    });\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var u = {}, a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])){\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) == -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var u = l.sort();\n\tvar ul = [];\n\t\n\tfor(var i = 0; i < u.length; i++){\n\t\tif(u[i] != u[i+1]){\n\t\t\tul.push(u[i]);\n\t\t}\n\t}\n\treturn ul;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "l.sort();\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i-1] == l[i])\n\t\t\tl.splice(i--, 1);\n\t}\n\treturn l;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n",
    "task_id": "49",
    "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n",
    "simplified_intent": "Return 2^n modulo p (be aware of numerics).",
    "snippet": [
      "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var val = p[0];\n    for(var i = 0; i < p.length; i++){\n        if(p[i] < val){\n            val = p[i];\n        }\n    }\n    if(p.length + 1 < val){\n        return val - p.length;\n    }\n    else{\n        return val;\n    }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var ret=1;\n  while(n>0){\n    if(n & 1){\n      n--;\n      ret=ret*p+((p=p+1)&1);\n    }\n    p=(p+2)&7;\n    n=(n-2)&7;\n  }\n  return ret;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var i, r = 1;\n  for(i = 1; i <= n; i++){\n    r = r * p % i;\n  }\n  return r;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(n == 0)\n\t\treturn 1;\n\tif(n == 1)\n\t\treturn 2 % p;\n\telse if(n % 2 == 0)\n\t\treturn (modp(n/2, p) * modp(n/2, p)) % p;\n\telse\n\t\treturn (2 * modp(n/2, p) * modp(n/2, p)) % p;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var res = 1,\n        p_inv = p - 2;\n    while (p_inv > 0) {\n        if (p_inv % 2 == 1) {\n            res = (res * n) % p;\n        }\n        n = (n * n) % p;\n        p_inv = Math.floor(p_inv / 2);\n    }\n    return res;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(n<0)\n        return modp(-n, p);\n    if(n==0)\n        return 1;\n    var aux = modp(n/2, p);\n    aux = (aux*aux)%p;\n    if(n%2==1)\n        aux=(aux*2)%p;\n    return aux;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums){\n",
    "task_id": "114",
    "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n",
    "simplified_intent": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
    "snippet": [
      "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var minSum = 0;\n    for(var i = 0; i < nums.length; i++){\n        var curSum = nums[i];\n        for(var j = i; j < nums.length; j++){\n            curSum += nums[j];\n            minSum = Math.min(minSum, curSum);\n        }\n    }\n    return minSum;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "nums = nums.sort();\n\t\n\tlet sum = 0;\n\tlet min = Infinity;\n\t\n\tfor(let i=0; i<nums.length; i++){\n\t\t\n\t\tsum += nums[i];\n\t\t\n\t\tif(sum < min){\n\t\t\tmin = sum;\n\t\t}\n\t\t\n\t\tif(sum > 0 && nums[i] < 0){\n\t\t\tsum -= nums[i];\n\t\t}\n\t}\n\t\n\treturn min;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let total = 0;\n  for (let i of nums){\n    total = total + i;\n  }\n  return total;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let sum = 0;\n    let minSum = 0;\n    let min = nums[0];\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(minSum > sum){\n            minSum = sum;\n        }\n        if(nums[i] < min){\n            min = nums[i];\n        }\n    }\n    if(minSum !== 0){\n        return minSum;\n    }\n    return min;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(nums.length == 0) return 0;\n  let currentSum = nums[0];\n  let smallestSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    if(currentSum < 0){\n      currentSum = nums[i];\n    } else {\n      currentSum += nums[i];\n    }\n    if(currentSum < smallestSum){\n      smallestSum = currentSum;\n    }\n  }\n  return smallestSum;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var minSum = 0;\n    var currSum = 0;\n    for(var i = 0; i < nums.length; i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n            minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum = 0;\n        }\n    }\n    return minSum;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nfunction strange_sort_list(lst){\n",
    "task_id": "70",
    "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n",
    "simplified_intent": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
    "snippet": [
      "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let new_lst = lst;\n    let max_elem = Math.max(...new_lst);\n    let min_elem = Math.min(...new_lst);\n    new_lst = arr.filter(e => e !== min_elem && e !== max_elem);\n    new_lst.unshift(min_elem);\n    new_lst.push(max_elem);\n    return new_lst;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var swap = function(index1, index2){\n        var tmp = lst[index1];\n        lst[index1] = lst[index2];\n        lst[index2] = tmp;\n    };\n    for(var i = 0; i < lst.length; i++){\n        var min = i;\n        for(var j = i + 1; j < lst.length; j++){\n            if(lst[j] < lst[min]){\n                min = j;\n            }\n        }\n        swap(i, min);\n    }\n    return lst;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let min_value = Math.min(...lst);\n  let max_value = Math.max(...lst);\n  let min_pos = lst.indexOf(min_value);\n  let max_pos = lst.indexOf(max_value);\n  let temp_value;\n  let temp_pos;\n  let new_lst = [];\n  while (min_pos >= 0 && max_pos >= 0){\n    temp_value = lst[min_pos];\n    temp_pos = lst.indexOf(temp_value);\n    new_lst.push(temp_value);\n    lst.splice(min_pos, 1);\n    lst.splice(max_pos, 1);\n    min_pos = lst.indexOf(temp_value);\n    max_pos = lst.indexOf(temp_value);\n  }\n  if (min_pos >= 0){\n    new_lst.push(min_value);\n  }\n  if (max_pos >= 0){\n    new_lst.push(max_value);\n  }\n  return new_lst;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(lst.length == 0) return lst;\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var newList = [];\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            newList.push(min);\n            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n        }\n        else{\n            newList.push(max);\n            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n        }\n    }\n    return newList;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(lst.length == 0){\n        return lst;\n    }\n    let result = [];\n    result.push(Math.min(...lst));\n    lst.splice(lst.indexOf(Math.min(...lst)), 1);\n    result.push(Math.max(...lst));\n    lst.splice(lst.indexOf(Math.max(...lst)), 1);\n    let x = 0;\n    let y = lst.length - 1;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            result.push(lst[x]);\n            x++;\n        }else{\n            result.push(lst[y]);\n            y--;\n        }\n    }\n    return result;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var str = 0;\n\tif (lst.length === 0) {\n\t\treturn [];\n\t}\n\tlst.sort(function(a, b) {\n\t\treturn a - b;\n\t});\n\tfor (var i = 0; i < lst.length - 1; i++) {\n\t\tvar temp = lst[i];\n\t\tlst[i] = lst[i + 1];\n\t\tlst[i + 1] = temp;\n\t\tstr++;\n\t}\n\treturn lst;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n",
    "task_id": "147",
    "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n",
    "simplified_intent": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
    "snippet": [
      "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let max_triple = 0;\n    let arr = [];\n    for (let i = 1;i <= n;i++){\n        arr.push(i * i - i + 1);\n    }\n    for (let i = 0;i < arr.length;i++){\n        for (let j = 0;j < arr.length;j++){\n            if (arr[i] == arr[j]){\n                continue;\n            }\n            for (let k = 0;k < arr.length;k++){\n                if (arr[i] + arr[j] + arr[k] == 3){\n                    max_triple++;\n                }\n            }\n        }\n    }\n    console.log(max_triple);\n    return max_triple;\n}\nget_max_triples(5);</code>\n<|/ a |>\n<| a tags=algorithm,javascript,arrays dscore=1 |>\n<code>",
    "grade-0": {
      "execution": 0
    },
    "1": "if(!n) return 0;\n  var a = [];\n  for(var i=1;i<=n;i++){\n    a.push(i*i-1);\n  }\n  var arr = [];\n  arr.push(a);\n  var maxLen = 1;\n  var cnt = 0;\n  for(var j=1;j<=n;j++){\n    var curLen = 0;\n    for(var i=0;i<j;i++){\n      if(arr[i][j] < arr[i][j-1]) continue;\n      curLen += 1;\n    }\n    if(curLen > maxLen){\n      maxLen = curLen;\n      cnt = 0;\n    }\n    cnt++;\n  }\n  return cnt;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var a = [];\n  for(var i = 1; i < n; i++){\n    a.push(i);\n  }\n  var countTriples = 0;\n  var count = 1;\n  var i = 1;\n  while(count != n){\n    if(i >= a.length){\n      count++;\n    }else{\n      if(countTriples < (a[i-a[i-1]]*3)){\n        countTriples++;\n      }\n      i++;\n    }\n  }\n  return countTriples;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var array = [];\n    var count = 0;\n    for(let i = 1; i <= n; i++){\n        array.push(i * i - i + 1);\n    }\n    for(let i = 0; i < array.length; i++){\n        for(let j = 0; j < array.length; j++){\n            for(let k = 0; k < array.length; k++){\n                if(i < j && j < k && (array[i] + array[j] + array[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let arr = []\n    for(let i = 0; i < n; i++){\n        arr.push(i * i - i + 1)\n    }\n    let triple = 0\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    triple++\n                }\n            }\n        }\n    }\n    return triple\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let arr = [];\n    let max = 0;\n    for(let i = 1; i <= n; i++){\n        let num = i * i - i + 1;\n        arr.push(num);\n        for(let j = 0; j < arr.length; j++){\n            for(let k = 0; k < arr.length; k++){\n                if(k > j && j < i && i % 3 === 0){\n                    let sum = arr[j] + arr[k] + arr[i - 1];\n                    if(sum % 3 === 0){\n                        max++;\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\nfunction multiply(a, b){\n",
    "task_id": "97",
    "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n",
    "simplified_intent": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
    "snippet": [
      "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var sum = 0;\n    \n    // Iterate through the unit digits and multiply each digit by b.\n    // The product of digits in units is equal to the product of digits in units,\n    // times the value of b.\n    // Iterating through units is achieved by dividing units by 10 \n    // and dividing each digit by b.\n    \n    // If the number being multiplied is less than 10, return 0.\n    if(a < 10)\n    {\n        return 0;\n    }\n    \n    // If the first digit is greater than or equal to 9, start multiplying units \n    // by 10 until the first digit is less than 9.\n    // For example, suppose that the number is 1918, and the units are '1918' and\n    // '1919'. Multiplying the first digit of the number by 10 will leave the \n    // units 1918, and the second digit 1919, unchanged. \n    if(a>9)\n    {\n        while(a > 9)\n        {\n            sum+=(a%10);\n            a=a/10;\n        }\n    }\n    \n    // Multiply the remaining units by b.\n    sum+=a;\n    \n    // Return the sum of the products of the units times the value of b.\n    return sum*b;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if (a === b) throw 'Not valid number';\n  if (a == 0 || b == 0) return 0;\n  if (a < 0) throw 'Not valid number';\n  if (b < 0) throw 'Not valid number';\n  var c = a * b\n  var d = parseInt(c / (b * b), 10);\n  if (isNaN(d)) return 0\n  return d;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(a*b===0) return 0;\n  else return ((a*10) % 10) *  ((b*10) % 10);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let newA = a.toString();\n    let newB = b.toString();\n    let firstNum = newA.split('');\n    let secondNum = newB.split('');\n    let result = (parseInt(firstNum[1]) * parseInt(secondNum[1]));\n    return result;\n  }",
    "grade-3": {
      "execution": 0
    },
    "4": "let aString = ('' + a);\n    let bString = ('' + b);\n    return parseInt(aString[aString.length - 1]) * parseInt(bString[bString.length - 1]);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let aa = Math.abs(a).toString().split('').map(Number);\n    let bb = Math.abs(b).toString().split('').map(Number);\n    return aa[aa.length-1] * bb[bb.length-1];\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n",
    "task_id": "122",
    "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n",
    "simplified_intent": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (k <= 0 || k > arr.length)\n        return 0;\n    let sum = 0;\n    let min = 0;\n    let max = 0;\n    for (let i = 0; i < k; i++) {\n        min = Math.min(arr[i], arr[i + k]);\n        max = Math.max(arr[i], arr[i + k]);\n        sum = sum + max - min + min;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 tags=javascript,arrays,math,sum |>\n<| a tags=javascript,arrays,math,sum dscore=0 |>\nA naive way of doing this is to:\n\nTake 2 of the max and min values\nCompute the difference between the max and min values and the difference\nfrom the first 2 values in the array\nAdd these 2 difference to the sum\n\nHere is an implementation:\n\n<code>",
    "grade-0": {
      "execution": 0
    },
    "1": "let result = 0;\n    arr.sort();\n    let lastTwo = arr.splice(0, k);\n    for(let i=0; i < lastTwo.length; i++){\n        let currentSum = lastTwo[i] + arr[i];\n        if(currentSum < 10){\n            result += currentSum;\n        }\n        else{\n            result += currentSum - 10;\n        }\n    }\n    return result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var sum = 0;\n  for(var i = 0; i< arr.length ; i++){\n    if(i>0 && arr[i]%10 >= arr[i-1]%10)\n      sum += arr[i-1]%10;\n    else if(i>0 && arr[i]%10 <= arr[i-1]%10)\n      sum += arr[i];\n  }\n  return sum+arr[k-1]%10;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nlet arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;",
    "grade-3": {
      "execution": 1
    },
    "4": "return (arr.filter(v => v < 100).length < k) ? arr.reduce((total,v) => total + v, 0) : arr.filter(v => v < 100).reduce((total,v) => total + v, 0);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return arr.reduce((acc, curr, i) => {\n        return i < k && curr.toString().length <= 2 ? acc + curr : acc;\n    }, 0);\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns True if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\nfunction simplify(x, n){\n",
    "task_id": "144",
    "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n",
    "simplified_intent": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
    "snippet": [
      "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result=false;\n  var str1=x.replace(\".\",\"\").replace(\"/\",\"\"); //Remove fraction and slash\n  var str2=n.replace(\".\",\"\").replace(\"/\",\"\"); //Remove fraction and slash\n  if(str1.indexOf(\"/\")>-1){//If there is a slash\n    str1=str1.replace(\"/\",\"\");\n    str2=str2.replace(\"/\",\"\");\n    var num1=parseInt(str1);\n    var num2=parseInt(str2);\n    if(num1>0 && num2>0){\n      var div=(num1*num2)/((num1+num2)/2);\n      if(num2!=0){\n        result=true;\n      }\n      if(num1>0){\n        result=false;\n      }\n    }\n  }\n  else if(str1.indexOf(\".\")>-1){//If there is a decimal\n    if(num1==0){\n      result=true;\n    }\n    if(num1>0){\n      result=false;\n    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\nIf your input is x/y then you can easily solve it by simple division problem.\n<code>\nx= num1*(num2+1)/num2\n</code>\nand for y is num1*(num2+1)/num2\nif your input is n/x then you can solve it by simple division problem.\n<code>\ny= num1*num2/num1\n</code>\nand for x is num1*num2/num1\nand for x/y then you can solve it by simple division problem.\n<code>\nx= num1*num2/(num1*num2+1)\n</code>\nand for y is num1*num2/(num1*num2+1)\nSo you only need to compare x and y\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\nTo make my own solution, I made a function that returns an array of possible fractions based on user input. The function works out all the different possible ways of breaking the user input in 2 different parts, a numerator and a denominator and then checks if they are equal to 1/1/2/2/3/3/4/4/5...\n<code>",
    "grade-0": {
      "execution": 0
    },
    "1": "//Your code goes here\n}\n</cell>\n<cell>\n# test your code\nx = simplify([\"1/3\", \"1/2\"], \"2/3\")\nprint(x)\nif x == False: print(\"Wrong\") \nelse: print(\"Right\")\n</cell>\n<text>\n3.2. Convert Infix to Postfix\nWe have implemented the postfix to infix conversion algorithm. Now we need to implement infix to postfix algorithm. Infix to postfix algorithm converts an expression from infix form to postfix form while evaluating it.\n\nFor example,\n\n$x = 3 \\times 4$\n\nAfter the conversion, it should be evaluated as \n\n$3 \\times 4 \\times 5$\n\nYou can assume that the expression is well-formed, that is, there won't be any errors. An example of an error in infix form is when the expression has an operator in it that does not have a proper infix form.\n\n\n</text>\n<cell>\n# example of incorrect infix form\ninfix_expression = \"7 8 / 3 4\"\n# correct infix form should be \n# [\"7\", \"8\", \"3\", \"4\"]\n</cell>\n<cell>\n# test your code\ninfix_expression = \"7 8 / 3 4\"\npostfix_expression = infix_to_postfix(infix_expression)\nprint(postfix_expression)\nif postfix_expression == [\"7\", \"8\", \"3\", \"4\"]:\n  print(\"correct!\")\nelse:\n  print(\"Wrong!\")\n</cell>\n<text>\n3.3. Reverse Polish Notation\nYou will now implement reverse polish notation - a method of converting infix to postfix notation. You can assume the input is in valid postfix form.\n\nThe reverse polish notation is the operation of converting the postfix expression into the operand order of another infix expression. \n\nFor example, if $x$ is converted to $2x + 3$ and $y$ is converted to $x - y$, then $x y$ is converted to $x -y $. If the first operand (the variable or number) in the postfix expression contains no parentheses or other operators, then the operand order is unchanged. If the parentheses are used, then the postfix expression is evaluated first, then the operand order is applied.\n\nThe reverse polish notation algorithm relies on the evaluation method discussed in the previous section.\n\nFor the input $x y = 3 $, the reverse polish notation algorithm will output $3 x $ .\n\nYou can assume that the input is a well-formed postfix expression. It does not contain any parentheses.\n\nExample 1:\n\nInput: 6 x 2 + 1 y + 3\nOutput: 3 x + 2 y +",
    "grade-1": {
      "execution": 0
    },
    "2": "//Your code goes here\n}\n</code>\nExample 2:\n<code>",
    "grade-2": {
      "execution": 0
    },
    "3": "let xArr = x.split('/')\n  let nArr = n.split('/')\n  let first = xArr[0]*nArr[1]\n  let second = xArr[1]*nArr[0]\n  if(first/second%1 === 0){\n    return true\n  } else {\n    return false\n  }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let a = x.split('/');\n    let b = n.split('/');\n    return a[0]/a[1] * b[0]/b[1] % 1 === 0 ? true : false;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var xn= 1/(n.split(\"/\")[1])*(x.split(\"/\")[0]);\n    var nn= 1/(x.split(\"/\")[1])*(n.split(\"/\")[0]);\n    return xn % 1 === 0 && nn % 1 === 0;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n",
    "task_id": "62",
    "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n",
    "simplified_intent": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
    "snippet": [
      "  return xs.map((x, i) => x * i).slice(1);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(!xs.length) return [];\n    if(!Array.isArray(xs[0])) return [derivative(xs[0])];\n    let n = xs[0].length, xs = [xs[0]], i;\n    for(let x = 1; x < xs.length; x++){\n        let d = [], j;\n        for(i = 0; i < n; i++){\n            d.push((xs[j] * xs[i]) + (xs[j - 1] * xs[i + 1]));\n            j += 1;\n        }\n        xs.push(derivative(d).reduce((a, b) => a + b));\n    }\n    return xs;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var n = xs.length;\n  var deriv = new Array(n);\n  var x = 0;\n  for(var i=0; i<n; i++){\n    deriv[i] = xs[i+1];\n    x += (deriv[i] - xs[i])/(xs[i] - xs[i-1]);\n  }\n  return deriv;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var n = xs.length, // number of variables\n      out = [], // output vector\n      m, // coefficient of xm\n      x0, x1; // the point\n\n  if(n < 1){\n    return out;\n  }\n\n  for(var i = 0; i < n; ++i){\n    x0 = xs[i];\n    x1 = x0 + (n - 1) * xi;\n    out.push(m = (x0 * x1) - ((xi * xi) - x0 * xi));\n  }\n\n  return out;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var result = [];\n  var i = 0;\n  var length = xs.length;\n  var coefficient;\n  for(; i < length; i++){\n    coefficient = i * xs[i];\n    if(coefficient !== 0){\n      result.push(coefficient);\n    }\n  }\n  return result;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var i,\n    solution = [],\n    numberOfCoefficients = xs.length;\n  for(i = 1; i < numberOfCoefficients; i++){\n    solution.push(xs[i] * i);\n  }\n  return solution;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var new_xs = [];\n\tvar n = 0;\n\tfor(var i = 1; i < xs.length; i++){\n\t\tnew_xs[n] = xs[i] * i;\n\t\tn++;\n\t}\n\treturn new_xs;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nfunction remove_vowels(text){\n",
    "task_id": "51",
    "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n",
    "simplified_intent": "remove_vowels is a function that takes string and returns string without vowels.",
    "snippet": [
      "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return text.replace(/[aeiou]/g, \"\").replace(/[bcdfghjklmnpqrstvwxyz]/g, \"\");\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var vowels = /[aeiou]/;\n    return text.replace(vowels, '').trim();\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let result = text;\n    for(let i=0;i<vowels.length;i++){\n        let regex = new RegExp(vowels[i], 'gi');\n        result = result.replace(regex,'');\n    }\n    return result;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var reg = /[aeiou]/gi;\n\treturn text.replace(reg, '');\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if (text.length == 0){\n    return '';\n  }\n  else if (text[0] == 'a' || text[0] == 'e' || text[0] == 'i' || text[0] == 'o' || text[0] == 'u' || text[0] == 'A' || text[0] == 'E' || text[0] == 'I' || text[0] == 'O' || text[0] == 'U'){\n    return remove_vowels(text.slice(1));\n  }\n  else{\n    return text[0] + remove_vowels(text.slice(1));\n  }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n\tvar answer = '';\n\tfor (var i = 0; i < text.length; i++) {\n\t\tif (vowels.indexOf(text[i]) == -1) {\n\t\t\tanswer += text[i];\n\t\t}\n\t}\n\treturn answer;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n",
    "task_id": "101",
    "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n",
    "simplified_intent": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
    "snippet": [
      "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var strArr=s.split(',');\n\tvar result=[];\n\tfor(var i=0;i<strArr.length;i++){\n\t\tvar items=strArr[i].split(' ');\n\t\tfor(var j=0;j<items.length;j++){\n\t\t\tresult.push(items[j]);\n\t\t}\n\t}\n\treturn result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return s.split(',').map(String);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return s.split(/[, ]+/);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return s.split(/[ ,]+/);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return s.split(/[\\s,]+/);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var words = s.split(/[\\s,]+/);\n  return words;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13, 12) = -1\nfunction choose_num(x, y){\n",
    "task_id": "102",
    "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n",
    "simplified_intent": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
    "snippet": [
      "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(x > y)\n        return -1;\n    var arr = [x, y];\n    arr.sort();\n    var min = arr[0];\n    var max = arr[1];\n    while(min < max)\n    {\n        var mid = Math.floor((min+max)/2);\n        if(arr[mid] < arr[mid+1]){\n            max = mid;\n        } else {\n            min = mid;\n        }\n    }\n    return min;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if (x > y || isNaN(x) || isNaN(y)) {\n\t\treturn -1;\n\t}\n\n\tlet xEven = x % 2 == 0;\n\tlet yEven = y % 2 == 0;\n\tif (xEven && yEven) {\n\t\treturn x;\n\t}\n\n\tlet result = 0;\n\tlet tempX = 0;\n\tlet tempY = 0;\n\n\twhile (tempX < x && tempY < y) {\n\t\ttempX = x + tempX;\n\t\ttempY = y + tempY;\n\t}\n\n\twhile (tempX < x) {\n\t\ttempX++;\n\t\tresult++;\n\t}\n\n\twhile (tempY < y) {\n\t\ttempY++;\n\t\tresult++;\n\t}\n\n\treturn result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "//Check if x is bigger than the given numbers\n\tif (x > y) {\n\t\tvar tmp = x;\n\t\tx = y;\n\t\ty = tmp;\n\t}\n\n\t//Check if x is smaller than the given numbers\n\telse if (x < y) {\n\t\treturn -1;\n\t}\n\n\t//Check if the numbers equal each other\n\telse if (x == y) {\n\t\treturn x;\n\t}\n\n\t//Check if x is smaller than the half of the given numbers\n\telse if (x > x / 2) {\n\t\tvar tmp = (x + y) / 2;\n\t\tx = tmp;\n\t\ty = tmp;\n\t}\n\n\t//Check if y is not bigger than the given numbers\n\telse if (y > x) {\n\t\tvar tmp = (x + y);\n\t\tx = tmp;\n\t\ty = tmp;\n\t}\n\n\t//Check if both numbers are equally big\n\telse if (x == y) {\n\t\treturn choose_num(x / 2, y);\n\t}\n\n\t//Check if both numbers are equally small\n\telse if (x == x / 2) {\n\t\treturn choose_num(x, y / 2);\n\t}\n\n\t//Check if both numbers are equally big\n\telse if (y == x / 2) {\n\t\treturn choose_num(x, y / 2);\n\t}\n\n\t//Check if either number is bigger than the other\n\telse if (x > y) {\n\t\treturn choose_num(x / 2, y);\n\t}\n\n\t//Check if either number is bigger than the other\n\telse if (x < y) {\n\t\treturn choose_num(x, y / 2);\n\t}\n\n\t//Both numbers are big\n\telse {\n\t\treturn x;\n\t}\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(x % 2 === 0)\n        return x;\n    if(y % 2 === 0)\n        return y;\n    return -1;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var result = -1;\n\n\t//your code here\n    for (var i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result = i;\n        }\n    }\n\treturn result;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var x = prompt(\"Enter a number\");\n    var y = prompt(\"Enter another number\");\n    var a = x;\n    var b = y;\n    if(x>y){\n        while(a>=b){\n            if(a%2 == 0){\n                return a;\n            }\n            a--;\n        }\n    }\n    else if(y>x){\n        while(b>=a){\n            if(b%2 == 0){\n                return b;\n            }\n            b--;\n        }\n    }\n    else{\n        return \"This is not a valid range\";\n    }\n}\nalert(choose_num());",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n",
    "task_id": "39",
    "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n",
    "simplified_intent": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
    "snippet": [
      "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(n < 2) return 1;\n    else if(n%2===0) return prime_fib(n-1);\n    else return prime_fib(n-2)+prime_fib(n-1);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var i = -1;\n\tvar prime = true;\n\twhile (true){\n\t\ti++;\n\t\tif(i == n){\n\t\t\treturn prime;\n\t\t}\n\t\tif((i % 2) == 0){\n\t\t\tprime = false;\n\t\t}\n\t}\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var is_prime = true;\n  for (var i = 2; i < n; i++){\n    if (n % i == 0){\n      is_prime = false;\n      break;\n    }\n  }\n  return is_prime;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var array = [];\n\tarray.push(2);\n\tarray.push(3);\n\tvar i = 2;\n\tvar j = 0;\n\twhile(i<n){\n\t\tarray.push(array[j]+array[j+1]);\n\t\tif(isPrime(array[j+2])){\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\treturn array[array.length-1];\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(n == 1){\n\t\treturn 2;\n\t}else if(n == 2){\n\t\treturn 3;\n\t}else{\n\t\tvar fN = 2;\n\t\tvar fNm1 = 1;\n\t\tvar fNm2 = 0;\n\t\tvar count = 2;\n\t\twhile(count < n){\n\t\t\tfN = fNm1 + fNm2;\n\t\t\tif(isPrime(fN)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tfNm2 = fNm1;\n\t\t\tfNm1 = fN;\n\t\t}\n\t\treturn fN;\n\t}\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n// is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunction is_equal_to_sum_even(n){\n",
    "task_id": "138",
    "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n",
    "simplified_intent": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
    "snippet": [
      "  return (n >= 8 && n % 2 == 0)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var sum = 0\n    for(var i = 0; i<n; i++){\n        sum += i * 2;\n    }\n    return n%sum == 0;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return !(n%2 || n % 4);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n % 2 === 0) {\n    for (var i = 3; i <= n; i += 2){\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return (n/2) % 1 === 0\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "// if (n % 2 !== 0) {\n    //     return false;\n    // }\n    // var res = [];\n    // for (let i = 0; i < n; i++) {\n    //     for (let j = 0; j < n; j++) {\n    //         for (let k = 0; k < n; k++) {\n    //             for (let l = 0; l < n; l++) {\n    //                 var sum = i + j + k + l;\n    //                 if (sum === n) {\n    //                     var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;\n    //                     if (!is_odd) {\n    //                         res.push([i, j, k, l]);\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n    // return res.length > 0;\n    var count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            for (let k = 0; k < n; k++) {\n                for (let l = 0; l < n; l++) {\n                    var sum = i + j + k + l;\n                    if (sum === n) {\n                        var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;\n                        if (!is_odd) {\n                            count += 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count === 4;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "//variables\n    let total = 0;\n    let remainder = 0;\n    let count = 0;\n    //loop through and adding\n    for(i = 0; i < n; i++){\n        //checking for the remainder\n        remainder = i % 2;\n        //checking for the remainder\n        if(remainder == 0){\n            //adding to the total\n            total += i;\n            //checking for the total to equal the given number\n            if(total == n){\n                //adding to the count\n                count++;\n            }//end of if statement\n        }//end of if statement\n    }//end of for loop\n    //checking for count to equal four\n    if(count == 4){\n        //returning true\n        return true;\n    }//end of if statement\n    //returning false\n    return false;\n}//end of function",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n",
    "task_id": "17",
    "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n",
    "simplified_intent": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
    "snippet": [
      "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var notes_arr = [];\n    music_string = music_string.toLowerCase();\n    music_string = music_string.replace(/\\s+/g,\"\");\n    music_string = music_string.split(\" \");\n    \n    for(var i = 0; i < music_string.length; i++){\n        switch(music_string[i]){\n            case \"o\":\n                notes_arr.push(4);\n                break;\n            case \"o|\":\n                notes_arr.push(2);\n                break;\n            case \".|\":\n                notes_arr.push(1);\n                break;\n            default:\n                notes_arr.push(0);\n                break;\n        }\n    }\n    return notes_arr;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var beats = [];\n  music_string.split(\"\").forEach(function(note, i){\n    if(note == \"o\" || note == \"O\"){\n      if(beats.length > 0){\n        beats[beats.length-1] += 4;\n      }\n    }else if(note == \"|\" || note == \"|o\"){\n      if(beats.length > 0){\n        beats[beats.length-1] += 2;\n      }\n    }else if(note == \".\"){\n      if(beats.length > 0){\n        beats[beats.length-1]++;\n      }\n    }else{\n      console.log(\"Unrecognized note: \" + note);\n    }\n  });\n  return beats;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let notes_arr = music_string.split(' ');\n    let notes = new Array(12).fill(0).map(() => ([0,0,0,0,0]));\n    for (let i=0; i<notes_arr.length; i++){\n        let note_arr = notes_arr[i].split('');\n        let note_str = '';\n        if (note_arr[0] === 'o') note_str += 'w'; //whole note\n        else if (note_arr[0] === '|') note_str += 'm'; //half note\n        else if (note_arr[0] === '.') note_str += 'q'; //quater note\n        else note_str += note_arr[0]; //rest\n        notes[note_str.charCodeAt(0)-1][note_str.charCodeAt(1)-1]++;\n    }\n    let result = [];\n    for (let i=0; i<12; i++){\n        let last_notes = [];\n        for (let j=0; j<12; j++){\n            let last_note = notes[i][j];\n            if (last_note === 0)\n                last_notes.push(j);\n        }\n        result.push(last_notes.length);\n    }\n    return result;\n}\n</cell>\n<cell>\nmusic_string = 'o o| .| o| o| .| .| .| .| o o'\nparse_music(music_string)\n</cell>\n<cell>\n#hide\nfrom nbdev.export import notebook2script; notebook2script()\n</cell>\n<cell>\n\n</cell>\n<cell>\n#hide\ntest_music('o o| .| o| o| .| .| .| .| o o')\n</cell>\n<cell>\n#hide\ndef test_music(music_string):\n    notes_arr = music_string.split(' ')\n    notes = new Array(12).fill(0).map(() => ([0,0,0,0,0]))\n    for note in notes_arr:\n        if note[0]=='o': note_str = 'w'\n        elif note[0]=='|': note_str = 'm'\n        elif note[0]=='.': note_str = 'q'\n        else: note_str = note[0]\n        notes[note_str.charCodeAt(0)-1][note_str.charCodeAt(1)-1] += 1\n    result = []\n    for note in notes:\n        last_notes = []\n        for i in range(len(note)):\n            if note[i] == 0:\n                last_notes.append(i)\n        result.append((last_notes[0]+1))\n    return result\n</cell>\n<cell>\nmusic_string = 'o o| .| o| o| .| .| .| .| o o'\ntest_music(music_string)\n</cell>\n<cell>\nmusic_string = 'o o| .| o| o| .| .| .",
    "grade-2": {
      "execution": 0
    },
    "3": "let beats = []\n  let split = music_string.split(' ')\n  for (let i = 0; i < split.length; i++) {\n    let note = split[i]\n    if (note == 'o') {\n      beats.push(4)\n    } else if (note == 'o|') {\n      beats.push(2)\n    } else if (note == '.|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let output = [],\n        i = 0,\n        obj = {\n            'o': '4',\n            'o|': '2',\n            '.|': '1'\n        };\n    while(music_string.length){\n        output.push(Number(obj[music_string.slice(0, 2)]));\n        music_string = music_string.slice(2, music_string.length);\n    }\n    return output;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let bars = music_string.split(' ');\n    let result = [];\n    for (let i = 0; i < bars.length; i++) {\n        if (bars[i] === 'o') {\n            result.push(4);\n        } else if (bars[i] === 'o|') {\n            result.push(2);\n        } else if (bars[i] === '.|') {\n            result.push(1);\n        }\n    }\n    return result;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n// True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd', 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunction same_chars(s0, s1){\n",
    "task_id": "54",
    "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n",
    "simplified_intent": "Check if two words have the same characters.",
    "snippet": [
      "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(s0 === s1){\n        return true;\n    }\n    if(!s0 || !s1 || s0.length !== s1.length){\n        return false;\n    }\n    return Object.keys(s0.replace(/[\\t\\n\\r ]+/g,\"\")).every(function(x){\n        return s0.charCodeAt(x) === s1.charCodeAt(x);\n    });\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var l1 = s1.length,\n\t\tl2 = s2.length;\n\n\tfor(var i=0; i<l1; i++){\n\t\tif(s1.charAt(i) != s2.charAt(i)){\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (s0.length > 0 && s1.length > 0) {\n        var n0 = s0.length;\n        var n1 = s1.length;\n        if (n0 > n1) {\n            return false;\n        }\n        var s0_is_longer = n0 < n1;\n        var i0 = 0;\n        var i1 = 0;\n        while (i0 < n0 && i1 < n1) {\n            var c0 = s0.charAt(i0);\n            var c1 = s1.charAt(i1);\n            if (c0 !== c1) {\n                return s0_is_longer;\n            }\n            i0++;\n            i1++;\n        }\n        return i1 === n1;\n    }\n    return false;\n};",
    "grade-2": {
      "execution": 0
    },
    "3": "let s0_dict = {};\n\tlet s1_dict = {};\n\tfor (let i=0; i<s0.length; i++){\n\t\tlet char = s0[i];\n\t\tif (s0_dict[char]){\n\t\t\ts0_dict[char] += 1;\n\t\t}\n\t\telse{\n\t\t\ts0_dict[char] = 1;\n\t\t}\n\t}\n\tfor (let i=0; i<s1.length; i++){\n\t\tlet char = s1[i];\n\t\tif (s1_dict[char]){\n\t\t\ts1_dict[char] += 1;\n\t\t}\n\t\telse{\n\t\t\ts1_dict[char] = 1;\n\t\t}\n\t}\n\tfor (let key in s0_dict){\n\t\tif (!s1_dict[key] || s0_dict[key] !== s1_dict[key]){\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let key in s1_dict){\n\t\tif (!s0_dict[key] || s0_dict[key] !== s1_dict[key]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "//split then sort\n\t// \t-> array of characters\n\t// -> no duplicates\n\t// ->\n\t// \"abcd\"\n\t// s0 = \"eabcdzzzz\"\n\t// s1 = \"dddzzzzzzzddeddabc\"\n\t//   a b c d e z\n\t// d 4 1 1 0 0 5\n\t// e 1 0 0 0 1 0\n\t// a 0 1 0 0 0 0\n\t// b 0 0 1 0 0 0\n\t// c 0 0 0 1 0 0\n\t// z 0 0 0 0 0 5\n\t// dddzzzzzzzddeddabc\n\t// eabcdzzzz\n\t// array of characters\n\t// and count (hash table)\n\t// for each string\n\t// \tfor each character\n\t// \t\tcount++\n\t//\n\t// for each string\n\t// \tfor each character\n\t// \t\tcount--\n\t// \t\tif count < 0\n\t// \t\t\treturn false\n\t// return true\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//",
    "grade-4": {
      "execution": 0
    },
    "5": "var n0 = s0.length, n1 = s1.length;\n\tif(n0 > n1){\n\t\treturn false;\n\t}\n\tvar a0 = s0.split('').sort(), a1 = s1.split('').sort();\n\tfor(var i=0; i<n0; i++){\n\t\tif(a0[i] != a1[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction find_max(words){\n",
    "task_id": "158",
    "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n",
    "simplified_intent": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
    "snippet": [
      "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let maxWord = \"\";\n    let maxCount = 1;\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        let word = words[i];\n        for(let j = 0; j < word.length; j++){\n            for(let k = 0; k < words[j].length; k++){\n                count += words[j][k];\n            }\n        }\n        if(maxCount < count){\n            maxCount = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let max = words[0].length;\n  let index = -1;\n  words.forEach(function(word){\n    for(var i = 0; i < word.length; i++){\n      if(word[i] === word[index]){\n        max = Math.max(max, word.length - i);\n        index = i;\n      }\n    }\n  });\n  return words[words.indexOf(words[index]) + 1];\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return words.sort(function(word1, word2){\n    return word1.split('').sort().join() === word2.split('').sort().join()\n  }).join('')\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var result = \"\";\n  if(words.length === 0){\n    return false;\n  }\n\n  var current_longest = get_unique_chars(words[0]);\n  for(var i = 1; i < words.length; i++){\n    var word = words[i];\n    var unique_chars = get_unique_chars(word);\n    if(unique_chars.length > current_longest.length){\n      current_longest = unique_chars;\n      result = word;\n    }else if(unique_chars.length === current_longest.length){\n      if(word < result){\n        result = word;\n      }\n    }\n  }\n  return result;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "// your code here..\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let words2 = words.map(e => [e, e.split('').filter((v, i, a) => a.indexOf(v) === i).length])\n    console.log(words2)\n    words2.sort((a, b) => b[1] - a[1])\n    console.log(words2)\n    let max_count = words2[0][1]\n    let max_words = []\n    for (let i = 0; i < words2.length; i++){\n        if (words2[i][1] < max_count){\n            break\n        }\n        max_words.push(words2[i][0])\n    }\n    console.log(max_words)\n    max_words.sort()\n    return max_words[0]\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfunction file_name_check(file_name){\n",
    "task_id": "141",
    "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n",
    "simplified_intent": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
    "snippet": [
      "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let is_valid = true;\n\tlet file_name_array = file_name.split('.');\n\t// There should not be more than three digits ('0'-'9') in the file's name.\n\t// The file's name contains exactly one dot '.'\n\tif(file_name_array.length <= 3){\n\t\tis_valid = false;\n\t}\n\t// The substring before the dot should not be empty, and it starts with a letter from the \n\t// latin alphapet ('a'-'z' and 'A'-'Z')\n\tif(file_name_array.length > 2 && file_name_array[0].length == 0 && file_name_array[0][0] != 0){\n\t\tis_valid = false;\n\t}\n\t// The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\telse if(['txt', 'exe', 'dll'].includes(file_name_array[file_name_array.length - 1])){\n\t\tis_valid = true;\n\t}\n\treturn is_valid;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "file_name.match(/^[0-9]{3}\\.txt$/);\n    file_name.match(/[^\\.]+\\.[a-z][a-z]*/);\n    file_name.match(/^[^\\.]+\\.[a-z][a-z]/);\n    file_name.match(/^[a-z][a-z]/);\n    return file_name.match(/^[a-z][a-z].*/);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// Your code goes here\n    var regex = /^[a-z][0-9][a-z]|[a-zA-Z][0-9][0-9]|[0-9][a-z][a-z]+$/;\n    var result = regex.test(file_name);\n    return result;\n}\n</cell>\n<text>\nRun the code cell below to check your solution to this problem.\n\n\n</text>\n<cell>\n# Checks the correctness of the output from file_name_check\nfile_name_check('example.txt')\n</cell>\n<text>\nCongratulations!\nYou have successfully implemented a function that checks whether a string is valid or not. In the next step, you will use this function to help you understand the output of the cell that follows.\n\n\n</text>\n<text>\nPart 2: Extracting data from files\nLet's get some more practice with working with files in Python. We will be using a dataset that contains data from a number of files. The files will be about astronomical images from the Solar System.\n\nRun the cell below to import the libraries you'll need. You'll then be ready to load any images that Python finds in this folder using the imread command. Remember that in Python, the file paths are always referred to by a string and not a list.\n\n\n</text>\n<cell>\n# Run this cell to load the libraries necessary for reading \n# and visualizing images \nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport cv2\nimport glob\n\n# Read in the images using OpenCV's imread command\nimage = mpimg.imread(files[0])\n</cell>\n<text>\nLet's see what the image looks like. Matplotlib will be useful in later parts of the notebook.\n\n\n</text>\n<cell>\n# Show the image using matplotlib\nplt.imshow(image)\n</cell>\n<text>\nExcellent! Now, how do you think the image above represents? Here's a brief explanation of each pixel:\n\nThe first dimension refers to the horizontal dimension of the image.\nThe second dimension refers to the vertical dimension of the image.\nThe third dimension refers to the number of color channels: red, green, blue, or grey.\nThe fourth dimension refers to an R, G, B, or A value depending on which color channel it represents (for more information, see ). For example, if the pixel at position (0, 0) is an Red, green, blue, or green pixel, then the value of that pixel is 255.\n\nTake a look at some basic shapes using Matplotlib's imshow command. Do they make sense?\n\nNow let's load in a new image from the other file. We will again be using the same function imread that we used earlier.\n\n\n</text>\n<cell>\n# Run this cell to load the images again \n# These images are in the ../data/astronomical/fish/ directory (so Python can find the",
    "grade-2": {
      "execution": 0
    },
    "3": "//write your code here\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "const file_arr = file_name.split('.');\n    let count_digits = 0;\n    for(let i = 0; i < file_arr[0].length; i++){\n        if(file_arr[0][i] >= '0' && file_arr[0][i] <= '9'){\n            count_digits++;\n        }\n    }\n    if(count_digits >= 4){\n        return 'No';\n    }\n    if(file_arr.length !== 2){\n        return 'No';\n    }\n    if(file_arr[0][0] < 'a' || file_arr[0][0] > 'z'){\n        return 'No';\n    }\n    if(file_arr[1] !== 'txt' && file_arr[1] !== 'exe' && file_arr[1] !== 'dll'){\n        return 'No';\n    }\n    return 'Yes';\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var digits = 0;\n    var dot_counter = 0;\n    var dot_position = 0;\n    var dot_position_before = 0;\n    var dot_position_after = 0;\n    var valid_letters = ['txt', 'exe', 'dll'];\n    var i;\n    for (i = 0; i < file_name.length; i++) {\n        if (file_name[i] == '.') {\n            dot_counter++;\n            dot_position = i;\n        }\n        if ((file_name[i] > '0') && (file_name[i] < '9')) {\n            digits++;\n        }\n    }\n    dot_position_before = file_name.substring(0, dot_position);\n    dot_position_after = file_name.substring(dot_position + 1, file_name.length);\n    //console.log(dot_position_before);\n    //console.log(dot_position_after);\n    if ((digits > 3) || (dot_counter != 1) || (dot_position_before.length == 0) || ((dot_position_before[0] < 'a') || (dot_position_before[0] > 'z')) || ((dot_position_before[0] < 'A') || (dot_position_before[0] > 'Z')) || (valid_letters.indexOf(dot_position_after) == -1)) {\n        return 'No';\n    }\n    return 'Yes';\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nfunction right_angle_triangle(a, b, c){\n",
    "task_id": "157",
    "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n",
    "simplified_intent": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
    "snippet": [
      "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let x = b - a;\n  let y = c - b;\n  if (x*x + y*y < 1) {\n    return true;\n  } else {\n    return false;\n  }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "console.log(a, b, c)\n    \n    // if either side of the triangle is greater than 180 degree\n    if(a>180 || b>180 || c>180) return false\n    \n    // if either angle is less than 0 degree\n    if(a<0 || b<0 || c<0) return false\n    \n    // if a is less than or equal to b and b is less than or equal to c\n    if (a <= b && b <= c) return true\n    \n    // if b is less than a or if b is less than c\n    if(b < a || b < c) return true\n    \n    // if a is less than b and c is less than b\n    if(a<b && c<b) return true\n    \n    // if c is less than a\n    if(c<a) return true\n    \n    // if c is greater than a\n    if(c>a) return false\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var ab = abs(b-a),\n      bc = abs(c-b),\n      ac = abs(a-c);\n  return (ab + bc == ac || bc + ab == ac);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let hypotenuse = Math.max(a, b, c);\n    let sum = a + b + c;\n    let angle = (sum - hypotenuse) * (sum - hypotenuse);\n    let cSquare = hypotenuse * hypotenuse;\n    if(angle === cSquare){\n        return true;\n    } else {\n        return false;\n    }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "if(a > b && a > c){\n        return (a * a == (b * b) + (c * c));\n    }\n    else if(b > a && b > c){\n        return (b * b == (a * a) + (c * c));\n    }\n    else if(c > a && c > b){\n        return (c * c == (a * a) + (b * b));\n    }\n    else{\n        return false;\n    }\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "if(a>b && a>c){\n    return (a*a == b*b + c*c);\n  }\n  else if(b>a && b>c){\n    return (b*b == a*a + c*c);\n  }\n  else if(c>a && c>b){\n    return (c*c == a*a + b*b);\n  }\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n",
    "task_id": "22",
    "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n",
    "simplified_intent": "Filter given list of any python values only for integers",
    "snippet": [
      "  return values.filter(x => Number.isInteger(x));\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var n = [];\n  var v = [];\n  for(var i = 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n      n.push(values[i]);\n    }else{\n      v.push(values[i]);\n    }\n  }\n  if(n.length > 0){\n    n = n.sort(function(a, b){return a - b;});\n    return n;\n  }else{\n    return v;\n  }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return values.filter(val => {\n    return typeof val === 'number' && !Number.isNaN(val)\n  });\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return values.filter(function (item){\n        return typeof item === 'number' && !isNaN(item);\n    });\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var integer = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i] === 'number' && isNaN(values[i]) === false){\n\t\t\tinteger.push(values[i]);\n\t\t}\n\t}\n\treturn integer;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var results = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i] === 'number' && values[i] % 1 === 0){\n\t\t\tresults.push(values[i]);\n\t\t}\n\t}\n\treturn results;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"hello\",\"ell\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n// cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\") => False\n// cycpattern_check(\"himenss\",\"simen\") => True\nfunction cycpattern_check(a, b){\n",
    "task_id": "154",
    "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n",
    "simplified_intent": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
    "snippet": [
      "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let newArray = a.split(\"\").sort();\n  let newArray2 = b.split(\"\").sort();\n  let newArray3 = [];\n  for(let i =0; i < newArray.length; i++){\n    newArray3.push(newArray2[i])\n  }\n  for(let i = 0; i < newArray.length; i++){\n    if(newArray.includes(newArray3[i]) || newArray.includes(newArray3[i])){\n      return true\n    }\n  }\n  return false\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let pattern = cycpattern_split(a, b);\n    let substr = a.indexOf(pattern[0]) === -1;\n    for (let i = 1; i < pattern.length; i++){\n        substr = substr || a.indexOf(pattern[i]) !== -1;\n    }\n    return substr;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(a.length==0 || b.length==0){\n\t\treturn false;\n\t}\n\tvar n = b.length;\n\tvar i = 0;\n\twhile(i<a.length){\n\t\tif(a[i]==b[(n-i)%n]){\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\t//This word doesn't match\n\t\t\treturn false;\n\t\t}\n\t}\n\t//This word is match\n\treturn true;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if (a.length != b.length) {\n    return false;\n  }\n  let aRepeat = a.repeat(2);\n  return aRepeat.includes(b);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return a.includes(b) || a.includes(b.slice(1) + b[0]);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var long,short;\n  if(a.length > b.length){\n    long = a;\n    short = b;\n  }else{\n    long = b;\n    short = a;\n  }\n  var short_length = short.length;\n  var short_first_letter = short[0];\n  for(var i = 0; i < long.length; i++){\n    if(long[i] == short_first_letter){\n      if(long.substring(i,i+short_length) == short){\n        return true;\n      }\n    }\n  }\n  var short_last_letter = short[short_length-1];\n  for(var i = 0; i < long.length; i++){\n    if(long[i] == short_last_letter){\n      if(long.substring(i-short_length+1,i+1) == short){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunction count_distinct_characters(string){\n",
    "task_id": "16",
    "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n",
    "simplified_intent": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
    "snippet": [
      "  return (new Set(string.toLowerCase())).size;\n\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var unique = {}, counter = 0;\n  string = string.split('');\n  for(var i = 0, len = string.length; i < len;  i++){\n    unique[string[i]] = string[i];\n  }\n  for(var key in unique){\n    counter++;\n  }\n  return counter;\n}\n</code>\n<|/ a tags=javascript,string,arrays |>\n<| a dscore=0 |>\nYou could use an associative array.\n<code>\nvar a = {};\nvar len = str.length,\n    i=0;\n\nfor(i=0;i<len;i++){\n  if(!(a[str[i]])){\n    a[str[i]] = 1;\n  }else{\n    a[str[i]] = a[str[i]] + 1;\n  }\n}\n</code>\nThe associative array will contain a list of all unique characters and the count of how often they occur in the string.\n<|/ a tags=javascript,string,arrays |>\n<| a dscore=0 |>\nA good way to do it if you are not interested in ordering, would be to use the following:\n<code>",
    "grade-0": {
      "execution": 0
    },
    "1": "var char_count = 0\n    for(var i = 0; i < string.length; i++){\n        if(string.charCodeAt(i) >= 65 && string.charCodeAt(i) <= 90){\n            char_count ++\n        }\n    }\n    return char_count\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work on all languages. For example, in Portuguese `A` and `a` count as distinct characters.\n<|/ c |>\n<| c |>\nYou're right - I didn't think about that before. I've updated my answer with a different function that accounts for that case. :)\n<|/ c |>\n<| c |>\nI assume this isn't the fastest solution, since we're looping over every character in the string and using .charCodeAt() to determine each character type for each character. Also, isn't the String.length method slower than String.charCodeAt(i)?\n<|/ c |>\n<| c |>\nThe length method is faster, but since we are using charCodeAt(i) we can't rely on that in all cases. For example, some languages treat \"\u00f1\" as a single character. I'm not sure if those two are considered distinct characters or not, so I can't help you there, sorry.\n<|/ c |>\n<| c |>\nThank you all for the comments and answers, they were helpful and I learned a lot!\n<|/ c |>\n<| a dscore=3 tags=javascript,algorithm |>\nThis is a great question, and it's difficult to answer definitively without giving you a precise answer.\nIf we can assume that every single character is unique, we have a problem of the sort where every character is distinct, except for one that appears more than once.\nIf we can assume that every character is unique, and we only have uppercase and lowercase letters available, then the problem is that there aren't enough distinct characters to have all letters occur at least twice. \nIf we can assume that every character is unique, and we have all the letters available (uppercase and lowercase), then we have a problem of the sort where every character is distinct, except for one that appears exactly twice.\nIf we can assume that every character is unique, and we have an even number of unique characters, then we have an even number of distinct characters.\nLet's see how we get to these answers. I'll use numbers as characters to simplify things and make them easier to read - but these answers are the same regardless of which characters we're talking about.\nWe start with \"AB\". One possibility is \"AB\", which has a distinct count of 2. This could be either \"AB\" or the empty string. The empty string has a distinct count of 0. The next character has two possibilities - \"A\" or \"",
    "grade-1": {
      "execution": 0
    },
    "2": "let char_map = {}\n  for (let char of string){\n    char_map[char] = (char_map[char] || 0) + 1 //This line will increment the count for the character if it already exists\n  }\n  return Object.keys(char_map).length\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let array = string.split('');\n    let distinctCharacters = new Set(array);\n    return distinctCharacters.size;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var str = string.toLowerCase();\n    var out = new Set();\n    for (var i = 0; i < str.length; i++){\n        out.add(str[i]);\n    }\n    return out.size;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return new Set(string.toLowerCase()).size;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// total_match([], []) \u279e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\nfunction total_match(lst1, lst2){\n",
    "task_id": "74",
    "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) \u279e []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n",
    "simplified_intent": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
    "snippet": [
      "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var lst3 = lst1.map(function(val){\n        return lst2.filter(function(str){\n            return val == str;\n        }).length;\n    });\n    var result = [];\n    lst3.forEach(function(val){\n        if(val < lst3[0]){\n            result = result.concat(lst1);\n        }else{\n            result = result.concat(lst2);\n        }\n    });\n    return result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let total = 0;\n  for (let i = 0; i < lst1.length; i++){\n    total += lst1[i].length;\n  }\n  for (let i = 0; i < lst2.length; i++){\n    total += lst2[i].length;\n  }\n  return lst1[lst1.length - total < lst2.length - total ? lst1.length - total : lst2.length - total];\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(lst1.length != lst2.length){\n        console.log('lists have different sizes');\n        return;\n    }\n    for(var i = 0, len = lst1.length; i < len; i++){\n        if(lst1[i].length >= lst2[i].length){\n            lst2 = lst2;\n            lst1 = lst1;\n        }\n        else{\n            lst2 = lst2;\n        }\n    }\n    return lst1;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(lst1.length === 0 && lst2.length === 0){\n        return [];\n    }\n    if(lst1.length > lst2.length){\n        return lst2;\n    }\n    if(lst1.length < lst2.length){\n        return lst1;\n    }\n    return lst1;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let str1 = lst1.join('')\n    let str2 = lst2.join('')\n    if(str1.length === str2.length){\n        return lst1\n    }else if(str1.length < str2.length){\n        return lst1\n    }else{\n        return lst2\n    }\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let sum1 = 0;\n    let sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else if(sum1 > sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfunction intersection(interval1, interval2){\n",
    "task_id": "127",
    "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n",
    "simplified_intent": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
    "snippet": [
      "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let arr1 = interval1.map(x => Number(x));\n    let arr2 = interval2.map(x => Number(x));\n    let len = arr1.length && arr2.length ? Math.min(arr1.length, arr2.length) : arr1.length != arr2.length ? \"NO\" : \"\";\n    let ret = \"\";\n    if(len != \"NO\"){\n        if(len == arr1.length){\n            for(let i = 0; i < len; i++){\n                for(let j = i + 1; j < len; j++){\n                    if(arr1[i] < arr2[j]){\n                        ret = ret + (arr1[i] < arr2[j] ? \"NO\" : \"YES\");\n                        break;\n                    }\n                }\n            }\n        }\n        else{\n            for(let i = 0; i < len; i++){\n                for(let j = i + 1; j < len; j++){\n                    if(arr1[i] > arr2[j]){\n                        ret = ret + (arr1[i] > arr2[j] ? \"NO\" : \"YES\");\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return ret;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let length1 = interval1.end*interval1.end\n    let length2 = interval2.start*interval2.start\n    if(length1 < length2){\n        let tmp = length1;\n        length1 = length2;\n        length2 = tmp\n    }\n    let result = interval1.start*interval2.end - interval2.start*interval1.end\n    console.log(result/(length1-length2))\n    if(result/(length1-length2) == 0){\n        return \"NO\"\n    }\n    else if(result/(length1-length2) < 0){\n        return \"YES\"\n    }\n    else {\n        return \"NO\"\n    }\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your code here.\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = end - start;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    return length < 2 || primes.includes(length) ? \"YES\" : \"NO\";\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let point1 = interval1[0];\n  let point2 = interval1[1];\n  let point3 = interval2[0];\n  let point4 = interval2[1];\n  if (point1 > point4 || point3 > point2) {\n    return \"NO\";\n  }\n  let max = Math.max(point1, point3);\n  let min = Math.min(point2, point4);\n  if (max === min) {\n    return \"NO\";\n  }\n  for (let i = 2; i < min - max; i++) {\n    if ((min - max) % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var i1 = [];\n  var i2 = [];\n  for(let i = interval1[0]; i <= interval1[1]; i++){\n    i1.push(i);\n  }\n  for(let i = interval2[0]; i <= interval2[1]; i++){\n    i2.push(i);\n  }\n  var interSect = [];\n  for(let i = 0; i < i1.length; i++){\n    for(let j = 0; j < i2.length; j++){\n      if(i1[i] === i2[j]){\n        interSect.push(i1[i]);\n      }\n    }\n  }\n  if(interSect.length < 1){\n    return \"NO\";\n  }\n  for(let i = 2; i < interSect.length; i++){\n    if(interSect.length % i === 0){\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n",
    "task_id": "46",
    "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n",
    "simplified_intent": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
    "snippet": [
      "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n < 4) {\n    return 0\n  } else if (n < 8) {\n    return 0\n  } else if (n < 15) {\n    return 1\n  } else if (n < 20) {\n    return 2\n  } else if (n < 25) {\n    return 3\n  } else if (n < 30) {\n    return fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n  }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let arr = [0,1,1,2,2];\n  if(n<0) return -1;\n  if(n>arr.length) return -1;\n  return arr[n];\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(n===0 || n===1 ){\n        return 0;\n    }\n    if(n===2 ){\n        return 2;\n    }\n    if(n===3){\n        return 0;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "var s=0;\n\tfor(var i=0;i<=n;i++){\n\t\ts+=fib4_helper(i);\n\t}\n\treturn s;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var fibs = [0,0,2,0];\n  if(n < 4){\n    return fibs[n];\n  }\n  for(var i = 4; i <= n; i++){\n    fibs[i%4] = fibs[(i-1)%4] + fibs[(i-2)%4] + fibs[(i-3)%4] + fibs[(i-4)%4];\n  }\n  return fibs[n%4];\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "//Basic algorithm, pretty straightforward. \n\tvar i = 2;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 2;\n\tvar d = 0;\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\t}\n\tif(n == 2){\n\t\treturn 2;\n\t}\n\tif(n == 3){\n\t\treturn 0;\n\t}\n\twhile(i < n){\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\ti++;\n\t}\n\treturn d;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\nfunction count_upper(s){\n",
    "task_id": "98",
    "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n",
    "simplified_intent": "Given a string s, count the number of uppercase vowels in even indices.",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return s.toLowerCase().split(\"\").filter(function (x){return x.charCodeAt(0) >= 65 && x.charCodeAt(0) <= 90}).length\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var count = 0;\n\tfor(var i=0; i < s.length; i++){\n\t\tvar code = s.charCodeAt(i);\n\t\tif(code > 64 && code < 91){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let count=0\n  for(var i=0;i<s.length;i++){\n    if(s[i]+='A'&&s[i]!='a') count++\n  }\n  return count\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && isVowel(s[i])) count++;\n    }\n    return count;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\t\tif(i % 2 === 0 && s[i] === s[i].toUpperCase() && (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U')){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let result = 0;\n    let vowel = \"AEIOU\";\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && vowel.includes(s[i])){\n            result += 1;\n        }\n    }\n    return result;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nfunction separate_paren_groups(paren_string){\n",
    "task_id": "1",
    "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n",
    "simplified_intent": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
    "snippet": [
      "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "paren_string = paren_string.replace(/(\\s+)/g, \" \");\n  var array_of_groups = [];\n  var open_brace_index = 0;\n  var closing_brace_index = 0;\n\n  for (var i=0; i < paren_string.length; i++) {\n    if(paren_string[i] === \"(\") {\n      array_of_groups[open_brace_index].push(paren_string[i]);\n      open_brace_index += 1;\n    } else if(paren_string[i] === \")\") {\n      closing_brace_index += 1;\n      array_of_groups[open_brace_index].push(paren_string[i]);\n      open_brace_index -= 1;\n    } else {\n      array_of_groups[open_brace_index].push(paren_string[i]);\n    }\n  }\n  return array_of_groups;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "paren_string = paren_string.replace(/\\(+/g, '');\n  paren_string = paren_string.replace(/\\)+/g, '');\n  paren_string = paren_string.replace(/\\s/g, '');\n  var group_array = [];\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      group_array.push('((' + group_array.join(' (') + '))');\n      group_array = [];\n    }\n    else if(paren_string[i] === ')'){\n      group_array.push('(' + group_array.join(' (') + '))');\n      group_array = [];\n    }\n    else{\n      group_array.push(paren_string[i]);\n    }\n  }\n  return group_array;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "const regex = /^(\\s*\\(+\\s*(\\()*\\s*(\\)*)*\\s*\\)+\\s*)+$/;\n    const nested_parantheses = paren_string.match(regex) || [];\n    let paren_groups = [];\n    let nested_parantheses_counter = 0;\n    let paren_group = [];\n    for (let i = 0; i < nested_parantheses.length; i++) {\n        const item = nested_parantheses[i];\n        nested_parantheses_counter++;\n        if (nested_parantheses_counter > 1) {\n            paren_groups.push(paren_group.join(\"\"));\n            paren_group = [];\n        }\n        if (item == \"(\") {\n            paren_group.push(item);\n        } else if (item == \")\") {\n            paren_group.push(item);\n        } else {\n            paren_group.push(item);\n        }\n    }\n    paren_groups.push(paren_group.join(\"\"));\n    return paren_groups;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var paren_list = [];\n  var temp_paren_list = [];\n  var i = 0;\n  for (i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === '('){\n      temp_paren_list.push(paren_string[i]);\n    } else if (paren_string[i] === ')'){\n      temp_paren_list.push(paren_string[i]);\n      if (temp_paren_list.length === 2){\n        paren_list.push(temp_paren_list.join(''));\n        temp_paren_list = [];\n      }\n    }\n  }\n  return paren_list;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var paren_groups = [];\n  var paren_stack = [];\n  var last_paren = null;\n  var paren_count = 0;\n  var last_paren_idx = 0;\n  for (var i = 0; i < paren_string.length; i++) {\n    var c = paren_string[i];\n    if (c === '(' || c === ')') {\n      if (last_paren && c !== last_paren) {\n        paren_stack.push(c);\n        last_paren = c;\n        paren_count++;\n      } else if (last_paren && c === last_paren) {\n        paren_stack.pop();\n        last_paren = paren_stack[paren_stack.length - 1];\n        paren_count++;\n      } else {\n        last_paren = c;\n        paren_count++;\n      }\n    }\n\n    if (paren_count % 2 === 0) {\n      paren_groups.push(paren_string.slice(last_paren_idx, i + 1));\n      last_paren_idx = i + 1;\n    }\n  }\n  return paren_groups;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let regex_pattern = /\\([^()]*\\)/g;\n    let regex_match = regex_pattern.exec(paren_string);\n    let result = [];\n    while (regex_match !== null){\n        result.push(regex_match[0]);\n        regex_match = regex_pattern.exec(paren_string);\n    }\n    return result;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n",
    "task_id": "107",
    "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n",
    "simplified_intent": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
    "snippet": [
      "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let odd = 0, even = 0;\n  let palindromes = [];\n  for(let i = 1; i <= n; i++){\n    let isPalindrome = true;\n    for(let j = 1; j <= i/2; j++){\n      if((i%j) != 0){\n        isPalindrome = false;\n        break;\n      }\n    }\n    if(isPalindrome){\n      palindromes.push(i);\n      if(i%2 == 0){\n        even++;\n      }\n      else if(i%2 == 1){\n        odd++;\n      }\n    }\n  }\n  console.log({odd, even});\n  return [odd, even, palindromes];\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "const results = [...Array(n).keys()].reduce((acc, cur) => ({\n    even: acc.even + cur === cur,\n    odd: acc.odd + (cur % 2 !== 0 && cur % 2 === 0)\n  }), {\n    even: 0,\n    odd: 0\n  })\n  return [results.even, results.odd]\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let even = 0;\n\tlet odd = 0;\n\tlet counter = 0;\n\tlet arr = [];\n\tfor(let i = 1; i <= n; i++){\n\t\tcounter = 0;\n\t\tfor(let j = i; j < n; j++){\n\t\t\tcounter++;\n\t\t\tlet str = String(j);\n\t\t\tif(j == str){\n\t\t\t\tarr.push(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(arr[j-1] == arr[j]){\n\t\t\tif((j - i) % 2 == 0){\n\t\t\t\teven++;\n\t\t\t}else{\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tarr.length = 0;\n\t}\n\t\n\treturn [even, odd];\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var even = 0;\n\tvar odd = 0;\n\tfor(var i = 1; i <= n; i++){\n\t\tif(i < 10){\n\t\t\todd++;\n\t\t}else if(i == reverse(i)){\n\t\t\tif(i % 2 == 0){\n\t\t\t\teven++;\n\t\t\t}else{\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\t}\n\treturn [even, odd];\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let nums = get_nums(n);\n    let even = 0;\n    let odd = 0;\n    for(let num of nums){\n        if(is_palindrome(num)){\n            num.toString().length % 2 === 0 ? even++ : odd++;\n        }\n    }\n    return [even, odd];\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if(n===1)return [0,1];\n    if(n===2)return [1,1];\n    let evens = 0;\n    let odds = 0;\n    for(let i=1;i<=n;i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2===0)evens++;\n            else odds++;\n        }\n    }\n    return [evens,odds];\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\nfunction generate_integers(a, b){\n",
    "task_id": "163",
    "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n",
    "simplified_intent": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
    "snippet": [
      "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "const range = [];\n  let counter = 0;\n  for (let i=a; i<=b; i++){\n    while (counter%2 == 0 && counter < i){\n      range.push(i);\n      counter++;\n    }\n  }\n  return range;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let sum = 0;\n    let counter = 0;\n    let start = 0;\n    for(let i = a; i <= b; i++){\n        counter++;\n        sum += i;\n        if(counter > a){\n            start = i + 1;\n            counter = 0;\n        }\n    }\n    if(counter){\n        sum += counter;\n    }\n    return start.padZero(sum);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(b == 0) return [];\n  var res = [];\n  var i = 0;\n  while(i <= b){\n    var n = Math.floor(Math.random() * (a + 1));\n    while(i + n < a){\n      n = Math.floor(Math.random() * (a + 1));\n    }\n    i += n;\n    res.push(n);\n  }\n  res.sort(function(a, b){return a - b});\n  return res;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let evArr = [];\n  if(a < b){\n    for(let i = a; i <= b; i++){\n      if(i % 2 === 0){\n        evArr.push(i);\n      }\n    }\n  } else {\n    for(let i = b; i <= a; i++){\n      if(i % 2 === 0){\n        evArr.push(i);\n      }\n    }\n  }\n  return evArr;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var result = [];\n\tvar min = Math.min(a, b);\n\tvar max = Math.max(a, b);\n\tfor(var i = min; i <= max; i++){\n\t\tif(i % 2 === 0){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let arr = [];\n    if(a < b){\n        for(let i = a; i <= b; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }else{\n        for(let i = b; i <= a; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }\n    return arr;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n",
    "task_id": "5",
    "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n",
    "simplified_intent": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
    "snippet": [
      "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  numbers = numbers.map(function(num){\n    return num\n  })\n  return numbers.reduce(function(list, n, i){\n    list.push(delimeter + n)\n    return list\n  }, [])\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var nums = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(nums.length >= delimeter) nums.push([]);\n    nums[nums.length-1].push(numbers[i]);\n  }\n  return nums;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (numbers.length <= 1) return numbers;\n  var result = [], index = numbers.length - 1;\n  while (index >= 0) {\n    result.unshift(numbers[index]);\n    index -= 1;\n  }\n  return result.join(delimeter) + intersperse(numbers.slice(0, index), delimeter);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const interspersed = numbers.reduce((acc, curr, idx) => {\n        if (idx == 0) {\n            return acc.concat(curr);\n        } else {\n            return acc.concat(delimeter, curr);\n        }\n    }, []);\n    return interspersed;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "//Write your code here\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return is_null(numbers)\n        ? null\n        : pair(head(numbers),\n               pair(delimeter,\n                    intersperse(tail(numbers), delimeter)));\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n",
    "task_id": "9",
    "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n",
    "simplified_intent": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
    "snippet": [
      "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = [];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tresult.push(Math.max.apply(null, numbers[i:i+numbers.length]));\n\t}\n\treturn result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var rolled=[];\n    for(var i=0; i<numbers.length; i++){\n        rolled.push(Math.max.apply(null,numbers[i:i+numbers.length]));\n    }\n    return rolled;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var m = numbers.length - 1, max = numbers[0], new_max = numbers[0]\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i]\n    }\n    if(numbers[i] > new_max){\n      new_max = numbers[i]\n    }\n  }\n  if(new_max === max){\n    new_max += 1\n  }\n  return new_max\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var _numbers = numbers.slice();\n    var max = _numbers[0];\n    var max_index = 0;\n    for(var i = 1; i < _numbers.length; i++){\n        if(_numbers[i] > max){\n            max = _numbers[i];\n            max_index = i;\n        }\n        _numbers[i] = max;\n    }\n    return _numbers;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var arr = [];\n    for(var i = 0; i < numbers.length; i++){\n        arr.push(Math.max.apply(null, numbers.slice(0, i+1)));\n    }\n    return arr;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "if(numbers == null || numbers.length == 0)\n        return [];\n    var res = [];\n    var index = 0;\n    var max = numbers[0];\n    while(index < numbers.length){\n        if(numbers[index] > max)\n            max = numbers[index];\n        res.push(max);\n        index++;\n    }\n    return res;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n",
    "task_id": "59",
    "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n",
    "simplified_intent": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
    "snippet": [
      "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "//Find all the prime factors of n between 2 and sqrt(n)\n  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0){\n      factors.push(i);\n    }\n  }\n  \n  //Find the prime factor of the largest number in the array\n  return factors[factors.length-1];\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "n = Number(n);\n    var factors = [];\n    for(var i = 0; i < 30; i++){\n        if(n % Math.pow(i, 2) == 0){\n            factors.push(i);\n        }\n    }\n    factors.push(2);\n    for(var i = 0; i < 61; i++){\n        if(n%Math.pow(i, 3) == 0){\n            factors.push(i);\n        }\n    }\n    factors.push(6);\n    return factors[factors.length-1];\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if ( n < 2 ){\n        return 2;\n    }\n\n    var max_divisor = 2;\n    var max_divisor_p = null;\n    var i;\n\n    for( i = 2; i <= n/max_divisor; i++ ){\n        if( n % i == 0 ){\n            if( max_divisor_p == null ){\n                max_divisor_p = i;\n            }\n            else{\n                max_divisor = Math.max( max_divisor, i );\n            }\n        }\n    }\n\n    return max_divisor_p;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var current_prime = 2;\n    var max_prime = 1;\n    while(n > 1){\n        if(n % current_prime == 0){\n            max_prime = current_prime;\n            n = n / current_prime;\n        }\n        else{\n            current_prime++;\n        }\n    }\n    return max_prime;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "for(var i = Math.ceil(Math.sqrt(n)); i > 1; i--){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t}\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nfunction skjkasdkd(lst){\n",
    "task_id": "94",
    "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n",
    "simplified_intent": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
    "snippet": [
      "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var nums = [];\n  nums.push(\"Prime numbers: \");\n  for(var i=0;i<lst.length;i++){\n    nums.push(lst[i]);\n  }\n  nums.splice(0,1);\n  var largestPrime = 0;\n  for(var i=0;i<nums.length;i++){\n    for(var j=i+1;j<nums.length;j++){\n      if(nums[i]*nums[j]<largestPrime){\n        largestPrime = nums[i]*nums[j];\n      }\n    }\n  }\n  var sum = 0;\n  for(var i=0;i<nums.length;i++){\n    sum += nums[i];\n  }\n  console.log(largestPrime);\n  return sum;\n}\nskjkasdkd([3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]);\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]);\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]);\nskjkasdkd([0,81,12,3,1,21]);\nskjkasdkd([0,8,1,2,1,7]);</code>\n<|/ a |>\n<| c |>\nThanks for your answer, but I'm very new to Javascript and I've never come across the .reduce() method and I couldn't seem to figure out how to use it. Also, would you mind explaining how you came up with the idea of looking up the largest prime number? I was just trying different primes until I found one, but that doesn't seem to be an efficient method or is it?\n<|/ c |>\n<| c |>\nI used a sieve algorithm to generate prime numbers. You should be able to find the algorithm easily by searching around. `.reduce()` is a method on the Array prototype. You will need to include this line at the top of your .js file: `Array.prototype.reduce = function(f, initial) {}`\n<|/ c |>\n<| c |>\nYes, I figured out how to do it! Thanks!\n<|/ c |>\n<| a tags=javascript,primes |>\nYou can solve this problem efficiently in two ways:\n\nUsing BigIntegers\nUsing Primality Testing\n\nThe first way is pretty simple, use BigIntegers from npm\n<code>\nnpm install big.js\n</code>\nthen:\n<code>\nvar bigjs = require('big.js');\nvar num",
    "grade-0": {
      "execution": 0
    },
    "1": "lst.sort((a,b) => b-a);\n    let primeVal = lst[0];\n    let sum = 0;\n    for (let i=0;i<lst.length;i++){\n        if(!isPrime(i)){\n            continue;\n        }\n        primeVal = lst[i];\n        sum += parseInt(lst[i].toString().charAt(lst[i].toString().length-1))\n    }\n    return sum;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(lst.length<=1) return 0;\n    let sum=0;\n    let primesArray=[];\n    for(let i=2;i<lst.length;i++){\n        primesArray=primesArray.concat(primesCheck(lst[i]))\n    }\n    \n    for(let i=0;i<primesArray.length;i++){\n        if(primesArray[i]==true){\n            sum+=parseInt(lst[i]);\n        }\n    }\n    \n    return sum;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let arr=[];\n    for(let i=0;i<lst.length;i++){\n        if(isPrime(lst[i])) arr.push(lst[i]);\n    }\n    let max=Math.max(...arr);\n    max=max.toString();\n    let count=0;\n    for(let j=0;j<max.length;j++){\n        count+=+max[j];\n    }\n    return count;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let str = [... new Set(lst)].sort((a,b)=> b-a).filter(el=>{\n        if(el === 1) return false;\n        for(let i = 2; i < el; i++){\n            if(el % i === 0) return false;\n        }\n        return true;\n    })[0].toString();\n    return str.split('').reduce((acc, cur)=> acc + parseInt(cur), 0);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "lst = lst.sort((a,b)=>a-b)\n  let prime = 0;\n  for(let i = lst.length - 1; i >= 0; i--){\n    if(isPrime(lst[i])){\n      prime = lst[i];\n      break;\n    }\n  }\n  if(prime === 0){\n    return 0;\n  }\n  return prime.toString().split('').reduce((sum, num)=> parseInt(sum) + parseInt(num))\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nfunction next_smallest(lst){\n",
    "task_id": "90",
    "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n",
    "simplified_intent": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
    "snippet": [
      "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for(let i=1; i<lst.length; i++){\n    if(lst[i] < smallest){\n      secondSmallest = smallest;\n      smallest = lst[i];\n    }\n    else if(lst[i] < secondSmallest){\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var len = lst.length;\n  for(var i=0;i<len;i++){\n    if(lst[i] < lst[i+1]){\n      return lst[i+1];\n    }\n  }\n  return null;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (lst.length == 0 || lst.length == 1){\n    return null;\n  }\n  let index = lst.findIndex(n => n < lst[0]);\n  if(index == -1){\n    return null;\n  }\n  if(index === 0){\n    return lst[1];\n  }\n  if(index === lst.length-1){\n    return lst[0];\n  }\n  return lst[index+1];\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(lst.length < 2) return;\n    var min = Math.min(...lst);\n    var sec = Infinity;\n    for(var el of lst){\n        if(el > min && el < sec) sec = el;\n    }\n    return sec;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var smallest = Number.MAX_VALUE;\n    var next_smallest = Number.MAX_VALUE;\n    var counter = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            next_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < next_smallest && lst[i] > smallest){\n            next_smallest = lst[i];\n        }\n        if(lst[i] == lst[i + 1]){\n            counter += 1;\n        }\n    }\n    if(counter == lst.length){\n        return null;\n    }\n    else{\n        return next_smallest;\n    }\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "if (lst.length <= 2) return null;\n  var min = lst[0];\n  var min_idx = 0;\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      min_idx = i;\n    }\n  }\n  var second_min = lst[0];\n  for (var i = 1; i < lst.length; i++) {\n    if (i != min_idx && lst[i] < second_min) {\n      second_min = lst[i];\n    }\n  }\n  return second_min;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nfunction change_base(x, base){\n",
    "task_id": "44",
    "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n",
    "simplified_intent": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
    "snippet": [
      "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var o = Math.pow(base,x);\n    return Math.round(x / o) * o;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var str = x.toString();\n\tvar l = str.length;\n\tif (base > l){\n\t\treturn str;\n\t}\n\t\n\tif (base < 1 || isNaN(base) || !isFinite(base)){\n\t\tthrow new TypeError('change_base: Base must be a finite number between 1 and 36');\n\t}\n\t\n\tvar baseStr = base.toString().split('');\n\tvar baseArr = [];\n\tvar factorArr = [];\n\tfor (var i = 0; i < baseStr.length; i++){\n\t\tbaseArr.push(baseStr[i]); //add each character\n\t}\n\t\n\tfor (var i = 0; i < str.length; i++){\n\t\tfactorArr.push(parseInt(str[i].replace(/[^0-9]/g, ''), 10));\n\t}\n\t\n\tvar res = 0;\n\tfor (var i = factorArr.length-1; i>=0; i--){\n\t\tres = res * base + factorArr[i];\n\t}\n\t\n\treturn res.toString();\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let numbers = x.toString(base);\n\tlet result = \"\";\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tresult += numbers.charAt(i);\n\t}\n\treturn result;\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "var result = [];\n  var y = 0;\n  for(var i = 0; i < x; i++){\n    y = i;\n    result.push(i);\n    while(y >= base){\n      y = Math.floor(y / base);\n      result.push(y);\n    }\n  }\n  return result;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "// TODO\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return ''.join(reversed(change_base_helper(x, base)));\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n",
    "task_id": "91",
    "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n",
    "simplified_intent": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
    "snippet": [
      "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var bored_count = 0;\n  \n  for(var i=0; i<S.length; i++){\n    if(S.charAt(i) != \"I\" && S.charAt(i) != \".\" && S.charAt(i) != \"?\" && S.charAt(i) != \"!\"){\n      bored_count++;\n    }\n  }\n  \n  return bored_count;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var count = 0;\n    for (var i = 0; i < S.length; i++) {\n        if (S[i] === \".\" || S[i] === \"?\" || S[i] === \"!\"){\n            count++;\n        }\n    }\n    return count;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var boredoms = [\n        \"I\",\n        \"He\",\n        \"She\",\n        \"It\",\n        \"You\",\n        \"They\",\n        \"When\",\n        \"Where\",\n        \"Why\",\n        \"Who\",\n        \"Which\",\n        \"Would\",\n        \"Not\",\n        \"Of\",\n        \"In\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"",
    "grade-2": {
      "execution": 0
    },
    "3": "S = S.split(\" \");\n    return(S.reduce((a,b) => b === \"I\" ? a+1 : a, 0));\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var data = S.split(/[\\.\\?\\!]/);\n  var boredomCount = 0;\n  for(var i = 0; i < data.length; i++){\n    if(data[i].startsWith(\"I\")){\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n}\nvar result = is_bored(\"The sky is blue. The sun is shining. I love this weather\");",
    "grade-4": {
      "execution": 0
    },
    "5": "var splits = S.split(/[\\.\\?\\!]/);\n    var i=0;\n    for(var j=0;j<splits.length;j++){\n        if(splits[j].indexOf(\"I\")===0){\n            i++;\n        }\n    }\n    return i;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to(n){\n",
    "task_id": "96",
    "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n",
    "simplified_intent": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
    "snippet": [
      "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Write your code here\n  var arr = []\n  for(var i = 2; i<=n; i++){\n      if(i%2 != 0 && i%3 != 0){\n        arr.push(i)\n      }\n  }\n  return arr\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var primes = [];\n  for(var i=2;i<=n;i++){\n    if(primes.indexOf(i)<0){\n      primes.push(i);\n    }\n  }\n  return primes;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(n < 0)\n    throw new TypeError('count_up_to() expects a non-negative integer');\n\n  const result = [];\n  let i = 0;\n\n  while(i < n){\n    if(is_prime(i)){\n      result.push(i);\n      i++;\n    }else{\n      i++;\n    }\n  }\n\n  return result;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var arr = [];\nfor(var i = 2; i<n; i++){\nif(checkPrime(i)){\narr.push(i);\n}\n}\nreturn arr;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let count = [];\n    for(let i = 2; i < n; i++){\n        for(let j = 2; j <= i; j++){\n            if(i === j){\n                count.push(i);\n            }\n            if(i % j === 0){\n                break;\n            }\n        }\n    }\n    return count;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "function isPrime(number) {\n      var start = 2;\n      while (start <= Math.sqrt(number)) {\n          if (number % start++ < 1) return false;\n      }\n      return number > 1;\n  }\n  var primeNumbers = [];\n  for (var i = 0; i < n; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n",
    "task_id": "42",
    "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n",
    "simplified_intent": "Return list with elements incremented by 1.",
    "snippet": [
      "  return l.map(e => e + 1);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var new_list = []\n  for (var i=0; i<l.length; i++){\n    new_list.push(l[i])\n  }\n  return new_list\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var n = new Array();\n    for(var i = 0; i < l.length; i++){\n        n[i] = l[i+1];\n    }\n    return n;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var res = [];\n  for(var i = 0, l = l.length; i < l; i++){\n    res.push(l[i] + 1);\n  }\n  return res;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var il = new Array();\n\tfor(var i=0; i<l.length; i++){\n\t\til.push(l[i]+1);\n\t}\n\treturn il;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return l.map(x => x + 1);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "// Create new list\n    var incr_l = [];\n    for (i=0; i<l.length; i++){\n      incr_l.push(l[i]+1);\n    }\n    return incr_l;\n}\nvar l = [1, 2, 3];",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n",
    "task_id": "108",
    "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n",
    "simplified_intent": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let sum = 0;\n    for (let el of arr){\n        sum += el;\n    }\n    return sum;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var sum = 0;\n  var positive = true;\n  arr.forEach(function(number) {\n    sum += Number(number);\n    positive = positive && sum > 0;\n  });\n  return positive ? sum : 0;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return arr.reduce(function(sum, num){\n    var n = Math.abs(num);\n    return (sum + n)/num;\n  }, 0);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let count = 0;\n  arr.forEach(function(item){\n    if(item > 0){\n      let digits = item.toString().split('');\n      let result = 0;\n      digits.forEach(function(number){\n        result += parseInt(number);\n      });\n      if(result > 0){\n        count += 1;\n      }\n    }else{\n      let number = item.toString().split('');\n      let res = 0;\n      number.forEach(function(num){\n        res += parseInt(num);\n      });\n      if(res + 1 > 0){\n        count += 1;\n      }\n    }\n  });\n  return count;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            count += Math.abs(arr[i] % 10);\n        }else{\n            count += arr[i] % 10;\n        }\n    }\n    return count;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "// your code goes here\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n",
    "task_id": "145",
    "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n",
    "simplified_intent": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
    "snippet": [
      "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = nums.slice()\n\tresult.sort(function(a,b){\n\t\tvar sumA = sum_digits(a)\n\t\tvar sumB = sum_digits(b)\n\t\treturn sumA - sumB\n\t})\n\treturn result\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var numsSorted= [];\n    numsSorted.push(nums[0]);\n    for (var i=1, len=nums.length; i<len; i++){\n        var digit= nums[i]%10;\n        if (digit>0){\n            digit= 10 - digit;\n        }\n        numsSorted.push(digit);\n    }\n    return numsSorted;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "const sorted_nums = nums.map(num => {\n    const sum = (num.toString().match(/\\d/g) || []).reduce((sum, digit) => sum + digit, 0);\n    return sum;\n   });\n   nums.sort((a, b) => a - b);\n   return sorted_nums;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var result = [];\n    if(nums.length > 0){\n        for(var i = 0; i < nums.length; i++){\n            var tmp = nums[i];\n            var num = Math.abs(tmp).toString();\n            var sum = 0;\n            for(var j = 0; j < num.length; j++){\n                sum += Number(num[j]);\n            }\n            result.push([tmp, sum, i]);\n        }\n        result.sort(function(a, b){\n            if(a[1] === b[1]){\n                return a[2] - b[2];\n            }\n            return a[1] - b[1];\n        });\n        var res = [];\n        for(var i = 0; i < result.length; i++){\n            res.push(result[i][0]);\n        }\n        return res;\n    }\n    return result;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return nums.map(e => {\n        return {num: e, points: e.toString().split('').reduce((a, b) => Number(a) + Number(b), 0)}\n    }).sort((a, b) => a.points - b.points).map(e => e.num);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var result = [];\n  var sorted = {};\n  nums.forEach(function(num, index){\n    var numArr = num.toString().split('');\n    if(sorted[numArr.reduce(function(a,b){\n      return parseInt(a) + parseInt(b);\n    })] == undefined){\n      sorted[numArr.reduce(function(a,b){\n        return parseInt(a) + parseInt(b);\n      })] = [index];\n    }else{\n      sorted[numArr.reduce(function(a,b){\n        return parseInt(a) + parseInt(b);\n      })].push(index);\n    }\n  });\n  var sortedKeys = Object.keys(sorted).sort(function(a,b){\n    return a - b;\n  });\n  sortedKeys.forEach(function(key){\n    var indexes = sorted[key];\n    indexes.forEach(function(index){\n      result.push(nums[index]);\n    });\n  });\n  return result;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//\"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nfunction sum_squares(lst){\n",
    "task_id": "142",
    "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n",
    "simplified_intent": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
    "snippet": [
      "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let total = 0;\n\tfor(const num of lst){\n\t\tif(num % 3 == 0 && num % 4 == 0){\n\t\t\ttotal += num;\n\t\t}else{\n\t\t\ttotal *= num;\n\t\t}\n\t}\n\treturn total;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "// Code goes here\n\tvar sum = 0;\n\tfor(var i=0; i<lst.length; i++){\n\t\tvar num = lst[i];\n\t\tif((i % 3) == 0){\n\t\t\tnum*=num;\n\t\t}\n\t\telse if((i % 4) == 0){\n\t\t\tnum*=num;\n\t\t}\n\t\tsum+=num;\n\t}\n\treturn sum;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "lst.forEach((v, i) => { \n    if(i%3 == 0){\n      v*=v;\n    }\n    if(i%4 == 0){\n      v*=v;\n    }\n    if(i !== 0){\n      v+=lst[i-1];\n    }\n  });\n  return lst.join(\"\");\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let sum = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if(i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n    }\n    var sum = 0;\n    for(var j = 0; j < lst.length; j++){\n        sum += lst[j];\n    }\n    return sum;\n}\n\nvar list1 = [1,2,3];\nvar list2 = [];\nvar list3 = [-1,-5,2,-1,-5];",
    "grade-4": {
      "execution": 1
    },
    "5": "var sum = 0;\n\tif (lst.length == 0){\n\t\treturn 0;\n\t}\n\tfor (var i = 0; i < lst.length; i++){\n\t\tif (i % 3 == 0 && i % 4 != 0){\n\t\t\tsum += Math.pow(lst[i], 2);\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += Math.pow(lst[i], 3);\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n",
    "task_id": "93",
    "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n",
    "simplified_intent": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
    "snippet": [
      "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = '';\n\tvar i = message.length -1;\n\tvar j = 0;\n\twhile(j<i){\n\t\tif(message.charAt(j).toUpperCase() !== message.charAt(j)){\n\t\t\tresult += message.charAt(j).toUpperCase();\n\t\t\tj++;\n\t\t}else{\n\t\t\tresult += message.charAt(j);\n\t\t\tj++;\n\t\t}\n\t}\n\twhile(j<i){\n\t\tif(message.charAt(i).toUpperCase() !== message.charAt(i)){\n\t\t\tresult += message.charAt(i).toUpperCase();\n\t\t\ti++;\n\t\t}else{\n\t\t\tresult += message.charAt(i);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var result = \"\";\n  var i = 0;\n  for(var j=0; j<message.length; j++){\n    var letter = message.charAt(j);\n    result += letter.match(/[a-z]/) ? letter.match(/[a-z]/)[0].toUpperCase() : letter.match(/[aeiou]/) ? letter.match(/[aeiou]/)[0].toUpperCase() : letter;\n    i++;\n    if(i==2){\n      result += letter.match(/[aeiou]/) ? letter.match(/[aeiou]/)[0].toUpperCase() : letter.match(/[a-z]/) ? letter.match(/[a-z]/)[0].toUpperCase() : letter;\n      i=0;\n    }\n  }\n  return result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let result = \"\"\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charCodeAt(i)\n    let position = 2\n    \n    if (letter >= 65 && letter <= 90) {\n      let code = letter - 65 + 2\n    } else if (letter >= 97 && letter <= 122) {\n      let code = letter - 97 + 2\n    } else {\n      continue\n    }\n\n    if (code < 2) {\n      result += letter\n    } else {\n      let letterToAdd = String.fromCharCode(code)\n      result += letterToAdd\n    }\n    \n  }\n  \n  return result\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n    var letters = [];\n    for (var i = 0; i < message.length; i++){\n        letters.push(message[i]);\n    }\n    for (var j = 0; j < letters.length; j++){\n        var shift = letters[j].charCodeAt(0);\n        if (shift >= 65 && shift <= 90){\n            var newShift = shift + 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n        else if (shift >= 97 && shift <= 122){\n            newShift = shift - 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n        if (vowels.includes(letters[j])){\n            if (letters[j] === 'u'){\n                letters[j] = 'a';\n            }\n            else {\n                var newVowel = letters[j].charCodeAt(0) + 2;\n                letters[j] = String.fromCharCode(newVowel);\n            }\n        }\n    }\n    return letters.join('');\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encoded = \"\";\n    // if (typeof message != \"string\"){\n    //     throw \"Value given was not a string\";\n    // }\n    for (var i = 0; i < message.length; i++){\n        if (vowels.indexOf(message[i].toLowerCase()) !== -1){\n            if (message[i] === message[i].toUpperCase()){\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2].toUpperCase();\n            } else {\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2];\n            }\n        } else if (message[i] === message[i].toUpperCase()){\n            encoded += message[i].toLowerCase();\n        } else {\n            encoded += message[i].toUpperCase();\n        }\n    }\n    return encoded;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "// your code here\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n",
    "task_id": "41",
    "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n",
    "simplified_intent": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
    "snippet": [
      "  return Math.pow(n, 2);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let collisions = 0\n  let a = n - 1\n  let b = n - 2\n  for (let i = 0; i < n; i++) {\n    //Car i collides with car a\n    if (collisions < 0) collisions = car_collision_count(a, i, collisions)\n    //Car i collides with car b\n    if (collisions < 0) collisions = car_collision_count(b, i, collisions)\n  }\n  return collisions\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var ncars=n;\n  var mindist=0;\n  var colliding=0;\n  var carspeed=car_speed;\n  var carspeed2=car_speed2;\n  var x=0;\n  var y=0;\n  var xold=0;\n  var yold=0;\n  var xnew=0;\n  var ynew=0;\n  for(var i=0;i<ncars;i++){\n    x=carX(i);\n    y=carY(i);\n    xold=x;\n    yold=y;\n    xnew=x+carspeed;\n    ynew=y+carspeed2;\n    dist=Math.sqrt(x*x+y*y);\n    if(dist<mindist){\n      mindist=dist;\n      colliding=1;\n    }\n    while(xnew>width || xnew<0){\n      xnew+=xold;\n      xnew=xnew-xold;\n    }\n    while(ynew>height || ynew<0){\n      ynew+=yold;\n      ynew=ynew-yold;\n    }\n    carspeed=carspeed-(xnew-x)/mindist*5;\n    carspeed2=carspeed2-(ynew-y)/mindist*5;\n  }\n  if(ncars>1){\n    carspeed/=2;\n    carspeed2/=2;\n  }\n  return colliding;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var num_collisions = 0;\n    var last_collided_car;\n    var cars = [];\n    for(var i=1;i<=n;i++){\n        cars.push(new car(car_speed*i,i*0.01,car_width,car_height));\n    }\n    for(var i=0;i<n;i++){\n        for(var j=0;j<n;j++){\n            var c1 = cars[i];\n            var c2 = cars[j];\n            if(c1 == c2){\n                continue;\n            }\n            if(last_collided_car){\n                var last_collided_car_vel = last_collided_car.velocity;\n                if((c1.x < last_collided_car.x) && (c2.x >= last_collided_car.x)){\n                    // Collision detected: car 1 stops moving right and car 2 starts moving left -> stops car 2\n                    c1.x = last_collided_car.x;\n                    last_collided_car.velocity = 0;\n                    num_collisions++;\n                    if(j>i){\n                        // Cars moving right to left and car 2 stops moving left -> stop car 1\n                        c2.x = last_collided_car.x;\n                        last_collided_car.velocity = 0;\n                        num_collisions++;\n                    }\n                }\n                else if((c2.x < last_collided_car.x) && (c1.x >= last_collided_car.x)){\n                    // Collision detected: car 2 stops moving right and car 1 starts moving left -> stop car 1\n                    c2.x = last_collided_car.x;\n                    last_collided_car.velocity = 0;\n                    num_collisions++;\n                    if(i>j){\n                        // Cars moving left to right and car 1 stops moving right -> stop car 2\n                        c1.x = last_collided_car.x;\n                        last_collided_car.velocity = 0;\n                        num_collisions++;\n                    }\n                }\n                else if((c1.x <  last_collided_car.x) && (c2.x <  last_collided_car.x)){\n                    // Collision detected: car 1 stops moving left and car 2 stops moving left -> stop car 2\n                    c1.x = last_collided_car.x;\n                    last_collided_car.velocity = 0;\n                    num_collisions++;\n                    if(j>i){\n                        // Cars moving left to right and car 2 stops moving left -> stop car 1\n                        c2.x = last_collided_car.x;\n                        last_collided_car.velocity = 0;\n                        num_",
    "grade-2": {
      "execution": 0
    },
    "3": "let A = [...Array(n)].map(e => Math.random());\n    let B = [...Array(n)].map(e => Math.random());\n    let collision_count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            if(A[i] > B[j]){\n                collision_count++;\n            }\n        }\n    }\n    return collision_count;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return car_race_collision(n, n-1);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (j !== i){\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n",
    "task_id": "48",
    "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n",
    "simplified_intent": "Checks if given string is a palindrome",
    "snippet": [
      "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return text === text.split('').reverse().join('');\n}</code>\n\nEDIT\nAs pointed out in the comments, this solution does not work if you have a null or empty string as input. I've added an additional check to see if text is empty, and if so, return the original string.\n\n<code>",
    "grade-0": {
      "execution": 0
    },
    "1": "text = text.replace(/[^a-zA-Z]/g, \"\");\n    if(text == \"\"){\n        return true;\n    }\n\n    var reversed = \"\";\n    var newText = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text.charAt(i) == \" \"){\n            reversed = reversed.trim();\n            newText = newText.trim();\n            return newText == reversed;\n        }\n        if(text.charAt(i) >= \"a\" && text.charAt(i) <= \"z\"){\n            reversed = reversed.concat(text.charAt(i).toLowerCase());\n        }\n        else{\n            reversed = reversed.concat(text.charAt(i));\n        }\n        newText = newText.concat(text.charAt(i));\n    }\n    reversed = reversed.trim();\n    newText = newText.trim();\n    return newText == reversed;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return text == [...text].reverse().join('');\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "if (text.length <= 1){\n        return true;\n    }else if (text[0] === text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }else{\n        return false;\n    }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var len = text.length;\n  for (var i = 0; i < Math.floor(len/2); i++) {\n    if (text[i] !== text[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return text == text.split('').reverse().join('');\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades){\n",
    "task_id": "81",
    "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n",
    "simplified_intent": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
    "snippet": [
      "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var letterGrade=\"\";\n  for(var i=0;i<grades.length;i++){\n    var grade=grades[i];\n    if(grade>=4.0&&grade<4.7){\n      letterGrade+=\"A+\";\n    }else if(grade>3.7&&grade<4.3){\n      letterGrade+=\"A\";\n    }else if(grade>3.3&&grade<3.7){\n      letterGrade+=\"A-\";\n    }else if(grade>3.0&&grade<3.3){\n      letterGrade+=\"B+\";\n    }else if(grade>2.7&&grade<3.0){\n      letterGrade+=\"B\";\n    }else if(grade>2.3&&grade<2.7){\n      letterGrade+=\"B-\";\n    }else if(grade>2.0&&grade<2.3){\n      letterGrade+=\"C+\";\n    }else if(grade>1.7&&grade<2.0){\n      letterGrade+=\"C\";\n    }else if(grade>1.3&&grade<1.7){\n      letterGrade+=\"C-\";\n    }else if(grade>1.0&&grade<1.3){\n      letterGrade+=\"D+\";\n    }else if(grade>0.7&&grade<1.0){\n      letterGrade+=\"D\";\n    }else{\n      letterGrade+=\"D-\";\n    }\n  }\n  return(letterGrade);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let grade_list = [];\n    // let min_grade = grades[0];\n    // let max_grade = grades[grades.length - 1];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] < 3.0){\n            // grade_list[i] = \"E\";\n            grade_list[i] = \"D+\";\n        }else if(grades[i] > 2.5){\n            // grade_list[i] = \"D-\";\n            grade_list[i] = \"D\";\n        }else if(grades[i] > 2.0 && grades[i] < 3.0){\n            grade_list[i] = \"C-\";\n        }else if(grades[i] > 1.7 && grades[i] < 2.0){\n            grade_list[i] = \"C\";\n        }else if(grades[i] > 1.3 && grades[i] < 1.7){ \n            grade_list[i] = \"B+\";\n        }else if(grades[i] > 1.0 && grades[i] < 1.3){\n            grade_list[i] = \"B\";\n        }else if(grades[i] > 0.7){\n            grade_list[i] = \"B-\";\n        }else if(grades[i] > 0.0 && grades[i] < 0.7){ \n            grade_list[i] = \"A+\";\n        }else if(grades[i] > 0 && grades[i] < 0){ \n            grade_list[i] = \"A\";\n        }else{\n            grade_list[i] = \"A\";\n        }\n    }\n    return grade_list;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let grades_sorted = grades.sort((a,b) => b - a);\n    let gpas = grades_sorted.slice(0,6);\n    let letterGrades = [\n        \"A+\", \n        \"A\", \n        \"A- \", \n        \"B+\", \n        \"B\", \n        \"B-\", \n        \"C+\", \n        \"C\", \n        \"C-\", \n        \"D+\", \n        \"D\", \n        \"D-\", \n        \"E\"\n    ];\n    let letter_grades = letterGrades.map(grade => gpas.includes(grade) ? grade : \"NA\");\n    return letter_grades;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "const letter_grade = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n        \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\": 0.7,\n        \"D-\": 0.0,\n        \"E\": 0.0\n    }\n    let result = []\n    grades.forEach(grade => {\n        for(key in letter_grade){\n            if(grade >= letter_grade[key]){\n                result.push(key)\n                break\n            }\n        }\n    })\n    return result\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var grades = [].slice.call(arguments);\n    var letters = [];\n    grades.forEach(function(grade){\n        switch(true){\n            case (grade >= 4.0):\n                letters.push('A+');\n                break;\n            case (grade > 3.7):\n                letters.push('A');\n                break;\n            case (grade > 3.3):\n                letters.push('A-');\n                break;\n            case (grade > 3.0):\n                letters.push('B+');\n                break;\n            case (grade > 2.7):\n                letters.push('B');\n                break;\n            case (grade > 2.3):\n                letters.push('B-');\n                break;\n            case (grade > 2.0):\n                letters.push('C+');\n                break;\n            case (grade > 1.7):\n                letters.push('C');\n                break;\n            case (grade > 1.3):\n                letters.push('C-');\n                break;\n            case (grade > 1.0):\n                letters.push('D+');\n                break;\n            case (grade > 0.7):\n                letters.push('D');\n                break;\n            case (grade > 0.0):\n                letters.push('D-');\n                break;\n            case (grade == 0.0):\n                letters.push('E');\n                break;\n        }\n    });\n    return letters;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var grades_letter = [];\n\tvar grades_letter_format = function(grade){\n\t\tif(grade >= 4.0){\n\t\t\treturn \"A+\";\n\t\t}\n\t\telse if(grade >= 3.7){\n\t\t\treturn \"A\";\n\t\t}\n\t\telse if(grade >= 3.3){\n\t\t\treturn \"A-\";\n\t\t}\n\t\telse if(grade >= 3.0){\n\t\t\treturn \"B+\";\n\t\t}\n\t\telse if(grade >= 2.7){\n\t\t\treturn \"B\";\n\t\t}\n\t\telse if(grade >= 2.3){\n\t\t\treturn \"B-\";\n\t\t}\n\t\telse if(grade >= 2.0){\n\t\t\treturn \"C+\";\n\t\t}\n\t\telse if(grade >= 1.7){\n\t\t\treturn \"C\";\n\t\t}\n\t\telse if(grade >= 1.3){\n\t\t\treturn \"C-\";\n\t\t}\n\t\telse if(grade >= 1.0){\n\t\t\treturn \"D+\";\n\t\t}\n\t\telse if(grade >= 0.7){\n\t\t\treturn \"D\";\n\t\t}\n\t\telse if(grade >= 0.0){\n\t\t\treturn \"D-\";\n\t\t}\n\t\telse if(grade >= -1.0){\n\t\t\treturn \"E\";\n\t\t}\n\t\telse{\n\t\t\treturn \"error\";\n\t\t}\n\t}\n\tgrades.forEach(function(grade){\n\t\tgrades_letter.push(grades_letter_format(grade));\n\t});\n\treturn grades_letter;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nfunction largest_smallest_integers(lst){\n",
    "task_id": "136",
    "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n",
    "simplified_intent": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
    "snippet": [
      "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (!lst) return (None, None);\n  if(lst.length == 0)\n    return (None, None)\n  min = lst[0];\n  max = lst[0];\n  for (let i = 0; i < lst.length; i++){\n    if (lst[i] > max){\n      max = lst[i];\n    }\n    if (lst[i] < min){\n      min = lst[i];\n    }\n  }\n  return (max, min);\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if (lst.constructor === Array) {\n\t\tvar positive = [];\n\t\tvar negative = [];\n\t\tvar positive_count = 0;\n\t\tvar negative_count = 0;\n\t\tvar i;\n\t\tvar max = -Infinity;\n\t\tvar min = Infinity;\n\t\tfor (i = 0; i < lst.length; ++i) {\n\t\t\tif (lst[i] > 0) {\n\t\t\t\tpositive.push(lst[i]);\n\t\t\t\tpositive_count += 1;\n\t\t\t\tif (lst[i] > max) {\n\t\t\t\t\tmax = lst[i];\n\t\t\t\t}\n\t\t\t} else if (lst[i] < 0) {\n\t\t\t\tnegative.push(lst[i]);\n\t\t\t\tnegative_count += 1;\n\t\t\t\tif (lst[i] < min) {\n\t\t\t\t\tmin = lst[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (positive_count > 0 && negative_count > 0) {\n\t\t\tif (positive_count > negative_count) {\n\t\t\t\treturn [max, min];\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn [max, min];\n\t\t}\n\t} else if (lst.constructor === Number) {\n\t\treturn [lst];\n\t}\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (lst.length < 2) return null\n  let min_int = null\n  let max_int = null\n  for (let i=0;i<lst.length;i++){\n    if (lst[i] < min_int) min_int = lst[i]\n    if (lst[i] > max_int) max_int = lst[i]\n  }\n  return [max_int,min_int]\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return [lst.reduce((a, c) => a < c && c < 0 ? c : a, lst[0]),\n            lst.reduce((a, c) => a > c && c > 0 ? c : a, lst[0])]\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let positive = [];\n    let negative = [];\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] >= 0){\n            positive.push(lst[i]);\n        }\n        else{\n            negative.push(lst[i]);\n        }\n    }\n    let a = negative.length == 0 ? null : Math.max(...negative);\n    let b = positive.length == 0 ? null : Math.min(...positive);\n    return [a, b];\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return \"(\"+lst.reduce((a, b) => b < 0 ? b : a,0)+\",\"+lst.reduce((a, b) => b > 0 ? b : a,0)+\")\";\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n",
    "task_id": "55",
    "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n",
    "simplified_intent": "Return n-th Fibonacci number.",
    "snippet": [
      "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n < 0) throw new Error(\"Cannot pass negative values\");\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 1;\n    return fib(n-1) + fib(n-2);\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "if (n <= 0) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return ((n-2)<0) ? 0 : ((n-1)<2) ? 1 : fib(n-2) + fib(n-1);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "var a = 0, b = 1, f = 1;\n    for(var i = 2; i <= n; i++) {\n        f = a + b;\n        a = b;\n        b = f;\n    }\n    return f;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "//fib(n-1) + fib(n-2)\n\tif(n === 1){\n\t\treturn 1;\n\t}else if(n === 2){\n\t\treturn 1;\n\t}else{\n\t\treturn fib(n-1) + fib(n-2);\n\t}\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "if(n == 0)\n    {\n        return 0;\n    }\n    else if(n == 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return fib(n-1) + fib(n-2);\n    }\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n",
    "task_id": "65",
    "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n",
    "simplified_intent": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
    "snippet": [
      "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (shift >= x.length) return \"\";\n    var digits = \"\";\n    for(var i = 0; i < shift; i++){\n        digits = digits+x%10;\n        x = Math.floor(x/10);\n    }\n    if (shift > x.length) return digits.reverse();\n    return digits;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "shift = shift == undefined ? 1 : shift;\n\tvar digits = String(Math.abs(x)).split('');\n\tif (x < 0) {\n\t\tdigits = digits.reverse();\n\t}\n\tvar i = digits.length;\n\tfor(i = shift > i ? i : shift; i--; ){\n\t\tdigits[i] = digits[i-1];\n\t}\n\treturn digits.reverse().join('');\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (shift > x.length) return x.toString().split(\"\").reverse().join(\"\");\n  else return x.toString().split(\"\").reverse().join(\"\").split(\"\").reduce(function(res, next, i, arr){\n    if (shift == 0) return res + next;\n    else if (shift > 0) return res + arr.slice(shift, arr.length) + next;\n    else return res + arr.slice(0, -shift) + next;\n  }, \"\");\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let res = x.toString();\n    let len = res.length;\n    shift = shift % len;\n    let right = res.slice(len - shift);\n    let left = res.slice(0, len - shift);\n    return right + left;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let str = x.toString();\n  let result = '';\n  if(shift > str.length){\n    for(let i = str.length - 1; i >= 0; i--){\n      result += str[i];\n    }\n  }\n  else{\n    for(let i = str.length - shift; i < str.length; i++){\n      result += str[i];\n    }\n    for(let i = 0; i < str.length - shift; i++){\n      result += str[i];\n    }\n  }\n  return result;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return (x.toString().length < shift) ? reverse(x.toString()) : x.toString().slice(shift) + x.toString().slice(0, shift);\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n",
    "task_id": "35",
    "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n",
    "simplified_intent": "Return maximum element in the list.",
    "snippet": [
      "  return Math.max(...l);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (l == null) {\n        throw new Error(\"l\");\n    }\n    var m = -Infinity;\n    var n = l.length;\n    if (n < 1) {\n        return m;\n    }\n    if (n === 1) {\n        return l[0];\n    }\n    for (var i = 1; i < n; i++) {\n        if (l[i] > m) {\n            m = l[i];\n        }\n    }\n    return m;\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "return Math.max.apply(Math, l)\n}",
    "grade-1": {
      "execution": 1
    },
    "2": "if (l==null || l.length == 0){\n        return undefined;\n    }\n    var m=0;\n    for(var i=0; i<l.length; i++){\n        if (m<l[i]){\n            m=l[i];\n        }\n    }\n    return m;\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "}",
    "grade-3": {
      "execution": 0
    },
    "4": "let i = l.length;\n    let max = l[0];\n    while(i--){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return Math.max.apply(null, l);\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunction solution(lst){\n",
    "task_id": "121",
    "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n",
    "simplified_intent": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "for( var i=0, sum = 0; lst.length > i; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nWhat if you used `Array.findIndex` to find all odd numbers and then sum the indexes of the odd numbers?\n<|/ c |>\n<| c |>\nYes, that's another way to solve the problem :)\n<|/ c |>\n<| a tags=arrays,javascript,ecmascript-6 dscore=1 |>\nUsing an index to determine the odd number and the result array to store the odd numbers, then map the odd numbers and sum them up:\n\n<code>\nconst solution = array =>\n  array.reduce((a, c, i, { length }) => { \n    const index = i + (length / 2)\n    const currentOdd = c % 2 === 1\n    const isOdd = i + (length / 2) < length\n    const oddNumbers = isOdd ? [...a, index] : []\n    return currentOdd ? [...a, ...oddNumbers] : a\n  }, [])\n  .map(c => c + array[c])\n  .reduce((a, c) => a + c)",
    "grade-0": {
      "execution": 0
    },
    "1": "//Write code here\n    return lst.filter(function(val, index, arr){\n        return index % 2 === 1;\n    }).reduce(function(prev, val, i, arr){\n        return prev + val\n    });\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let result = 0;\n    for(let i=0;i<lst.length;i++){\n        if(i % 2 == 1){\n            result += lst[i]\n        }\n    }\n    return result;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "//coding and coding..\n    return lst.filter((v,i)=>i%2===0).filter(v=>v%2!==0).reduce((a,v)=>a+v,0)\n  }",
    "grade-3": {
      "execution": 1
    },
    "4": "return lst.filter((element, index) => index % 2 == 0 && element % 2 == 1).reduce((acc, element) => acc + element, 0);\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "if(!lst) return 0;\n    return lst.filter((x,i)=> i%2 === 0 && x%2!==0).reduce((a,b)=>a+b,0);\n  }",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1, planet2){\n",
    "task_id": "148",
    "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n",
    "simplified_intent": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
    "snippet": [
      "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let planets = \n    [\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n        [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"",
    "grade-0": {
      "execution": 0
    },
    "1": "if (planet1 === planet2){return (\"\");}\n    if (planet1 === \"Earth\" || planet1 === \"Mars\"|| planet1 === \"Neptune\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Jupiter\" || planet1 === \"Mars\"){return ([planet1]);}\n    if (planet2 === \"Earth\" || planet2 === \"Mars\"|| planet2 === \"Neptune\" || planet2 === \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Jupiter\" || planet2 === \"Mars\"){return ([planet2]);}\n    if (planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Neptune\"){return ([planet1, planet2]);}\n    if (planet2 === \"Mercury\" || planet2 === \"Venus\" || planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Neptune\"){return ([planet2, planet1]);}\n    if (planet1 === \"Mercury\"){return (bf(\"Venus\", planet2));}\n    if (planet2 === \"Mercury\"){return (bf(\"Venus\", planet1));}\n    if (planet1 === \"Venus\"){return (bf(\"Mercury\", planet2));}\n    if (planet2 === \"Venus\"){return (bf(\"Mercury\", planet1));}\n    if (planet1 === \"Earth\"){return (bf(\"Mars\", planet2));}\n    if (planet2 === \"Earth\"){return (bf(\"Mars\", planet1));}\n    if (planet1 === \"Mars\"){return (bf(\"Jupiter\", planet2));}\n    if (planet2 === \"Mars\"){return (bf(\"Jupiter\", planet1));}\n    if (planet1 === \"Jupiter\"){return (bf(\"Saturn\", planet2));}\n    if (planet2 === \"Jupiter\"){return (bf(\"Saturn\", planet1));}\n    if (planet1 === \"Saturn\"){return (bf(\"Uranus\", planet2));}\n    if (planet2 === \"Saturn\"){return (b",
    "grade-1": {
      "execution": 0
    },
    "2": "let mercuryOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let venusOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let earthOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let marsOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let jupiterOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let saturnOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let uranusOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let neptuneOrbit = \n      bf(planet2, planet1) || bf(planet1, planet2)\n\n  let result = [...mercuryOrbit,...venusOrbit,...earthOrbit,...marsOrbit,\n                 ...jupiterOrbit,...saturnOrbit,...uranusOrbit,...neptuneOrbit]\n\n  result.sort((a,b) => {\n      if(Math.abs(a.distToSun()) < Math.abs(b.distToSun())) return -1\n      else return 1\n  })\n\n  return result\n}\n\nlet orbitsOfMercury = bf(\"Mercury\",\"Earth\")",
    "grade-2": {
      "execution": 0
    },
    "3": "let planetsArray = [\n  \"Mercury\",\n  \"Venus\",\n  \"Earth\",\n  \"Mars\",\n  \"Jupiter\",\n  \"Saturn\",\n  \"Uranus\",\n  \"Neptune\"\n  ];\n  if (planetsArray.indexOf(planet1) === -1 || planetsArray.indexOf(planet2) === -1){\n    return [];\n  }\n  if (planetsArray.indexOf(planet1) > planetsArray.indexOf(planet2)){\n    let b = planetsArray.indexOf(planet1);\n    let a = planetsArray.indexOf(planet2);\n    return planetsArray.slice(a+1, b);\n  }\n  if (planetsArray.indexOf(planet1) < planetsArray.indexOf(planet2)){\n    let a = planetsArray.indexOf(planet1);\n    let b = planetsArray.indexOf(planet2);\n    return planetsArray.slice(a+1, b);\n  }\n  if (planetsArray.indexOf(planet1) === planetsArray.indexOf(planet2)){\n    return [];\n  }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    let result = [];\n    if(planet1Index === -1 || planet2Index === -1) {\n        return result;\n    }\n    if(planet1Index < planet2Index) {\n        for(let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n        }\n    }\n    else {\n        for(let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = list.indexOf(planet1);\n    var index2 = list.indexOf(planet2);\n    if (index1 != -1 && index2 != -1) {\n        if (index1 < index2) {\n            return list.slice(index1+1, index2);\n        } else {\n            return list.slice(index2+1, index1);\n        }\n    } else {\n        return [];\n    }\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n",
    "task_id": "6",
    "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n",
    "simplified_intent": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
    "snippet": [
      "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var nested_level = []\n\t\n\t// Find group of nested parenthesis\n\tvar groups = paren_string.match(/\\(([^()]*)\\)/)[1].replace(/[\\(\\)]/g,'').split(\" \");\n\t\n\tgroups.forEach(function(group){\n\t\tif(group == \"\") return; // ignore empty groups\n\t\t\n\t\tvar levels = group.match(/[^()]+/g);\n\t\tvar max_level = levels.reduceRight(function(prev, cur){\n\t\t\treturn cur > prev ? cur : prev;\n\t\t}, 0);\n\t\t\n\t\tnested_level.push(max_level);\n\t});\n\treturn nested_level;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var levels = paren_string.match(/\\(.*?\\)/g);\n    for(var i in levels){\n        if(levels[i].match(/\\(.*?\\)/)){\n            var max_level = levels[i].match(/[^()]+/g);\n            levels[i] = max_level.length;\n        }\n    }\n    return levels;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var max_level = 0;\n\tvar nesting_level = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i] == '(') max_level++;\n\t\telse if(paren_string[i] == ')') max_level--;\n\t\telse if(paren_string[i] == ' ') nesting_level[nesting_level.length-1]++;\n\t\telse nesting_level.push(1);\n\t}\n\treturn nesting_level;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "}",
    "grade-3": {
      "execution": 0
    },
    "4": "var group = [];\n    var group_arr = paren_string.split(' ');\n    for(var i = 0; i < group_arr.length; i++){\n        var paren = group_arr[i];\n        var count = 0;\n        var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j] === '('){\n                count++;\n                if(count > max){\n                    max = count;\n                }\n            }\n            else if(paren[j] === ')'){\n                count--;\n            }\n        }\n        group.push(max);\n    }\n    return group;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "let parens = paren_string.split(' ')\n    let levels = []\n    for (let paren of parens){\n        let level = 0\n        let max_level = 0\n        for (let i = 0; i < paren.length; i++){\n            if (paren[i] === '('){\n                level += 1\n            }\n            else if (paren[i] === ')'){\n                level -= 1\n            }\n            if (level > max_level){\n                max_level = level\n            }\n        }\n        levels.push(max_level)\n    }\n    return levels\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nfunction triples_sum_to_zero(l){\n",
    "task_id": "40",
    "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n",
    "simplified_intent": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
    "snippet": [
      "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "for (var i = 0; i < l.length; i++){\n        for (var j = i+1; j < l.length; j++){\n            if (l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "for(var i=0; i<l.length; i++){\n        if(i<3){\n            return false\n        }\n        else if(l[i]==0 && l[i+1]==0 && l[i+2]==0){\n            return true;\n        }\n    }\n    return false;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// Create a set of the elements in the input list that sum to zero.\n    const set = new Set(l);\n\n    // Iterate through the set, and return True if there are three elements that sum to zero.\n    return (set.size === 3) && set.has(0);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "for(let i = 0; i < l.length; i++){\n        for(let j = 0; j < l.length; j++){\n            for(let k = 0; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0 && i != j && j != k && i != k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "// ... your code here ...\n    l.sort(function(a, b){return a-b});\n    var result = false;\n    var i = 0;\n    while(i < l.length){\n        var j = i + 1;\n        var k = l.length - 1;\n        while(j < k){\n            if(l[i] + l[j] + l[k] == 0){\n                result = true;\n                break;\n            }\n            else if(l[i] + l[j] + l[k] < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n        i++;\n    }\n    return result;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunction do_algebra(operator, operand){\n",
    "task_id": "160",
    "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n",
    "simplified_intent": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
    "snippet": [
      "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(operator == \"+\" || operator == \"-\" || operator == \"*\" || operator == \"/\"){\n\t\treturn eval(eval(operand[0]) + eval(operand[1]));\n\t}\n\tif(operator == \"**\"){\n\t\treturn Math.pow(eval(operand[0]), eval(operand[1]));\n\t}\n}\n<|/ file dstars=0 filename=main.js |>",
    "grade-0": {
      "execution": 0
    },
    "1": "//The result of the algebra operation\n  var result = 0;\n\n  //Loop through all the operands of the operand\n  for (var i = 0; i < operand.length; i++){\n    //Do the math for each operand\n    switch(operator[i]){\n      case '+':\n        //Add two operands\n        result += operand[i];\n        break;\n      case '-':\n        //Subtract two operands\n        result -= operand[i];\n        break;\n      case '*':\n        //Multiply two operands\n        result *= operand[i];\n        break;\n      case '//':\n        //Floor division\n        result /= operand[i];\n        break;\n      case '**':\n        //Exponentiation\n        result *= operand[i];\n    }\n  }\n\n  //Return the result of the algebra\n  return result;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "console.log(\"do_algebra\", operator, operand);\n\tvar op = operator;\n\tvar res = operand[0];\n\tfor (var i = 1; i < operand.length; i++){\n\t\tif (op === '+'){\n\t\t\tres = res + operand[i];\n\t\t}\n\t\telse if (op === '-'){\n\t\t\tres = res - operand[i];\n\t\t}\n\t\telse if (op === '*'){\n\t\t\tres = res * operand[i];\n\t\t}\n\t\telse if (op === '//'){\n\t\t\tres = res / operand[i];\n\t\t}\n\t\telse if (op === '**'){\n\t\t\tres = Math.pow(res, operand[i]);\n\t\t}\n\t\telse{\n\t\t\tconsole.log(\"do_algebra: invalid operator for list\", operator);\n\t\t\treturn;\n\t\t}\n\t}\n\treturn res;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let str = '';\n    for(let i = 0; i < operand.length; i++){\n        str += `${operand[i]} ${operator[i]} `;\n    }\n    str += operand[operand.length - 1];\n    return eval(str);\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "let operandArray = [];\n    let operatorArray = [];\n    let result;\n    let tempOperand = 0;\n    let tempOperator = 0;\n    for(let i = 0; i < operand.length; i++){\n        operandArray.push(operand[i]);\n    }\n    for(let i = 0; i < operator.length; i++){\n        operatorArray.push(operator[i]);\n    }\n    for(let i = 0; i < operatorArray.length; i++){\n        if(operatorArray[i] === '*' || operatorArray[i] === '/'){\n            if(operatorArray[i] === '*'){\n                result = operandArray[i] * operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n            else if(operatorArray[i] === '/'){\n                result = operandArray[i] / operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    for(let i = 0; i < operatorArray.length; i++){\n        if(operatorArray[i] === '+' || operatorArray[i] === '-'){\n            if(operatorArray[i] === '+'){\n                result = operandArray[i] + operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n            else if(operatorArray[i] === '-'){\n                result = operandArray[i] - operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    return result;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let res = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        let opr = operator[i];\n        let num = operand[i+1];\n        if(opr === '+'){\n            res += num;\n        }\n        else if(opr === '-'){\n            res -= num;\n        }\n        else if(opr === '*'){\n            res *= num;\n        }\n        else if(opr === '//'){\n            res = Math.floor(res / num);\n        }\n        else if(opr === '**'){\n            res = Math.pow(res, num);\n        }\n    }\n    return res;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n",
    "task_id": "63",
    "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n",
    "simplified_intent": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
    "snippet": [
      "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n == 0){\n    return 0;\n  }else if (n == 1){\n    return 1;\n  }else{\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let fibfib = 1;\n    while(n){\n        fibfib += fibfib;\n        n = n - 1;\n    }\n    return fibfib;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n == 0 || n == 1) return 0;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "// TODO: Implement me!\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    if(n >= 3){\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if(n == 0)\n        return 0;\n    if(n == 1)\n        return 0;\n    if(n == 2)\n        return 1;\n    var first = 0;\n    var second = 0;\n    var third = 1;\n    var sum = 0;\n    for(var i = 3; i <= n; i++){\n        sum = first + second + third;\n        first = second;\n        second = third;\n        third = sum;\n    }\n    return sum;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "// Write code here\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nfunction concatenate(strings){\n",
    "task_id": "28",
    "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n",
    "simplified_intent": "Concatenate list of strings into a single string",
    "snippet": [
      "  return strings.join('');\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "let str = '';\n  for(const s of strings){\n    str += s;\n  }\n  return str;\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "return strings.reduce(function(previousValue, currentValue, currentIndex, array) {\n        return previousValue + currentValue;\n    });\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (strings.length === 0) {\n        return '';\n    }\n\n    var string = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        string += strings[i];\n    }\n\n    return string;\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "let newString = '';\n  for (let i = 0; i < strings.length; i++){\n    newString += strings[i];\n  }\n  return newString;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return strings.reduce(\n        function(accumulator, value){\n            return accumulator + value;\n        }\n    )\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var result = \"\";\n\tfor(var i = 0; i < strings.length; i++){\n\t\tresult += strings[i];\n\t}\n\treturn result;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n",
    "task_id": "13",
    "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n",
    "simplified_intent": "Return a greatest common divisor of two integers a and b",
    "snippet": [
      "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(b == 0) return a;\n  if(b == 1) return a;\n  return greatest_common_divisor(b, a % b);\n}\n\nvar primes = {};",
    "grade-0": {
      "execution": 0
    },
    "1": "if(b == 0)\n    return a;\n  if(b == 1)\n    return a;\n  if(a%b == 0)\n    return greatest_common_divisor(b, a % b);\n  return greatest_common_divisor(b, a % b + b%a);\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if (b === 0) {\n        return a;\n    }\n    if (a === 0) {\n        return b;\n    }\n    while (1) {\n        var m = a % b;\n        if (m === 0) {\n            return b;\n        }\n        a = b;\n        b = m;\n    }\n}\n},{}],12:[function(require,module,exports){\nvar base = require('./base.js');\nvar big = require('./big');\n\nvar digits = '0123456789abcdef';\nvar digits_length = digits.length;",
    "grade-2": {
      "execution": 0
    },
    "3": "var divisor = 2,\n        greatestDivisor = 1;\n\n    //if u pass a -ve number this will not work. fix it dude!!\n    if (a < 2 || b < 2)\n        return 1;\n\n    while(a >= divisor && b >= divisor){\n        if(a %divisor == 0 && b% divisor ==0){\n            greatestDivisor = divisor;\n        }\n        divisor++;\n    }\n    return greatestDivisor;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "if(b == 0){\n\t\treturn a;\n\t}\n\telse{\n\t\treturn greatest_common_divisor(b, a % b);\n\t}\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var divisor = 2, \n      greatestDivisor = 1;\n\n  //if u pass a -ve number this will not work. fix it dude!!\n  if (a < 2 || b < 2)\n     return 1;\n  \n  while(a >= divisor && b >= divisor){\n   if(a %divisor == 0 && b% divisor ==0){\n      greatestDivisor = divisor;      \n    }\n   divisor++;\n  }\n  return greatestDivisor;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case(string){\n",
    "task_id": "27",
    "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n",
    "simplified_intent": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
    "snippet": [
      "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return string.split('').map(function (char){\n    return char.toUpperCase() === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase()\n  }).join('')\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var strArr = string.split('');\n    strArr.forEach(function (val, index){\n        if(val.toLowerCase() === val){\n            strArr[index] = val.toUpperCase();\n        }\n    });\n    return strArr.join('');\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "switch(string){\n        case 'A':\n            return 'a';\n        case 'a':\n            return 'A';\n        case '\u00c0':\n            return '\u00c0';\n        case '\u00e0':\n            return '\u00e0';\n        case '\u00e8':\n            return '\u00e8';\n        case '\u00e9':\n            return '\u00e9';\n        case '\u00ec':\n            return '\u00ec';\n        case '\u00ed':\n            return '\u00ed';\n        case '\u00f2':\n            return '\u00f2';\n        case '\u00f3':\n            return '\u00f3';\n        case '\u00f9':\n            return '\u00f9';\n        case '\u00fa':\n            return '\u00fa';\n        case '\u00c0\u00c0':\n            return '\u00c0\u00c0';\n        case '\u00e0\u00c0':\n            return '\u00e0\u00c0';\n        case '\u00e8\u00e8':\n            return '\u00e8\u00e8';\n        case '\u00e9\u00e8':\n            return '\u00e9\u00e8';\n        case '\u00ec\u00ec':\n            return '\u00ec\u00ec';\n        case '\u00ed\u00ec':\n            return '\u00ed\u00ec';\n        case '\u00f2\u00f2':\n            return '\u00f2\u00f2';\n        case '\u00f3\u00f2':\n            return '\u00f3\u00f2';\n        case '\u00f9\u00f9':\n            return '\u00f9\u00f9';\n        case '\u00fa\u00f9':\n            return '\u00fa\u00f9';\n        case '\u00c0\u00e8':\n            return '\u00c0\u00e8';\n        case '\u00e0\u00e8':\n            return '\u00e0\u00e8';\n        case '\u00e8\u00ec':\n            return '\u00e8\u00ec';\n        case '\u00e9\u00ec':\n            return '\u00e9\u00ec';\n        case '\u00ec\u00f2':\n            return '\u00ec\u00f2';\n        case '\u00ed\u00f2':\n            return '\u00ed\u00f2';\n        case '\u00f2\u00f9':\n            return '\u00f2\u00f9';\n        case '\u00f3\u00f9':\n            return '\u00f3\u00f9';\n        case '\u00f9\u00ec':\n            return '\u00f9\u00ec';\n        case '\u00fa\u00ec':\n            return '\u00fa\u00ec';\n        case '\u00c0\u00ec':\n            return '\u00c0\u00ec';\n        case '\u00e0\u00ec':\n            return '\u00e0\u00ec';\n        case '\u00e8\u00f2':\n            return '\u00e8\u00f2';\n        case '\u00e9\u00f2':\n            return '\u00e9\u00f2';\n        case '\u00ec\u00f9':\n            return '\u00ec\u00f9';\n        case '\u00ed\u00f9':\n            return '\u00ed\u00f9';\n        case '\u00f2\u00ec':\n            return '\u00f2\u00ec';\n        case '\u00f3\u00ec':\n            return '\u00f3\u00ec';\n        case '\u00f9\u00f2':\n            return '\u00f9\u00f2';\n        case '\u00fa\u00f2':\n            return '\u00fa\u00f2';\n        case '\u00c0\u00f2':\n            return '\u00c0\ufffd",
    "grade-2": {
      "execution": 0
    },
    "3": "var str = string.split('');\n  for(i = 0; i < str.length; i++){\n    if(str[i] == str[i].toUpperCase()){\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i].toUpperCase();\n    }\n  }\n  return str.join('');\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "var newString = '';\n    for (i=0; i<string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var splitString = string.split(\"\");\n    var newString = \"\";\n    for (var i = 0; i < splitString.length; i++){\n        if (splitString[i] === splitString[i].toUpperCase()){\n            newString += splitString[i].toLowerCase();\n        } else {\n            newString += splitString[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x, n){\n",
    "task_id": "76",
    "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n",
    "simplified_intent": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
    "snippet": [
      "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(x==n) return true;\n\tif(Math.abs(x)<=1&&Math.abs(n)<=1) return true;\n\tif(x<0 || n<0) return false;\n\tif(n==0) return false;\n\tif(n==1) return false;\n\tif(n==2) return (x==1);\n\tif(n==4) return (x==1);\n\tif(n==8) return (x==1);\n\tif(n==16) return (x==1);\n\tif(n==32) return (x==1);\n\tif(n==64) return (x==1);\n\tif(n==128) return (x==1);\n\tif(n==256) return (x==1);\n\treturn false;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "if ( n === 0 || n === undefined )\n    return false\n  \n  if ( n === 1 )\n    return ( x === 1 )\n  \n  return ( x ** n === x )\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "if(n>x){\n        return false;\n    }\n    if(n==1 || n==0){\n        return true;\n    }\n    var result = x;\n    var counter = 0;\n    while(counter<n){\n        counter++;\n        result = result*x;\n    }\n    return result;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(x==n){\n        return true;\n    }\n    let product = 0;\n    let i = 2;\n    while(product < x){\n        product = n**i;\n        if(product == x){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "}",
    "grade-4": {
      "execution": 0
    },
    "5": "return Number.isInteger(Math.log2(x) / Math.log2(n));\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n// Output: [1]\nfunction minPath(grid, k){\n",
    "task_id": "129",
    "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n",
    "simplified_intent": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
    "snippet": [
      "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (grid.length < 2) { return []}\n    var res = [], curr = grid[0][0], i = 0; \n    var len = grid.length;\n    while (len > i){\n        var cells = grid[i];\n        if (cells.length === k){\n            res[i] = cells;\n            i++;\n        } else if (cells.length > k){\n            var cur = cells[0], next;\n            var ls = cells.slice(), ln = ls.length, left = cells.slice(0, k);\n            for (var i = 0; i < k; i++){\n                next = cells[i+1];\n                if (next === undefined){\n                    next = cells[Math.min(i, cells.length - 1)];\n                }\n                var index = ls.indexOf( cur );\n                if (index >= 0){\n                    ls[index].push(next);\n                } else {\n                    ls.push([cur]);\n                    ls.push(next.slice());\n                }\n                cur = next;\n            }\n            if (ln === k){\n                res[i] = cells;\n            } else {\n                res[i] = ls.map(function (row,i){\n                    return row.join(' ');\n                });\n            }\n        }\n        len--;\n    }\n    return res;\n}\nvar sol = minPath([ [1,2,3], [4,5,6], [7,8,9]], 3);\nvar sol = minPath([ [5,9,3], [4,1,6], [7,8,2]], 1);",
    "grade-0": {
      "execution": 0
    },
    "1": "// We are starting from the top left corner of the grid, \n  // going through the cells with increasing row and increasing column (not necessarily distinct).\n  // At each iteration (iteration = 1 .. N), we will take the minimum value from the \n  // cells that share the edge with the current cell (cell (i, j)).\n  // At each iteration, we will remove that minimum value from all the cells that\n  // share the edge with the current cell, and then add the new value to the current\n  // cell (cell (i, j)), and move onto the next iteration of the algorithm.\n  // We will keep doing this until we have covered all cells in the grid.\n  // We keep track of the minimum path that we currently have by appending all the\n  // values in the current path as we move through the grid and we store the minimum\n  // path for each iteration, then return the min path that we found at the end of \n  // the algorithm.\n  const n = grid.length\n  let minPath = []\n\n  for(let i = 1; i < n; i++){\n    let minValue = grid[0][i]\n    for(let j = 1; j < n; j++){\n      if(grid[i][j] < minValue){\n        minValue = grid[i][j]\n      }\n    }\n    for(let j = 0; j < n; j++){\n      if(grid[i][j] < minValue){\n        minPath.push(grid[i][j])\n      }\n    }\n  }\n\n  // console.log(minPath)\n  return minPath\n}\n\nlet minPath = function(grid, k) {\n  // We are starting from the top left corner of the grid, \n  // going through the cells with increasing row and increasing column (not necessarily distinct).\n  // At each iteration (iteration = 1 .. N), we will take the minimum value from the \n  // cells that share the edge with the current cell (cell (i, j)).\n  // At each iteration, we will remove that minimum value from all the cells that\n  // share the edge with the current cell, and then add the new value to the current\n  // cell (cell (i, j)), and move onto the next iteration of the algorithm.\n  // We will keep doing this until we have covered all cells in the grid.\n  // We keep track of the minimum path that we currently have by appending all the\n  // values in the current path as we move through the grid and we store the minimum\n  // path for each iteration, then return the min path that we found at the end of \n  // the algorithm.\n  const n = grid.length\n  let minPath = []\n\n  for(let i = 1; i < n; i++){\n    let minValue = grid[0][i]\n    for(let j = 1; j < n; j++){\n      if(grid[i][j] < minValue){\n        minValue = grid[i][j]\n      }\n    }\n    for(let j = 0; j < n; j++){",
    "grade-1": {
      "execution": 0
    },
    "2": "var rows=grid.length;\n    var columns=grid[0].length;\n    for(var i=1;i<rows;i++){\n        for(var j=1;j<columns;j++){\n            if(grid[i][j]!==grid[i-1][j-1]){\n                var nums=[];\n                nums.push(grid[i][j]);\n                nums=nums.concat(minPath(grid,k-1));\n                if(nums.indexOf(grid[i][j])===-1){\n                    nums.push(grid[i][j]);\n                }\n                return nums;\n            }\n        }\n    }\n    return [];\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "}",
    "grade-3": {
      "execution": 0
    },
    "4": "var n = grid.length;\n\tvar m = grid[0].length;\n\tvar visited = new Array(n);\n\tfor(var i = 0; i < n; i++){\n\t\tvisited[i] = new Array(m);\n\t\tfor(var j = 0; j < m; j++){\n\t\t\tvisited[i][j] = false;\n\t\t}\n\t}\n\tvar res = [];\n\tvar step = k;\n\tvar dx = [0, 0, 1, -1];\n\tvar dy = [1, -1, 0, 0];\n\tfor(var i = 0; i < n; i++){\n\t\tfor(var j = 0; j < m; j++){\n\t\t\thelper(grid, i, j, step, visited, res, dx, dy);\n\t\t}\n\t}\n\tconsole.log(res);\n\treturn res;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "const values = [];\n  const DFS = (row, col, count) => {\n    if(grid[row][col] === null) return;\n    values.push(grid[row][col]);\n    if(count === k) return;\n    const temp = grid[row][col];\n    grid[row][col] = null;\n    if(row > 0) DFS(row - 1, col, count + 1);\n    if(row < grid.length - 1) DFS(row + 1, col, count + 1);\n    if(col > 0) DFS(row, col - 1, count + 1);\n    if(col < grid[0].length - 1) DFS(row, col + 1, count + 1);\n    grid[row][col] = temp;\n  }\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[0].length; j++){\n      DFS(i, j, 0);\n      if(values.length === k) return values;\n      values.length = 0;\n    }\n  }\n  return null;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n",
    "task_id": "26",
    "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n",
    "simplified_intent": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
    "snippet": [
      "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = [];\n    var hash = {};\n    for(var i = 0; i < numbers.length; i++){\n        var current = numbers[i];\n        if(hash[current] === undefined){\n            hash[current] = true;\n            result.push(current);\n        }\n    }\n    return result;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let unique = [...new Set(numbers)];\n  return unique;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var i, j, k;\n\n  numbers = numbers.slice(0);\n  numbers.sort();\n\n  // Iterate through all pairs of numbers, skipping any that have\n  // already been seen\n  for(i = 1; i < numbers.length; i++){\n    j = i - 1;\n    k = i;\n    while(j >= 0){\n      if(numbers[j] === numbers[k]){\n        // Swap the two\n        numbers[j] = numbers[j + 1];\n        numbers[j + 1] = numbers[k];\n        // And leave the k/v entry as is\n        k = j;\n      }\n      j--;\n    }\n  }\n  return numbers;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let output = [];\n    for(let i = 0; i < numbers.length; i++){\n        let found = false;\n        for(let j = 0; j < output.length; j++){\n            if(numbers[i] === output[j]){\n                found = true;\n            }\n        }\n        if(!found){\n            output.push(numbers[i]);\n        }\n    }\n    return output;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "for(i=0; i<=numbers.length; i++){\n        for(j=0; j<=numbers.length; j++){\n            if(numbers[i] === numbers[j] && i !== j){\n                numbers.splice(j, 1);\n            }\n        }\n    }\n    return numbers;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var exists = {},\n        outArr = [],\n        elm;\n\n    for(var i =0; i<numbers.length; i++)\n    {\n        elm = numbers[i];\n        if(!exists[elm])\n        {\n            outArr.push(elm);\n            exists[elm] = true;\n        }\n    }\n    return outArr;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n",
    "task_id": "113",
    "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n",
    "simplified_intent": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
    "snippet": [
      "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(lst.length == 0){\n    return [];\n  }\n  var count_odds = [];\n  var odd_count = 0;\n  for(var i =0; i < lst.length; i++){\n    var str = lst[i].toString();\n    for(var j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        count_odds.push(1);\n      }else{\n        count_odds.push(0);\n      }\n    }\n    odd_count += count_odds.length;\n  }\n  return [odd_count, count_odds];\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let odd = [];\n  let res = [];\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i].match(/\\d/g).length;\n    odd.push(num);\n  }\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i].match(/\\d/g).length;\n    let index = odd.indexOf(num);\n    if(index >= 0){\n      res.push(lst[i].replace(/\\d/g, \"\").length);\n      odd.splice(index, 1);\n    }\n  }\n  return res;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "return lst.map((n) => {\n        let numOdd = lst.reduce((count, current) => {\n            return count + odd_count(current);\n        }, 0);\n        return numOdd + (n.length % 2 === 1);\n    });\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let count = 0;\n    let output = '';\n    for(let i = 0; i < lst.length; i++){\n        for(let k = 0; k < lst[i].length; k++){\n            if(lst[i][k] % 2 === 1){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \"+count+\"n the str\"+i+\"ng \"+i+\" of the \"+i+\"nput.\";\n        output += str;\n        count = 0;\n    }\n    return output;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var result = [];\n  for (var i = 0; i < lst.length; i++){\n    var sub = lst[i].split(\"\");\n    var count = 0;\n    for (var j = 0; j < sub.length; j++){\n      if (sub[j] % 2 == 1){\n        count += 1;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "// your code here\n    let odd_digits = [];\n    for (let str of lst){\n        let str_odd = 0;\n        for (let ch of str){\n            if (parseInt(ch) % 2 !== 0){\n                str_odd++;\n            }\n        }\n        odd_digits.push(str_odd);\n    }\n    let str_arr = [];\n    for (let i = 0; i < lst.length; i++){\n        let str = \"the number of odd elements \" + odd_digits[i] + \"n the str\" + lst[i] + \"ng \" + i + \" of the \" + i + \"nput.\";\n        str_arr.push(str);\n    }\n    return str_arr;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n",
    "task_id": "53",
    "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n",
    "simplified_intent": "Add two numbers x and y",
    "snippet": [
      "  return x + y;\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var r = '';\n\n    if(typeof x === 'number'){\n        r += x + '+';\n    }else if(typeof x === 'string'){\n        if(x.indexOf('+') !== -1 || x.indexOf('-') !== -1){\n            throw new Error('Cannot add string and number!');\n        }else{\n            r += x + '+';\n        }\n    }else{\n        throw new Error('Cannot add number and string!');\n    }\n\n    if(typeof y === 'number'){\n        r += y;\n    }else if(typeof y === 'string'){\n        r += y;\n    }else{\n        throw new Error('Cannot add number and string!');\n    }\n\n    return r;\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "return x + y;\n}",
    "grade-1": {
      "execution": 1
    },
    "2": "if(x < y)\n    return x + y;\n  else\n    return y - x;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "return x + y;\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return x + y;\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "return x + y;\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nfunction make_palindrome(string){\n",
    "task_id": "10",
    "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n",
    "simplified_intent": "Test if given string is a palindrome",
    "snippet": [
      "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(string.length <= 1) return string;\n    let startIndex = 0;\n    let endIndex = (string.length - 1) % 2 === 0 ? string.length - 1 : 0;\n    let palindrome = '';\n    let isPalindrome = false;\n\n    // Iterate through string character by character, checking if it's a palindrome.\n    for(let i = 0; i < string.length; i++){\n        if(string.charAt(i) === string.charAt(endIndex)){\n            palindrome += string.charAt(endIndex);\n            startIndex = endIndex;\n            endIndex = (endIndex + 1) % 2 === 0 ? endIndex - 1 : endIndex;\n        }else{\n            if(startIndex === endIndex){\n                startIndex = endIndex;\n                endIndex = (endIndex + 1) % 2 === 0 ? endIndex - 1 : endIndex;\n            }else{\n                isPalindrome = true;\n            }\n            palindrome += string.charAt(startIndex);\n            palindrome += string.charAt(endIndex);\n            startIndex = endIndex;\n            endIndex = (endIndex + 1) % 2 === 0 ? endIndex - 1 : endIndex;\n        }\n    }\n\n    // Add reverse of startIndex string to the end of palindrome string.\n    palindrome += string.charAt(startIndex);\n    palindrome += string.repeat(startIndex, endIndex - startIndex);\n\n    // Return string if it is a palindrome and doesn't have a reverse string.\n    if(isPalindrome && palindrome !== string){\n        return palindrome;\n    }else{\n        return string;\n    }\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "// If string is empty or only contains spaces, return the same string.\n    if(string === '' || string === ' '){\n        return string;\n    }\n\n    // Get a reverse string and remove all spaces from its end.\n    var reversed_string = string.replace(/\\s+$/, '');\n\n    // Get the longest postfix from the original string that is a palindrome.\n    // Example: abba -> aabb, abba\n    var longest_postfix = reversed_string.split('').reverse().join('');\n\n    // Append the longest postfix to the start of the original string.\n    // Example: aabb -> abba, aabb\n    var prefix_string = string.slice(0, longest_postfix);\n\n    // Return concatenation of original string and reverse of the prefix string.\n    return prefix_string + reversed_string;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let reversed_str = string.replace(/[^a-zA-Z]/g,\"\").split(\"\").reverse().join(\"\");\n    let max_len = Math.max(string.length, reversed_str.length);\n    let palindrome = string.substring(0, max_len);\n    return palindrome + reversed_str.substr(0, max_len);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "// Check if the supplied string is a palindrome.\n  if (is_palindrome(string)){\n    return string;\n  }\n  // Find the longest suffix that is a palindrome.\n  var palindrome_length = 0;\n  var last_index = string.length - 1;\n  for (var i = 0; i < last_index; i++){\n    var string_length = last_index - i + 1;\n    var prefix = string.substring(0, string_length);\n    if (is_palindrome(prefix)){\n      palindrome_length = string_length;\n      break;\n    }\n  }\n  // Append to the end of the string reverse of the prefix that comes before the palindromic suffix.\n  var prefix = string.substring(0, last_index - palindrome_length + 1);\n  var reverse_prefix = reverse(prefix);\n  var result = string + reverse_prefix;\n  return result;\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "//Find the first half of the palindrome.\n    if(string == \"\"){\n        return \"\";\n    }\n    var palindrome = string;\n    var index_at_palindrome = 0;\n    var found_palindrome = false;\n    while(!found_palindrome){\n        var one_half_of_palindrome = palindrome.substring(0,index_at_palindrome);\n        var reverse_of_one_half_of_palindrome = reverse(one_half_of_palindrome);\n        if(palindrome.endsWith(reverse_of_one_half_of_palindrome)){\n            found_palindrome = true;\n        }\n        else{\n            index_at_palindrome++;\n        }\n    }\n    var string_before_palindrome = string.substring(0,index_at_palindrome);\n    var reverse_of_string_before_palindrome = reverse(string_before_palindrome);\n    return string + reverse_of_string_before_palindrome;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "var new_string = \"\";\n    var i = string.length;\n    var pal_length = 0;\n    for(i; i>0; i--){\n        for(j=0; j<i; j++){\n            if(string[j] === string[i-1]){\n                pal_length += 1;\n            }\n            else {\n                break;\n            }\n        }\n        if(pal_length === i){\n            break;\n        }\n        else {\n            pal_length = 0;\n        }\n    }\n    new_string = string + string.slice(pal_length).split(\"\").reverse().join(\"\");\n    return new_string;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n",
    "task_id": "151",
    "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n",
    "simplified_intent": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
    "snippet": [
      "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (lst.length==0){\n        return 0;\n    }\n    \n    var sum_of_squares = 0;\n    var sum = 0;\n    var i;\n    var index;\n    \n    for(i = 0; i < lst.length; i++){\n        index = i;\n        sum += lst[i];\n        if (lst[i] % 2 != 0){\n            sum_of_squares += (lst[index] * (index + 1));\n        }\n    }\n    \n    return sum_of_squares - sum;\n    \n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var sum = 0;\n    for(var i = 0; i< lst.length; i++){\n        if(lst[i]>0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var sum_of_squares = 0;\n    if(lst.length == 0){\n        return 0;\n    }\n\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] < 0){\n            lst[i] = 0;\n        }\n        else if(lst[i] % 2 === 0){\n            sum_of_squares += lst[i]*lst[i];\n        }\n    }\n\n    return sum_of_squares;\n}\n</code>\n<|/ a tags=arrays,javascript,loops dscore=0 |>\n<| a tags=arrays,javascript,loops |>\nA few changes to the code:\n\nInstead of adding 2 numbers at a time in the loop, you can just add them:\n<code>\nvar sum = 0;\nvar len = a.length;\nfor (var i = 0; i < len; i++) {\n    sum += a[i];\n}\nreturn sum;\n</code>\nYou can loop through the array using forEach and use an arrow function\n<code>\nreturn a.forEach((n) => n + n);\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThe issue you're having is that the loop that is iterating through your array of numbers is not incrementing. Every time through the loop, you add 2 to your sum. \n<code>\nvar sum = 0;\nfor (var i = 0; i < myArr.length; i++) {\n    sum += myArr[i] + myArr[i];\n}\n</code>\nSo your code should look something like this:\n<code>\nvar sum = 0;\nfor (var i = 0; i < myArr.length; i++) {\n    sum += myArr[i] + myArr[i];\n}\n</code>\n<|/ a tags=arrays,javascript,loops dscore=0 |>\n<| a |>\nI suggest that you use Array#reduce to calculate the sum, instead of looping through the array.\n\n<code>\nvar array = [2, 3, -5, 7];\n\nvar sum = array.reduce((sum, val) => sum + val, 0);\n\ndocument.write(sum);</code>\n<|/ a tags=arrays,javascript,loops dscore=0 |>\n<| a tags=arrays,javascript,loops |>\nA simple way without using any loops, Math.pow() function or any other functions. You can use the following method to calculate the sum of an array: \n<code>",
    "grade-2": {
      "execution": 0
    },
    "3": "// Write your code here\n    if(lst.length < 1){\n        return 0;\n    }\n    else{\n        return lst.map(x => is_odd(x) ? Math.pow(x, 2) : 0).reduce((x, y) => x + y, 0);\n    }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "return (lst.length == 0) ? 0 : lst.map(n => (typeof n === 'number' && (n >= 0) && (n % 1 === 0)) ? Math.pow(n, 2) : 0).reduce((prev, curr) => prev + curr);\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return lst.reduce((acc,v)=>(v%2==1&&Number.isInteger(v)&&v>0?acc+v*v:acc),0);\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s){\n",
    "task_id": "161",
    "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n",
    "simplified_intent": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
    "snippet": [
      "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "//Your code here\n    \n    var newArray = new Array();\n    var len = s.length;\n    for(var i=0;i<len;i++){\n        if(s[i].length>0){\n            newArray.push(s[i].toUpperCase());\n            newArray.push(s[i].toLowerCase());\n        }else{\n            newArray.push(s[i].toLowerCase());\n        }\n    }\n    return newArray.join(\"\");\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "let newString = s.split('').join('')\n\tlet newString2 = newString.split('@').join('')\n\tlet newString3 = newString2.replace(/[a-z]/g,function(x){\n\t\tif(x==\"@\") return x.toUpperCase()\n\t\telse return x.toLowerCase()\n\t})\n\tlet newString4 = newString3.replace(/[^a-zA-Z]/g,function(x){\n\t\tif(x==\"@\") return x.toUpperCase()\n\t\telse return x.toLowerCase()\n\t})\n\treturn newString4\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "let res = [];\n    let temp = [];\n    let lastIndex = s.length;\n    for (let i = 0; i < lastIndex; i++ ){\n        if (s.charAt(i) !== \" \"){\n            temp.push(s.charAt(i));\n        } else {\n            temp.push(s.charAt(i).toUpperCase());\n        }\n    }\n    for (let i = 0; i < lastIndex; i++){\n        if (temp.indexOf(res.charAt(i)) == -1){\n            res.push(temp.indexOf(res.charAt(i)));\n        }\n    }\n    for (let i = 0; i < res.length; i++){\n        if (s.charAt(res.length - 1) === res.charAt(i)){\n            reverse(res);\n        }\n    }\n    return res.join(\"\");\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "if(s.match(/[a-z]/ig)){\n        return s.split('').map(v => v.match(/[a-z]/i) ? v === v.toUpperCase() ? v.toLowerCase() : v.toUpperCase() : v).join('');\n    }else{\n        return s.split('').reverse().join('');\n    }\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return s.replace(/([a-z])|([A-Z])/g, function(match,p1,p2) {\n    return p1 ? match.toUpperCase() : match.toLowerCase();\n  }).split('').reverse().join('');\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "return s.split('').map(x => x.match(/[a-z]/i) ? x == x.toUpperCase() ? x.toLowerCase() : x.toUpperCase() : x).join('');\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n",
    "task_id": "104",
    "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n",
    "simplified_intent": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
    "snippet": [
      "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var result = []\n\tx.forEach(item => {\n\t\tvar digit = item.toString().split('')\n\t\tdigit = digit.map(item => {\n\t\t\treturn item+\"\"\n\t\t})\n\t\tdigit = digit.filter(item => {\n\t\t\treturn item%2 === 0\n\t\t})\n\t\tif(digit.length == 0){\n\t\t\tresult.push(item)\n\t\t}\n\t})\n\treturn result.sort((a, b) => a-b)\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "return x.filter(function(i){\n\t\treturn x.some(function(el){\n\t\t\treturn i % el === 0;\n\t\t});\n\t});\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "// Create a Set for faster lookup.\n\tvar set = new Set();\n\n\tfor(let i = 0; i < x.length; i++){\n\t\tlet y = x[i];\n\n\t\tfor(let j = 0; j < y.length; j++){\n\t\t\tif(y % 2 === 0 && y > 0){\n\t\t\t\tlet z = parseInt(y.substr(j));\n\t\t\t\tset.add(z);\n\t\t\t}\n\t\t}\n\t}\n\treturn Array.from(set);\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "for(i=0; i<10; i++){\n        if(x[i]%2 != 0){\n            return x;\n        }\n    }\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "var odds = [];\n    for(i = 0; i < x.length; i++){\n        var digits = x[i].toString().split('');\n        for(j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                break;\n            }\n            if(j === digits.length - 1){\n                odds.push(x[i]);\n            }\n        }\n    }\n    return odds.sort(function(a, b){return a - b});\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "function digits(n){\n\t\treturn n.toString().split('');\n\t}\n\tfunction unique(n){\n\t\tvar unique = true;\n\t\tvar d = digits(n);\n\t\tfor(var i = 0; i < d.length; i++){\n\t\t\tif(d[i] % 2 === 0){\n\t\t\t\tunique = false;\n\t\t\t}\n\t\t}\n\t\treturn unique;\n\t}\n\tfunction onlyUnique(value, index, self) { \n    \treturn self.indexOf(value) === index;\n\t}\n\tvar u = x.filter(unique);\n\treturn u.filter(onlyUnique).sort(function(a, b){return a-b});\n}",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n",
    "task_id": "111",
    "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n",
    "simplified_intent": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
    "snippet": [
      "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "var map = {};\n\ttest.split(' ').forEach(function(str){\n\t\tvar c = map[str];\n\t\tmap[str] = c ? c + 1 : 1;\n\t});\n\tvar max;\n\tvar key;\n\tfor(key in map){\n\t\tif (map.hasOwnProperty(key)) {\n\t\t\tvar c = map[key];\n\t\t\tif (max === undefined || c > max){\n\t\t\t\tmax = c;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tmax: max,\n\t\tpairs: []\n\t};\n}",
    "grade-0": {
      "execution": 0
    },
    "1": "var words = test.split(\" \");\n    var histo = {};\n    var max = 0; \n    for(var i=0; i<words.length; i++){\n        var str = words[i];\n        var letter = str.charAt(0).toLowerCase();\n        if(histo[letter] == null) histo[letter] = 1;\n        else histo[letter]++;\n        if(histo[letter] > max){\n            max = histo[letter];\n        }\n    }\n    return histo;\n}",
    "grade-1": {
      "execution": 0
    },
    "2": "var result = {};\n\t\n\tif(test === '') return result;\n\n\tvar chars = test.split(' ');\n\t\n\tchars.forEach(function(letter){\n\t\tletter = letter.toLowerCase();\n\t\tvar count = result[letter] ? result[letter] + 1 : 1;\n\t\tresult[letter] = count;\n\t});\n\n\treturn result;\n}",
    "grade-2": {
      "execution": 0
    },
    "3": "let obj={}\n  let str=test.split(' ')\n  for(let i=0;i<str.length;i++){\n    if(obj[str[i]]===undefined){\n      obj[str[i]]=1\n    }else{\n      obj[str[i]]+=1\n    }\n  }\n  return obj\n}",
    "grade-3": {
      "execution": 0
    },
    "4": "//Split the string into array of chars\n    let arr = test.split(' ');\n    let ocurrence = {};\n\n    //Go through each char and add it to ocurrence object if it doesn't exist, or increment the count if it does\n    for(let i = 0; i < arr.length; i++){\n        if(!ocurrence[arr[i]]){\n            ocurrence[arr[i]] = 1;\n        }else{\n            ocurrence[arr[i]] += 1;\n        }\n    }\n\n    let maxValue = Math.max(...Object.values(ocurrence));\n    let maxKeys = [];\n\n    //Add to maxKeys all keys whose values are the same as maxValue\n    for(let key in ocurrence){\n        if(ocurrence[key] === maxValue){\n            maxKeys.push(key);\n        }\n    }\n\n    //Go through maxKeys and delete every key that is not a maxKey\n    for(let key in ocurrence){\n        if(!maxKeys.includes(key)){\n            delete ocurrence[key];\n        }\n    }\n\n    return ocurrence;\n}",
    "grade-4": {
      "execution": 0
    },
    "5": "let words = test.split(' ');\n    let word_count = {};\n    for(let i = 0; i < words.length; i++){\n        if(word_count[words[i]]){\n            word_count[words[i]] += 1;\n        }else{\n            word_count[words[i]] = 1;\n        }\n    }\n    let result = {};\n    let max = 0;\n    for(let j in word_count){\n        if(word_count[j] > max){\n            max = word_count[j];\n        }\n    }\n    for(let k in word_count){\n        if(word_count[k] === max){\n            result[k] = max;\n        }\n    }\n    return result;\n}",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings, substring){\n",
    "task_id": "7",
    "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n",
    "simplified_intent": "Filter an input list of strings only for ones that contain given substring",
    "snippet": [
      "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return strings.filter(function(string){\n        return string.indexOf(substring) !== -1\n    })\n}",
    "grade-0": {
      "execution": 1
    },
    "1": "return strings.filter(function(x){\n\t\treturn x.includes(substring);\n\t});\n}",
    "grade-1": {
      "execution": 1
    },
    "2": "return strings.filter(function(x){\n    return x.indexOf(substring) !== -1;\n  });\n}",
    "grade-2": {
      "execution": 1
    },
    "3": "return strings.filter(function(x){return x.indexOf(substring) != -1;});\n}",
    "grade-3": {
      "execution": 1
    },
    "4": "return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}",
    "grade-4": {
      "execution": 1
    },
    "5": "var new_strings = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n}",
    "grade-5": {
      "execution": 1
    }
  }
]