[
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n    // 15\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static int closestInteger(String value) {\n",
    "task_id": "99",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n",
    "simplified_intent": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
    "snippet": [
      "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int number = Integer.parseInt(value);\n        if (number > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException();\n        }\n        BigDecimal decimal = new BigDecimal(number);\n        BigDecimal rounded = decimal.setScale(0, RoundingMode.UP);\n        int roundedValue = rounded.intValueExact();\n        return roundedValue;",
    "grade-0": {
      "execution": 0
    },
    "1": "double d = Double.parseDouble(value);\n        double d1 = Math.floor(d * 1000.0);\n        double d2 = d - (d1 * 1000.0);\n        return (int) (d2);",
    "grade-1": {
      "execution": 0
    },
    "2": "// Complete this function\n        return 0;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Convert value to double\n        // Get an array of integers representing the range of values\n        // between the integers that surround the value\n        // Filter the array by the value\n        // Return the closest integer\n        return 0;",
    "grade-3": {
      "execution": 0
    },
    "4": "double val = Double.parseDouble(value);\n        if (val == Math.floor(val)) {\n            return (int) val;\n        }\n        double floor = Math.floor(val);\n        double ceil = Math.ceil(val);\n        if (val - floor < ceil - val) {\n            return (int) floor;\n        }\n        return (int) ceil;",
    "grade-4": {
      "execution": 0
    },
    "5": "// write your code here\n        return -1;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n    // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example 2\") == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n    public static String fixSpaces(String text) {\n",
    "task_id": "140",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n",
    "simplified_intent": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
    "snippet": [
      "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return text.\n            replaceAll(\" \", \"_\").\n            replaceAll(\"\\\\s{2,}\", \"-\");",
    "grade-0": {
      "execution": 0
    },
    "1": "StringBuilder sb = new StringBuilder(text);\n        boolean allSpace = true;\n        for(int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n            if(Character.isSpaceChar(c)) {\n                allSpace = false;\n            } \n            if(allSpace) {\n                sb.setCharAt(i, Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "return text.replaceAll(\"\\\\s+\",\"_\").replaceAll(\"\\\\s{2,}\",\"-\");",
    "grade-2": {
      "execution": 0
    },
    "3": "if (text == null) return null;\n        if (text.isEmpty()) return \"\";\n        String ans = text.charAt(0) == ' ' ? \"_\" : \"\";\n        StringBuilder newText = new StringBuilder(ans);\n        for (int i = 1; i < text.length(); i++) {\n            char c = text.charAt(i);\n            char c1 = text.charAt(i - 1);\n            if (c == ' ') {\n                if (c1 == ' ') {\n                    newText.append(\"-\");\n                } else {\n                    newText.append(\"_\");\n                }\n            } else {\n                newText.append(c);\n            }\n        }\n        return newText.toString();",
    "grade-3": {
      "execution": 0
    },
    "4": "return \"\";",
    "grade-4": {
      "execution": 0
    },
    "5": "return text.replaceAll(\"\\\\s+\", text.matches(\"\\\\s+.*\") ? \"-\" : \"_\");",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array of numbers as input and returns \n    // the number of elements in the array that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static int specialFilter(ArrayList<Integer> nums) {\n",
    "task_id": "146",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n",
    "simplified_intent": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
    "snippet": [
      "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Complete this function\n        int counter = 0;\n        \n        for(int i : nums){\n            if (i > 10){\n                if (i % 2 == 1 && nums.get(nums.size() - 1) % 2 == 1){\n                    counter++;\n                }\n            }\n        }\n        return counter;",
    "grade-0": {
      "execution": 0
    },
    "1": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                for (int j = i; j < nums.size(); j++) {\n                    if (nums.get(j) % 2 != 0 && nums.get(j) % 2 != 1) {\n                        if (nums.get(j) > 10) {\n                            int n = nums.get(j) - 10;\n                            if (nums.get(i) % 2 == 0 && nums.get(j) % 2 == 1) {\n                                if (n > 10 && nums.get(j) > 10) {\n                                    count++;\n                                    break;\n                                }\n                            } else {\n                                if (n > 10) {\n                                    count++;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "grade-1": {
      "execution": 0
    },
    "2": "System.out.println(nums);\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                if (nums.get(i) % 2 == 0) {\n                    even += 1;\n                } else {\n                    odd += 1;\n                }\n            }\n        }\n        return odd * even;",
    "grade-2": {
      "execution": 0
    },
    "3": "int count = 0;\n      for (int num : nums) {\n        if (num > 10 && (num / 10) % 2 != 0 && num % 2 != 0) {\n          count++;\n        }\n      }\n      return count;",
    "grade-3": {
      "execution": 0
    },
    "4": "int counter = 0;\n        for (int num : nums) {\n            if (num > 10 && (num / 10) % 2 != 0 && num % 2 != 0) {\n                counter++;\n            }\n        }\n        return counter;",
    "grade-4": {
      "execution": 0
    },
    "5": "int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (10 < nums.get(i)) {\n                String numStr = nums.get(i).toString();\n                Integer firstDigit = Character.getNumericValue(numStr.charAt(0));\n                Integer lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                if (0 == firstDigit % 2 && 0 == lastDigit % 2) {\n                    result++;\n                }\n            }\n        }\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n",
    "task_id": "153",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n",
    "simplified_intent": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
    "snippet": [
      "        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int strongest = -1;\n        String strongest_extension = null;\n        for (String extension : extensions) {\n            int index = extension.indexOf('_');\n            int CAP = index+1;\n            int SM = extension.length()-CAP;\n            Double strength = CAP - SM;\n            if((strength>strongest)&&(index>=0)) {\n                strongest = strength;\n                strongest_extension = extension;\n            }\n        }\n        if (strongest == -1) {\n            throw new IllegalArgumentException(\"No extension found\");\n        }\n        return class_name + \".\" + strongest_extension;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<String> extensionsSort = new ArrayList<>(extensions);\n        Collections.sort(extensionsSort, Comparator.comparingInt(x -> x.length() - x.toUpperCase().length()));\n        extensions.clear();\n        for(String extension: extensionsSort) {\n            if(extension.length() > class_name.length()) {\n                String extensionWithoutCaps = extension.substring(class_name.length(), extension.length() - 1);\n                extension = extensionWithoutCaps.substring(0);\n                extensions.add(extension);\n            }\n        }\n        double bestStrength = 0.0;\n        for(String extension: extensions) {\n            double extensionStrength = extension.length() - class_name.length();\n            if(extensionStrength > bestStrength) {\n                bestStrength = extensionStrength;\n            }\n        }\n        String extension = extensions.get(0);\n        return class_name + extension;",
    "grade-1": {
      "execution": 0
    },
    "2": "// Your code goes here\n        int maxS = 0;\n        int maxC = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            int s = extensions.get(i).length();\n            int c = class_name.toLowerCase().replace(Character.toUpperCase(extensions.get(i).charAt(0)), '').length();\n            if (c > maxC) {\n                maxC = c;\n            }\n            if (s > maxS) {\n                maxS = s;\n            }\n        }\n        return class_name + \".\" + extensions.get(extensions.indexOf(class_name + \".\") + 1).toLowerCase();",
    "grade-2": {
      "execution": 0
    },
    "3": "String rv = class_name;\n        // Your code here\n        String strongestExtension = null;\n        Double strongest = 0.0;\n        for (String ext : extensions) {\n            Double strength = 0.0;\n            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n                    strength += 1;\n                } else {\n                    strength -= 1;\n                }\n            }\n            if (strongestExtension == null || strength > strongest) {\n                strongestExtension = ext;\n                strongest = strength;\n            }\n        }\n        rv += \".\" + strongestExtension;\n        return rv;",
    "grade-3": {
      "execution": 0
    },
    "4": "int min_strength = Integer.MAX_VALUE;\n        String strongest_extension = \"\";\n        for (String e : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (int i = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i))) {\n                    CAP++;\n                } else {\n                    SM++;\n                }\n            }\n            int strength = CAP - SM;\n            if (strength < min_strength) {\n                min_strength = strength;\n                strongest_extension = e;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
    "grade-4": {
      "execution": 0
    },
    "5": "// Your code here\n        // ...",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n    // 'one three five'\n    public static String sortNumbers(String numbers) {\n",
    "task_id": "19",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n",
    "simplified_intent": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
    "snippet": [
      "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int[] values = new int[numbers.length()];\n        int i = 0;\n        for (String value : numbers.split(\"\\\\s+\")) {\n            values[i++] = Integer.parseInt(value);\n        }\n        Arrays.sort(values);\n        StringBuilder builder = new StringBuilder();\n        for (int value : values) {\n            builder.append(value);\n        }\n        return builder.toString();",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> numberArray = Arrays.stream(numbers.split(\"\\\\s+\"))\n                                             .map(Integer::valueOf).collect(Collectors.toList());\n        Collections.sort(numberArray);\n        return numberArray.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "int[] arr = new int[numbers.length()];\n        for(int i = 0; i < numbers.length(); i++) {\n            arr[i] = Integer.parseInt(numbers[i]);\n        }\n        Arrays.sort(arr);\n        return Arrays.toString(arr);",
    "grade-2": {
      "execution": 0
    },
    "3": "// TODO: complete this function\n\n      return \"\";",
    "grade-3": {
      "execution": 0
    },
    "4": "// >>> numbers.split(' ')\n        // ['three', 'one', 'five']\n        String[] array = numbers.split(\" \");\n        // >>> Integer.parseInt('3')\n        // 3\n        // >>> Integer.parseInt('1')\n        // 1\n        // >>> Integer.parseInt('5')\n        // 5\n        List<Integer> list = Arrays.stream(array).map(Integer::parseInt).collect(Collectors.toList());\n        // >>> list.sort()\n        // >>> list\n        // [1, 3, 5]\n        Collections.sort(list);\n        // >>> ' '.join(['1', '3', '5'])\n        // '1 3 5'\n        return String.join(\" \", list.stream().map(String::valueOf).collect(Collectors.toList()));",
    "grade-4": {
      "execution": 0
    },
    "5": "// TODO: Implement this function\n        return \"\";",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static int maxFill(ArrayList<ArrayList<Integer>> grid, int capacity) {\n",
    "task_id": "115",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n",
    "simplified_intent": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
    "snippet": [
      "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int count = 0;\n        int capacity1 = capacity;\n        for (int i = 0; i < grid.size(); i++) {\n            int row0 = grid.get(i).get(0) - 1;\n            int row1 = grid.get(i).get(1) - 1;\n            for (int j = 0; j < grid1.size(); j++) {\n                int col0 = grid1.get(i).get(0) - 1;\n                int col1 = grid1.get(i).get(1) - 1;\n                if (grid1.get(i).get(2) != 1) {\n                    if (row0 >= 0 && row1 >= 0 && col0 >= 0 && col1 >= 0) {\n                        //if (col0 >= col1) {\n                            if (grid1.get(j).get(2) != 1) {\n                                if (grid1.get(j).get(1) > capacity) {\n                                    capacity = grid1.get(j).get(1);\n                                }\n                                grid1.get(j).set(0, grid1.get(j).get(1) - 1);\n                                grid1.get(j).set(1, capacity);\n                                if (capacity >= capacity1) {\n                                    capacity1 = capacity;\n                                    count++;\n                                    capacity = capacity;\n                                }\n                                capacity = capacity - grid1.get(j).get(1);\n                            } else {\n                                grid1.get(j).set(0, grid1.get(j).get(1) - 1);\n                                grid1.get(j).set(1, capacity);\n                                capacity = capacity - grid1.get(j).get(1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "grade-0": {
      "execution": 0
    },
    "1": "PriorityQueue<Unit> pq = new PriorityQueue<>();\n        Unit unit = build(grid, 0, capacity);\n        while (!pq.isEmpty() && unit.bucket() < capacity) {\n            pq.add(unit);\n            unit = build(grid, unit.row() + 1, unit.bucket());\n        }\n        return (pq.isEmpty() ? 0 : Integer.valueOf(unit.bucket()));",
    "grade-1": {
      "execution": 0
    },
    "2": "int max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                if (grid[i][j] == 1) {\n                    int n = maxFill(grid, capacity - grid[i][j]);\n                    if (n > max) {\n                        max = n;\n                    }\n                }\n            }\n        }\n        return max;",
    "grade-2": {
      "execution": 0
    },
    "3": "int ret = 0;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[] rowSum = new int[n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                rowSum[i] += grid.get(i).get(j);\n            }\n        }\n        int max = 0;\n        for (int sum : rowSum) {\n            max = Math.max(max, sum);\n        }\n        for (int i = 0; i < max; i++) {\n            for (int j = 0; j < n; j++) {\n                if (rowSum[j] > 0) {\n                    rowSum[j]--;\n                    ret++;\n                }\n            }\n        }\n        return ret;",
    "grade-3": {
      "execution": 0
    },
    "4": "int n = grid.size();\n        if (n < 1) {\n            return 0;\n        }\n        int m = grid.get(0).size();\n        if (m < 1) {\n            return 0;\n        }\n        int count = 0;\n        int _capacity = capacity;\n        for (int i = 0; i < n; i++) {\n            ArrayList<Integer> row = grid.get(i);\n            int _count = 0;\n            for (int j = 0; j < m; j++) {\n                int cell = row.get(j);\n                if (cell == 1) {\n                    _count++;\n                }\n            }\n            count += _count;\n            if (_count > _capacity) {\n                count += _count - _capacity;\n                _capacity = capacity;\n            } else {\n                _capacity -= _count;\n            }\n        }\n        return count;",
    "grade-4": {
      "execution": 0
    },
    "5": "// Fill all wells to max level,\n        // if capacity is not enough, return -1\n        int waterLevel = 0;\n        int maxRowLength = 0;\n        int maxRowLengthIndex = 0;\n        int maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            if (grid.get(i).size() > maxRowLength) {\n                maxRowLength = grid.get(i).size();\n                maxRowLengthIndex = i;\n            }\n        }\n        for (int i = 0; i < maxRowLength; i++) {\n            if (grid.get(maxRowLengthIndex).get(i) == 1) {\n                maxFill++;\n            }\n        }\n        if (maxFill > capacity) {\n            return -1;\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    waterLevel++;\n                }\n            }\n        }\n        return waterLevel;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array arr of integers, find the minimum number of elements that\n    // need to be changed to make the array palindromic. A palindromic array is an array that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // smallest_change([1,2,3,5,4,7,9,6]) == 4\n    // smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    // smallest_change([1, 2, 3, 2, 1]) == 0\n    public static int smallestChange(ArrayList<Integer> arr) {\n",
    "task_id": "73",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n",
    "simplified_intent": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
    "snippet": [
      "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int count = 0;\n        List<Integer> temp = new ArrayList<>();\n\n        //System.out.println(\"Arraylist size\" + arr.size());\n        for (int i = 0; i < arr.size(); i++) {\n            temp.clear();\n            int min;\n            int newSize;\n            int temp1;\n            int temp2;\n            int temp3;\n            int temp4;\n            // System.out.print(\"arraylist\" + arr.get(i));\n            min = arr.get(i);\n            min = 0;\n            temp.add(min);\n            // System.out.println(\"temp\" + temp);\n            int size = arr.size();\n            while (size > 0) {\n                temp1 = arr.get(size - 1);\n                temp2 = arr[size - 1];\n                temp3 = arr.get(size - 2);\n                temp4 = arr.get(size - 3);\n                min = (temp1 < temp2 ? temp1 : temp2);\n                min = (temp3 < temp4 ? temp3 : temp4);\n                // System.out.println(\"min \" + min);\n                temp.add(min);\n                if (min != arr.get(size - 1)) {\n                    arr.add(min, min);\n                } else {\n                    // System.out.println(\"min \" + min);\n                    arr.remove(size - 1);\n                }\n                size--;\n            }\n            count++;\n            // System.out.println(\"temp \" + temp);\n        }\n        //System.out.println(\"arr \" + arr);\n        // System.out.println(\"count \" + count);\n        return count;",
    "grade-0": {
      "execution": 0
    },
    "1": "int minNumOfChanges = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int minNumOfNonPalindromicChanges = smallestNonPalindromicChanges(arr, i);\n            if (minNumOfNonPalindromicChanges < minNumOfChanges) {\n                minNumOfChanges = minNumOfNonPalindromicChanges;\n            }\n        }\n        return minNumOfChanges;",
    "grade-1": {
      "execution": 0
    },
    "2": "int ns = arr.size();\n        Arrays.sort(arr);\n        int ni = arr.size();\n        int min = 0;\n        boolean found = false;\n        for(int i = 0; i < ni; i++) {\n            int temp = arr[i];\n            if(i != ns - 1 && temp != arr[i - 1]) {\n                min = Math.min(min, i - 1);\n                found = true;\n                arr[i] = temp;\n            }\n        }\n        while(!found && ns != arr.size()) {\n            min = Math.min(min, arr.size());\n            arr.add(0);\n        }\n        return min;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Your code here\n        int n = arr.size();\n        int[][] f = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                f[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            f[i][i] = 0;\n        }\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) != arr.get(i + 1)) {\n                f[i][i + 1] = 1;\n            }\n        }\n        for (int k = 2; k < n; k++) {\n            for (int i = 0; i < n - k; i++) {\n                int j = i + k;\n                f[i][j] = Math.min(f[i + 1][j] + 1, f[i][j - 1] + 1);\n                if (arr.get(i) == arr.get(j)) {\n                    f[i][j] = Math.min(f[i][j], f[i + 1][j - 1]);\n                }\n            }\n        }\n        return f[0][n - 1];",
    "grade-3": {
      "execution": 0
    },
    "4": "int n = arr.size();\n        int[][] smallest = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            smallest[i][i] = 0;\n        }\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) != arr.get(i + 1)) {\n                smallest[i][i + 1] = 1;\n            } else {\n                smallest[i][i + 1] = 0;\n            }\n        }\n        for (int j = 2; j < n; j++) {\n            for (int i = 0; i < n - j; i++) {\n                if (arr.get(i) == arr.get(i + j)) {\n                    smallest[i][i + j] = smallest[i + 1][i + j - 1];\n                } else {\n                    smallest[i][i + j] = Math.min(smallest[i + 1][i + j], smallest[i][i + j - 1]) + 1;\n                }\n            }\n        }\n        return smallest[0][n - 1];",
    "grade-4": {
      "execution": 0
    },
    "5": "if (arr.size() < 2) return 0;\n        int p = 0;\n        int q = arr.size() - 1;\n        int changes = 0;\n        while (p < q) {\n            if (arr.get(p) != arr.get(q)) {\n                ++changes;\n            }\n            ++p;\n            --q;\n        }\n        return changes;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input list of strings only for ones that start with a given prefix.\n    // >>> filter_by_prefix([], 'a')\n    // []\n    // >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    // ['abc', 'array']\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n",
    "task_id": "29",
    "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n",
    "simplified_intent": "Filter an input list of strings only for ones that start with a given prefix.",
    "snippet": [
      "        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<String> filtered = new ArrayList<String>();\n        if (strings == null || prefix == null) {\n            return filtered;\n        }\n        if (strings.isEmpty() || prefix.isEmpty()) {\n            return filtered;\n        }\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                filtered.add(s);\n            }\n        }\n        return filtered;",
    "grade-0": {
      "execution": 1
    },
    "1": "ArrayList<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.startsWith(prefix))\n                result.add(string);\n        }\n        return result;",
    "grade-1": {
      "execution": 1
    },
    "2": "ArrayList<String> result = new ArrayList<>();\n        for (String item : strings) {\n            if (item.startsWith(prefix)) {\n                result.add(item);\n            }\n        }\n        return result;",
    "grade-2": {
      "execution": 1
    },
    "3": "// Implementation\n        return new ArrayList<String>();",
    "grade-3": {
      "execution": 0
    },
    "4": "return strings.stream().filter(t -> t.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));",
    "grade-4": {
      "execution": 1
    },
    "5": "return strings.stream().filter(word -> word.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n    // >>> is_prime(1)\n    // False\n    public static boolean isPrime(int n) {\n",
    "task_id": "31",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n",
    "simplified_intent": "Return true if a given number is prime, and false otherwise.",
    "snippet": [
      "        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "boolean prime = true;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                prime = false;\n                break;\n            }\n        }\n        return prime;",
    "grade-0": {
      "execution": 0
    },
    "1": "boolean result = true;\n        // All even numbers except 2\n        if (n % 2 == 0)\n            return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0)\n                result = false;\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "// This implementation is very fast since it only makes comparisons up\n        // to the square root of the number being tested.\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
    "grade-2": {
      "execution": 0
    },
    "3": "return false;",
    "grade-3": {
      "execution": 0
    },
    "4": "if (n <= 1) return false;\n        int s = (int) Math.sqrt(n);\n        for (int i = 2; i <= s; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
    "grade-4": {
      "execution": 1
    },
    "5": "for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this problem, you will implement a function that takes two lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 a list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    // exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    // It is assumed that the input lists will be non-empty.\n    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n",
    "task_id": "110",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n",
    "simplified_intent": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
    "snippet": [
      "        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Your code goes here\n        int i = 0;\n        int j = lst1.size() - 1;\n        while (i < j) {\n            if (lst1.get(i) % (int) lst2.get(j) == 0) {\n                i++;\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (i == j) return \"YES\";\n        else return \"NO\";",
    "grade-0": {
      "execution": 0
    },
    "1": "List<Integer> even = new ArrayList<Integer>();\n        for (int i = 0; i < lst1.size(); i++) {\n            if(lst1.get(i)%2 == 0) {\n                even.add(lst1.get(i));\n            }\n        }\n\n        for (int i = 0; i < lst2.size(); i++) {\n            if(lst2.get(i)%2 == 0) {\n                even.add(lst2.get(i));\n            }\n        }\n\n        if(even.equals(lst1)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }",
    "grade-1": {
      "execution": 0
    },
    "2": "return \"\";",
    "grade-2": {
      "execution": 0
    },
    "3": "// Write your code here\n        int oddSum = lst1.stream().mapToInt(x -> x).sum();\n        int evenSum = lst2.stream().mapToInt(x -> x).sum();\n        if (oddSum % 2 == 1) {\n            return \"NO\";\n        }\n        return \"YES\";",
    "grade-3": {
      "execution": 0
    },
    "4": "boolean allEven = true;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                allEven = false;\n                break;\n            }\n        }\n        if (allEven) {\n            return \"YES\";\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst1.get(i) % 2 != 0 && lst2.get(j) % 2 == 0) {\n                    int temp = lst1.get(i);\n                    lst1.set(i, lst2.get(j));\n                    lst2.set(j, temp);\n                    allEven = true;\n                    for (int k = 0; k < lst1.size(); k++) {\n                        if (lst1.get(k) % 2 != 0) {\n                            allEven = false;\n                            break;\n                        }\n                    }\n                    if (allEven) {\n                        return \"YES\";\n                    }\n                }\n            }\n        }\n        return \"NO\";",
    "grade-4": {
      "execution": 1
    },
    "5": "if(lst1.stream().allMatch(x -> x % 2 == 0)) return \"YES\";\n        else if(lst2.stream().allMatch(x -> x % 2 == 0)) return \"YES\";\n        else if(lst1.stream().filter(x -> x % 2 == 0).count() >= lst2.stream().filter(x -> x % 2 == 0).count()) return \"YES\";\n        else return \"NO\";",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String brackets) {\n",
    "task_id": "61",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n",
    "simplified_intent": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
    "snippet": [
      "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (brackets.isEmpty())\n            return true;\n        String[] open = brackets.split(\"\\\\(\");\n        String[] close = brackets.split(\"\\\\)\");\n        if (close.length < open.length)\n            return false;\n        for (int i = 0; i < open.length; i++) {\n            if (open[i].isEmpty())\n                continue;\n            int j = close.length-1;\n            while (j > open[i].length-1) {\n                close[j--] = \"\";\n            }\n            while (j > 0 && close[j-1].equals(\"\")) {\n                close[j--] = \"\";\n            }\n            if (!close[j].equals(open[i]))\n                return false;\n        }\n        return true;",
    "grade-0": {
      "execution": 0
    },
    "1": "return brackets.chars().allMatch(c -> c == '(' || c == ')');",
    "grade-1": {
      "execution": 0
    },
    "2": "int len = 0;\n        char openingBracket = 0;\n        char closingBracket = 0;\n        int openBrackets = 0;\n        int closingBrackets = 0;\n        char tempChar = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c != ')' && c != '(') {\n                return false;\n            }\n            openingBracket++;\n            len++;\n            if (openingBracket > closingBracket) {\n                openBrackets++;\n            }\n            if (openingBracket < closingBracket) {\n                closingBrackets++;\n            }\n        }\n        return openBrackets == closingBrackets;",
    "grade-2": {
      "execution": 0
    },
    "3": "int counter = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                counter++;\n            } else {\n                counter--;\n            }\n            if (counter < 0) {\n                return false;\n            }\n        }\n        return counter == 0;",
    "grade-3": {
      "execution": 1
    },
    "4": "Stack<String> stk = new Stack<String>();\n\t\tfor(int i = 0; i < brackets.length(); i++) {\n\t\t\tif(brackets.charAt(i) == '(') {\n\t\t\t\tstk.push(\"(\");\n\t\t\t} else {\n\t\t\t\tif(stk.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tstk.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stk.isEmpty();",
    "grade-4": {
      "execution": 1
    },
    "5": "if (brackets.charAt(0) == ')') {\n            return false;\n        }\n        int left = 0;\n        int right = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (right > left) {\n                return false;\n            }\n        }\n        return left == right;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return length of given string\n    // >>> strlen('')\n    // 0\n    // >>> strlen('abc')\n    // 3\n    public static int strlen(String string) {\n",
    "task_id": "23",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n",
    "simplified_intent": "Return length of given string",
    "snippet": [
      "        return string.length();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return string.chars().filter(c -> Character.isLetter(c)).count();",
    "grade-0": {
      "execution": 0
    },
    "1": "int count = 0;\n        if (string == null || string.length() == 0)\n            return count;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '\\n')\n                count++;\n            else\n                count++;\n        }\n        return count;",
    "grade-1": {
      "execution": 1
    },
    "2": "int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length += 1;\n        }\n        return length;",
    "grade-2": {
      "execution": 1
    },
    "3": "int l = 0;\n        while (string.charAt(l) != '\\0')\n            l++;\n        return l;",
    "grade-3": {
      "execution": 0
    },
    "4": "// The length of the string is an integer in the range of 0 to 2^31 - 1.\n        return string.length();",
    "grade-4": {
      "execution": 1
    },
    "5": "return string.length();",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // encrypt('hi') returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf') returns 'kj'\n    // encrypt('et') returns 'ix'\n    public static String encrypt(String s) {\n",
    "task_id": "89",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n",
    "simplified_intent": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
    "snippet": [
      "        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (s == null) return null;\n        char[] c = s.toCharArray();\n        int length = c.length;\n        char[] result = new char[length];\n        Arrays.fill(result, ' ');\n        Arrays.fill(result, 0, length - 1, c);\n        Collections.reverse(Arrays.copyOfRange(result, 1, length - 1));\n        return String.valueOf(result);",
    "grade-0": {
      "execution": 0
    },
    "1": "// Your code here\n        List<String> list = Arrays.asList(s.split(\"\"));\n        Collections.rotate(list, 2);\n        String ans = \"\";\n        for (String t : list) ans += t;\n        return ans;",
    "grade-1": {
      "execution": 0
    },
    "2": "String[] chars = s.split(\"\");\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i<chars.length; i++) {\n            int index = (chars.length+i)/2;\n            sb.append(chars[index]);\n        }\n        return sb.toString();",
    "grade-2": {
      "execution": 0
    },
    "3": "// complete the function here",
    "grade-3": {
      "execution": 0
    },
    "4": "String output = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int val = s.charAt(i) + (s.charAt(i) % 5) * 2;\n            output += (char)val;\n        }\n        return output;",
    "grade-4": {
      "execution": 0
    },
    "5": "String unencrypted = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted = \"cdefghijklmnopqrstuvwxyzab\";\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            result += encrypted.charAt(unencrypted.indexOf(s.charAt(i)));\n        }\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowels_count(\"abcde\")\n    // 2\n    // >>> vowels_count(\"ACEDY\")\n    // 3\n    public static int vowelsCount(String s) {\n",
    "task_id": "64",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n",
    "simplified_intent": "Add more test cases.",
    "snippet": [
      "        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int count = 0;\n        for(int i =0 ; i < s.length(); i++)\n        {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' ||s.charAt(i) == 'o' || s.charAt(i) == 'u')\n            {\n                count++;\n            }\n        }\n        return count;",
    "grade-0": {
      "execution": 0
    },
    "1": "// Your code here.\n        int vowelCount = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u' || s.charAt(i) == 'y') {\n                vowelCount++;\n            }\n        }\n        return vowelCount;",
    "grade-1": {
      "execution": 0
    },
    "2": "return s.replaceAll(\"[^aeiouAEIOUY]\", \"\").length();",
    "grade-2": {
      "execution": 0
    },
    "3": "int count = 0;\n\tString vowels = \"aeiou\";\n\tchar c;\n\tfor (int i = 0; i < s.length(); i++) {\n\t    c = s.charAt(i);\n\t    if (vowels.indexOf(c) != -1)\n\t\tcount++;\n\t}\n\tif (s.charAt(s.length() - 1) == 'y')\n\t    count++;\n\treturn count;",
    "grade-3": {
      "execution": 0
    },
    "4": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.toLowerCase(c) == 'a' ||\n                Character.toLowerCase(c) == 'e' ||\n                Character.toLowerCase(c) == 'i' ||\n                Character.toLowerCase(c) == 'o' ||\n                Character.toLowerCase(c) == 'u') {\n                count += 1;\n            }\n        }\n        if (Character.toLowerCase(s.charAt(s.length() - 1)) == 'y') {\n            count += 1;\n        }\n        return count;",
    "grade-4": {
      "execution": 1
    },
    "5": "// Put your code here",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    // (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    public static Pair<Integer, Integer> sumProduct(ArrayList<Integer> numbers) {\n",
    "task_id": "8",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n",
    "simplified_intent": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
    "snippet": [
      "        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Integer sum = 0;\n        Integer product = 1;\n        numbers.forEach((e) -> sum += e);\n        numbers.forEach((e) -> product *= e);\n        return new Pair<>(sum, product);",
    "grade-0": {
      "execution": 0
    },
    "1": "// O(1) time complexity, since it just iterates through the list.\n        int sum = 0;\n        int product = 1;\n        for (Integer number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return new Pair<>(sum, product);",
    "grade-1": {
      "execution": 0
    },
    "2": "// If there aren't any numbers in the list, sum and product should be 0 and 1.\n        if (numbers.isEmpty())\n            return new Pair<>(0, 1);\n\n        // Create a pair of numbers to store our answer and to store the sum and product of\n        // the first number in the list and the numbers in the remaining list.\n        Pair<Integer, Integer> pair = new Pair<>(numbers.get(0), numbers.stream()\n            .map(number -> numbers.get(1) + number).getFirst());\n\n        // Add the sum and product of all the remaining numbers in the list to the previous\n        // answer and return it.\n        return pair;",
    "grade-2": {
      "execution": 0
    },
    "3": "return new Pair<Integer, Integer>(\n            numbers.stream().reduce(0, (x, y) -> x + y),\n            numbers.stream().reduce(1, (x, y) -> x * y)\n        );",
    "grade-3": {
      "execution": 0
    },
    "4": "Integer sum = 0;\n      Integer product = 1;\n      for (Integer number : numbers) {\n        sum += number;\n        product *= number;\n      }\n      return new Pair<Integer, Integer>(sum, product);",
    "grade-4": {
      "execution": 0
    },
    "5": "int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return new Pair<Integer, Integer>(sum, product);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    public static int fizzBuzz(int n) {\n",
    "task_id": "36",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n",
    "simplified_intent": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
    "snippet": [
      "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n        Integer counter = Stream.iterate(n / 11, n / 13 -> n / 13).filter(i -> i % 11 == 0 || i % 13 == 0).count();\n        System.out.println(\"counter \" + counter);\n        return counter;",
    "grade-0": {
      "execution": 0
    },
    "1": "int count = 0;\n        while ( n-- > 0 ) {\n            if ( n % 11 == 0 ) count += 1;\n            else if ( n % 13 == 0 ) count += 2;\n            else if ( n % 17 == 0 ) count += 3;\n            else if ( n % 19 == 0 ) count += 4;\n            else if ( n % 21 == 0 ) count += 5;\n            else if ( n % 23 == 0 ) count += 6;\n            else if ( n % 29 == 0 ) count += 7;\n            else if ( n % 31 == 0 ) count += 8;\n            else if ( n % 37 == 0 ) count += 9;\n            else if ( n % 41 == 0 ) count += 10;\n            else if ( n % 43 == 0 ) count += 11;\n            else if ( n % 47 == 0 ) count += 12;\n            else if ( n % 53 == 0 ) count += 13;\n            else if ( n % 59 == 0 ) count += 14;\n            else if ( n % 61 == 0 ) count += 15;\n            else if ( n % 67 == 0 ) count += 16;\n            else if ( n % 71 == 0 ) count += 17;\n            else if ( n % 73 == 0 ) count += 18;\n            else if ( n % 79 == 0 ) count += 19;\n            else if ( n % 83 == 0 ) count += 20;\n            else if ( n % 89 == 0 ) count += 21;\n            else if ( n % 91 == 0 ) count += 22;\n            else if ( n % 97 == 0 ) count += 23;\n            else if ( n % 101 == 0 ) count += 24;\n            else if ( n % 103 == 0 ) count += 25;\n            else if ( n % 107 == 0 ) count += 26;\n            else if ( n % 111 == 0 ) count += 27;\n            else if ( n % 115 == 0 ) count += 28;\n            else if ( n % 117 == 0 ) count += 29;\n            else if ( n % 121 == 0 ) count += 30;\n            else if ( n % 123 == 0 ) count += 31;\n            else if ( n % 127 == 0 ) count += 32;\n            else if ( n % 131 == 0 ) count += 33;\n            else if ( n % 135 == 0 ) count += 34;\n            else if ( n % 137 == 0 ) count += 35;\n            else if ( n % 141 == 0 ) count += 36;\n            else if ( n % 145 == 0 ) count += 37;\n            else if ( n % 147 == 0 ) count += 38;\n            else if ( n % 151 == 0 ) count += 39;\n            else if ( n % 155 == 0 ) count += 40;",
    "grade-1": {
      "execution": 0
    },
    "2": "int count = 0;\n        if (n < 1000) return count;\n        if ((n % 11) == 0) count++;\n        if ((n % 13) == 0) count++;\n        if (n < 1000 && n / 10 == 0) count++;\n        return count;",
    "grade-2": {
      "execution": 0
    },
    "3": "int n11, n13, n;\n        n11 = (n-1)/11;\n        n13 = (n-1)/13;\n        n = n11 + n13 - (n-1)/(11*13);\n        return n;",
    "grade-3": {
      "execution": 0
    },
    "4": "// your code here",
    "grade-4": {
      "execution": 0
    },
    "5": "int result = 0;\n        int digit;\n        int num = 0;\n        for (int i = 11; i < n; i += 11) {\n            num = i;\n            while (num > 0) {\n                digit = num % 10;\n                if (digit == 7) {\n                    result++;\n                }\n                num /= 10;\n            }\n        }\n        for (int i = 13; i < n; i += 13) {\n            num = i;\n            while (num > 0) {\n                digit = num % 10;\n                if (digit == 7) {\n                    result++;\n                }\n                num /= 10;\n            }\n        }\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String a, String b) {\n",
    "task_id": "11",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n",
    "simplified_intent": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
    "snippet": [
      "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (a == null || b == null) return null;\n        StringBuilder sb = new StringBuilder();\n        for( int i=0; i < a.length(); i++ ) {\n            char c = a.charAt(i);\n            if ( b.charAt(i) == c ) {\n                sb.append(c);\n            }\n            else {\n                sb.append(Integer.toBinaryString((int)(c^b.charAt(i))));\n            }\n        }\n        return sb.toString();",
    "grade-0": {
      "execution": 0
    },
    "1": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            int value = (int) a.charAt(i) - '0';\n            value = value ^ (int) b.charAt(i) - '0';\n            sb.append((char) value);\n        }\n        return sb.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "return Integer.toBinaryString(Integer.parseInt(a, 2) - Integer.parseInt(b, 2));",
    "grade-2": {
      "execution": 0
    },
    "3": "// Your code goes here\n        return null;",
    "grade-3": {
      "execution": 0
    },
    "4": "String r = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            r += a.charAt(i) == b.charAt(i) ? \"0\" : \"1\";\n        }\n        return r;",
    "grade-4": {
      "execution": 1
    },
    "5": "String output = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\n                output += \"0\";\n            else\n                output += \"1\";\n        }\n        return output;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n",
    "task_id": "25",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n",
    "simplified_intent": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
    "snippet": [
      "        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> res = new ArrayList<Integer>();\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        for (Integer x : factors) {\n            if (x != 1) {\n                res.add(x);\n            }\n        }\n        if (n == 1) {\n            res.add(n);\n        }\n        return res;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> factors = new ArrayList<>();\n        ArrayList<Integer> factorsOfN = new ArrayList<>();\n        int d = 1;\n        while (n % d == 0) {\n            factorsOfN.add(d);\n            while (n % d == 0) {\n                factors.add(d);\n                n /= d;\n            }\n            d *= 2;\n        }\n        if (n != 1) {\n            factorsOfN.add(1);\n            factors.add(1);\n        }\n        return factors;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n = n/i;\n            }\n        }\n        factors.add(n);\n        return factors;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        int remaining = n;\n        while (i * i <= remaining) {\n            while (remaining % i == 0) {\n                factors.add(i);\n                remaining /= i;\n            }\n            i++;\n        }\n        if (remaining > 1) {\n            factors.add(remaining);\n        }\n        return factors;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        int c = 2;\n        while (n>1) {\n            while (n%c==0) {\n                factors.add(c);\n                n = n/c;\n            }\n            c++;\n        }\n        return factors;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ans.add(i);\n                n /= i;\n            }\n        }\n        return ans;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're given a list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return True. Otherwise it should return False.\n    // >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n    // True\n    public static boolean belowZero(ArrayList<Integer> operations) {\n",
    "task_id": "3",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n",
    "simplified_intent": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
    "snippet": [
      "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return operations.stream().reduce(0, (x, y) -> x + y <= 0); // This returns true when at least one operation returns zero",
    "grade-0": {
      "execution": 0
    },
    "1": "int low = 0;\n        int high = operations.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (operations.get(mid) < 0) {\n                low = mid + 1;\n            } else if (operations.get(mid) > 0) {\n                high = mid - 1;\n            } else {\n                // At this point we have a balance, low == high\n                return true;\n            }\n        }\n        return false;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (operations.size() == 0)\n            return false;\n        return operations.get(0) == -operations.get(1);",
    "grade-2": {
      "execution": 0
    },
    "3": "return operations.stream().reduce(0, (x, y) -> x + y) < 0;",
    "grade-3": {
      "execution": 0
    },
    "4": "int current_sum = 0;\n        for (int op : operations) {\n            current_sum += op;\n            if (current_sum < 0) {\n                return true;\n            }\n        }\n        return false;",
    "grade-4": {
      "execution": 1
    },
    "5": "// Put your code here.\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns True if the object q will fly, and False otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279e False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // will_it_fly([3, 2, 3], 1) \u279e False\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9) \u279e True\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // will_it_fly([3], 5) \u279e True\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w) {\n",
    "task_id": "72",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n",
    "simplified_intent": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
    "snippet": [
      "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (q.isEmpty())\n            return true;\n\n        boolean result = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (q.get(i) < 0)\n                return false;\n\n            if (i == q.size() - 1)\n                continue;\n\n            int left = q.size() - 1 - i;\n            int right = q.size() - 1;\n            int maxWeight = q.stream()\n                    .map(i -> Math.abs(w-i))\n                    .max(Comparator.naturalOrder())\n                    .get();\n\n            // if the weight of the middle element is bigger than the maximum weight, then it can't fly.\n            if (q.get(i) > maxWeight)\n                return false;\n\n            // if the weight of the middle element is less than the max weight, then it can fly.\n            if (q.get(i) < maxWeight) {\n                result = result && (left == right);\n            }\n\n        }\n\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "boolean balanced = false;\n        ArrayList list = new ArrayList(q);\n        int sum = 0;\n        for(int i=0; i<list.size(); i++) {\n            sum += list.get(i);\n        }\n        if (sum < w) {\n            balanced = false;\n        }\n        else {\n            balanced = true;\n        }\n        ArrayList result = new ArrayList();\n        int max = 0;\n        for(int i=0; i<list.size(); i++) {\n            max = Math.max(max, list.get(i));\n            result.add(list.get(i));\n        }\n        if (sum >= w && balanced) {\n            System.out.println(\"BALANCED\");\n        }\n        else {\n            System.out.println(\"NOT BALANCED\");\n        }\n        ArrayList result2 = new ArrayList();\n        for(int i=0; i<result.size(); i++) {\n            result2.add(result.get(i));\n        }\n        Collections.sort(result2);\n        for(int i=0; i<result2.size(); i++) {\n            int c = result2.get(i);\n            if(c == max) {\n                return true;\n            }\n        }\n        return false;",
    "grade-1": {
      "execution": 0
    },
    "2": "boolean result = true;\n        if (q.isEmpty())\n            return result;\n        boolean b = q.isEmpty();\n        if (q.get(0) == q.get(q.size() - 1)) {\n            b = q.isEmpty();\n        }\n        if (q.size() > 1 && b == true) {\n            int sum = 0;\n            for (int i = 0; i < q.size() - 1; i++) {\n                sum += q.get(i);\n            }\n            if (sum < w)\n                result = false;\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "boolean balanced = Problem.isBalanced(q);\n        boolean weight = Problem.weightUnder(q, w);\n        return balanced && weight;",
    "grade-3": {
      "execution": 0
    },
    "4": "// Write your code here...\n        if (q.size() == 1) return true;\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) return false;\n        int j = q.size() - 1;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(j)) return false;\n            j--;\n        }\n        return true;",
    "grade-4": {
      "execution": 1
    },
    "5": "int sum = 0;\n        boolean isValid = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (sum > w) {\n                isValid = false;\n                break;\n            }\n            sum += q.get(i);\n        }\n        if (isValid) {\n            ArrayList<Integer> temp = new ArrayList<Integer>(q);\n            Collections.reverse(temp);\n            if (temp.equals(q)) {\n                return true;\n            }\n        }\n        return false;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // digitSum(\"\") => 0\n    // digitSum(\"abAB\") => 131\n    // digitSum(\"abcCd\") => 67\n    // digitSum(\"helloE\") => 69\n    // digitSum(\"woArBld\") => 131\n    // digitSum(\"aAaaaXa\") => 153\n    public static int digitSum(String s) {\n",
    "task_id": "66",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n",
    "simplified_intent": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
    "snippet": [
      "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return s.chars()\n            .mapToObj(c -> (char) c)\n            .filter(Character::isUpperCase)\n            .map(Character::getNumericValue)\n            .sum();",
    "grade-0": {
      "execution": 0
    },
    "1": "int sum = 0;\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            int character = s.charAt(i) - 'A' + 1;\n            sum += character;\n        }\n        return sum;",
    "grade-1": {
      "execution": 0
    },
    "2": "return s.chars().filter((t) -> {\n            return Character.isUpperCase((char) t);\n        }).mapToObj(Integer::intValue).sum();",
    "grade-2": {
      "execution": 0
    },
    "3": "int sum = 0;\n        if (s == null || s.isEmpty()) return sum;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += (int) s.charAt(i);\n            }\n        }\n        return sum;",
    "grade-3": {
      "execution": 1
    },
    "4": "char[] chars = s.toCharArray();\n        char[] upperChars = Arrays.stream(chars).filter(c -> Character.isUpperCase(c)).toArray();\n        return upperChars.length > 0 ? Arrays.stream(upperChars).sum() : 0;",
    "grade-4": {
      "execution": 0
    },
    "5": "return (int)IntStream.range(0, s.length())\n                           .mapToObj(s::charAt)\n                           .filter(Character::isUpperCase)\n                           .reduce(0, (a,b) -> a + b);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3, 5, 7]\n    public static ArrayList<Integer> makeAPile(int n) {\n",
    "task_id": "100",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n",
    "simplified_intent": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
    "snippet": [
      "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> pile = new ArrayList<Integer>();\n        if (n == 0) {\n            return pile;\n        }\n        int n1 = (int) (n / 2);\n        if (n1 % 2 == 0) {\n            pile.add(n1);\n        }\n        int n2 = (int) (n / 2);\n        if (n2 % 2 == 0) {\n            pile.add(n2);\n        }\n        int n3 = (int) (n / 2);\n        if (n3 % 2 == 0) {\n            pile.add(n3);\n        }\n        int n4 = (int) (n / 2);\n        if (n4 % 2 == 0) {\n            pile.add(n4);\n        }\n        return pile;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> result = new ArrayList<>();\n        if(n == 0)\n            return result;\n        if(n%2 == 0) {\n            result.add(n);\n            n /= 2;\n            makeAPile(n).forEach(value -> result.add(value));\n        }\n        else {\n            int count = 1;\n            while(n > 0)\n            {\n                result.add(n);\n                n--;\n            }\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n == 1)\n            return Arrays.asList(n);\n        ArrayList<Integer> result = new ArrayList<>();\n        int nextOdd = nextOddNumber(n);\n        int nextEven = nextEvenNumber(n);\n        result.add(nextOdd);\n        if (n % 2 == 0) {\n            result.add(nextEven);\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int k = n;\n        while (k > 0) {\n            result.add(0, k);\n            if (k % 2 == 0) {\n                k = k + 1;\n            } else {\n                k = k + 2;\n            }\n        }\n        return result;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> lst = new ArrayList<Integer>();\n        while (n > 0) {\n            lst.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = (n + 1) / 2;\n            }\n        }\n        return lst;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(n + 2 * i);\n        }\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static String solve(int N) {\n",
    "task_id": "84",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n",
    "simplified_intent": "Given a positive integer N, return the total sum of its digits in binary.",
    "snippet": [
      "        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "boolean digitSums[] = new boolean[N];\n        Arrays.fill(digitSums, true);\n\n        // add up the digits in the binary representation of N\n        // and multiply that by the appropriate power of 2\n        int sum = 0;\n        for (int i = 0; i < N / 2; i++) {\n            if (digitSums[i]) {\n                sum += N % 10 * Math.pow(10, i);\n                digitSums[i] = false;\n            }\n            N /= 10;\n        }\n\n        // convert sum to a string\n        String bin = Integer.toString(sum, 2);\n        if (N > 0) {\n            // append 1's if the binary has non-zero digits and an odd length\n            if (bin.length() > 1) {\n                bin = \"1\" + bin;\n            } else {\n                bin = \"0\" + bin;\n            }\n        }\n        return bin;",
    "grade-0": {
      "execution": 0
    },
    "1": "String result = \"0\";\n        int numDigits = N;\n        int remainder = N;\n        while (numDigits > 0) {\n            remainder = N % 10;\n            result += Integer.toString(remainder);\n            N = N / 10;\n            numDigits--;\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "StringBuilder sb = new StringBuilder();\n        int sum = 0;\n\n        // Loop from 0 to N and get each number in binary string\n        for (int i = 0; i < N; i++) {\n            String binary = Integer.toBinaryString(i).replace('-', '1');\n            // Add it to the total\n            sum += binary.length();\n            // Append this digit\n            sb.append(binary);\n        }\n        // Build the final answer by concatenating the total of each digit\n        sb.append(sum);\n        return sb.toString();",
    "grade-2": {
      "execution": 0
    },
    "3": "//Step 1 - Split the number into two individual numbers.\n        Integer[] nums = N.toString().chars().map(c -> c-'0').toArray(Integer[]::new);\n        Integer[] nums_bin = new Integer[nums.length];\n        int counter = 0;\n        //Step 2 - Convert each individual number into a binary number.\n        for (int num : nums) {\n            nums_bin[counter] = Integer.parseInt(Integer.toBinaryString(num));\n            counter++;\n        }\n        //Step 3 - Add all the binary numbers together.\n        int sum = 0;\n        for (int num : nums_bin) {\n            sum += num;\n        }\n        return Integer.toString(sum);",
    "grade-3": {
      "execution": 0
    },
    "4": "StringBuilder sb = new StringBuilder();\n        do {\n            sb.append(N % 2);\n            N /= 2;\n        } while (N > 0);\n        String str = sb.reverse().toString();\n        int sum = 0;\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return Integer.toString(sum);",
    "grade-4": {
      "execution": 0
    },
    "5": "String binaryString = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binaryString.length(); i++) {\n            char c = binaryString.charAt(i);\n            if (c == '1') {\n                sum += 1;\n            }\n        }\n        return Integer.toString(sum);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // digits(1)  == 1\n    // digits(4)  == 0\n    // digits(235) == 15\n    public static int digits(int n) {\n",
    "task_id": "131",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n",
    "simplified_intent": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
    "snippet": [
      "        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return (n * 9) % 10;",
    "grade-0": {
      "execution": 0
    },
    "1": "int product = 0;\n        int digit = 0;\n        while (n > 0){\n            digit = (n % 10) % 2;\n            product += digit;\n            n = n / 10;\n        }\n        if(product % 2 == 0)\n            return product;\n        else\n            return 0;",
    "grade-1": {
      "execution": 0
    },
    "2": "int[] arr = new int[10]; // Preallocate array\n        for (int i = 1; i <= 9; i++) {\n            arr[i - 1] = n % 10; // Store n's digit\n            n = n / 10; // Divide n by 10\n        }\n        // Check whether all digits are even\n        if (arr[0] != 0) return 0;\n        int ans = 0;\n        for (int i = 0; i < 10; i++) {\n            ans *= 10 + arr[i]; // Store ans * 10 + arr[i]\n        }\n        return ans;",
    "grade-2": {
      "execution": 0
    },
    "3": "return 0;",
    "grade-3": {
      "execution": 0
    },
    "4": "// insert code here\n        return 0;",
    "grade-4": {
      "execution": 0
    },
    "5": "return Arrays.stream(String.valueOf(n).split(\"\"))\n            .mapToInt(Integer::parseInt)\n            .filter(x -> x % 2 != 0)\n            .reduce(1, (x, y) -> x * y);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return an array of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10) -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11, 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    public static ArrayList<Integer> eat(int number, int need, int remaining) {\n",
    "task_id": "159",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n",
    "simplified_intent": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
    "snippet": [
      "        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> carrots = new ArrayList<Integer>();\n        carrots.add(number);\n        int needToEat = 0;\n        while (needToEat <= need) {\n            int leftOver = needToEat - need;\n            if (leftOver > remaining) {\n                leftOver = remaining;\n            }\n            ArrayList<Integer> newCarrots = new ArrayList<Integer>();\n            for (Integer carrot : carrots) {\n                newCarrots.add(carrot - leftOver);\n            }\n            carrots = newCarrots;\n            needToEat = carrots.get(0);\n            for (int i = 1; i < carrots.size(); i++) {\n                needToEat += carrots.get(i);\n            }\n            result.add(needToEat);\n        }\n        ArrayList<Integer> carrots2 = new ArrayList<Integer>();\n        for (int i : result) {\n            carrots2.add(i);\n        }\n        carrots2.addAll(Arrays.asList(new Integer[carrots2.size() - need]));\n        return carrots2;",
    "grade-0": {
      "execution": 0
    },
    "1": "// TODO Auto-generated method stub\n        ArrayList<Integer> result = new ArrayList<>();\n        while (number - remaining > 0) {\n            if (number - remaining >= need) {\n                result.add(number);\n                number -= need;\n            } else {\n                result.add(number);\n                number -= remaining;\n            }\n        }\n        if (number > 0) {\n            result.add(number);\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "// Your code goes here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        for(int i=0;i<number;i++){\n            nums.add(i);\n        }\n        nums.removeAll(new ArrayList<Integer>(nums.stream().filter(j->j<need).limit(number).collect(Collectors.toList())));\n        int need1=need;\n        for(int i=0;i<need;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number1=number;\n        for(int i=0;i<need1;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number2=number;\n        for(int i=0;i<number1;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number3=number;\n        for(int i=0;i<number2;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number4=number;\n        for(int i=0;i<number3;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number5=number;\n        for(int i=0;i<number4;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number6=number;\n        for(int i=0;i<number5;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number7=number;\n        for(int i=0;i<number6;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number8=number;\n        for(int i=0;i<number7;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number9=number;\n        for(int i=0;i<number8;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number10=number;\n        for(int i=0;i<number9;i++){\n            if(!nums.isEmpty()){\n                nums.remove(0);\n            }\n            else{\n                break;\n            }\n        }\n        int number11",
    "grade-2": {
      "execution": 0
    },
    "3": "int carrots = number + remaining;\n        if (carrots >= need) {\n            return new ArrayList<Integer>(Arrays.asList(need, carrots - need));\n        } else {\n            return new ArrayList<Integer>(Arrays.asList(carrots, 0));\n        }",
    "grade-3": {
      "execution": 0
    },
    "4": "int total = number;\n        int res[] = new int[2];\n        if (remaining < need) {\n            total += remaining;\n            remaining = 0;\n        } else {\n            total += need;\n            remaining -= need;\n        }\n        res[0] = total;\n        res[1] = remaining;\n        return new ArrayList<Integer>(Arrays.asList(res));",
    "grade-4": {
      "execution": 0
    },
    "5": "int[] ret = new int[2];\n        ret[0] = number + need;\n        ret[1] = remaining - need;\n        if (ret[1] < 0) {\n            ret[0] += ret[1];\n            ret[1] = 0;\n        }\n        return new ArrayList<Integer>(Arrays.asList(ret[0], ret[1]));",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns True \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==> True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64) ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public static boolean iscube(int a) {\n",
    "task_id": "77",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n",
    "simplified_intent": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
    "snippet": [
      "        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "",
    "grade-0": {
      "execution": 0
    },
    "1": "return a >= 1;",
    "grade-1": {
      "execution": 0
    },
    "2": "int b = 0;\n        while (a != 0) {\n            if (a % 3 == 0 || a % 5 == 0) {\n                b ++;\n            }\n            a /= 3;\n        }\n        return b == 0;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Write your code here\n        if (a==0) return true;\n        else return (Math.pow(Math.round(Math.pow(a, 1.0/3.0)), 3) == a);",
    "grade-3": {
      "execution": 0
    },
    "4": "return (Math.cbrt(a) % 1 == 0);",
    "grade-4": {
      "execution": 1
    },
    "5": "if (a < 0) a = -a;\n        int i = 1;\n        while (i * i * i <= a) {\n            if (i * i * i == a) return true;\n            i++;\n        }\n        return false;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes integers, floats, or strings representing\n    // real numbers, and returns the larger variable in its given variable type.\n    // Return None if the values are equal.\n    // Note: If a real number is represented as a string, the floating point might be . or ,\n    // compare_one(1, 2.5) \u279e 2.5\n    // compare_one(1, \"2,3\") \u279e \"2,3\"\n    // compare_one(\"5,1\", \"6\") \u279e \"6\"\n    // compare_one(\"1\", 1) \u279e None\n    public static Union_int_float_String_Optional.empty() compareOne(Union_int_float_String a, Union_int_float_String b) {\n",
    "task_id": "137",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n",
    "simplified_intent": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
    "snippet": [
      "        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (a.getVariableType() != a.getVariableType()) {\n            return None;\n        } else if (b.getVariableType() != b.getVariableType()) {\n            return None;\n        } else if (a.getVariableType().isReal()) {\n            if (a.getVariableType() == a.getVariableType()) {\n                Double aDouble = Double.valueOf(a.getData());\n                Double bDouble = Double.valueOf(b.getData());\n                if (aDouble.compareTo(bDouble) > 0) {\n                    return Optional.of(new Union_int_float_String(\n                            a.getVariableType().getVariableType().toInt(),\n                            aDouble,\n                            b.getVariableType().getVariableType().toInt(),\n                            bDouble));\n                } else if (aDouble.compareTo(bDouble) < 0) {\n                    return Optional.of(new Union_int_float_String(\n                            a.getVariableType().getVariableType().toInt(),\n                            bDouble,\n                            a.getVariableType().getVariableType().toInt(),\n                            bDouble));\n                } else {\n                    return Optional.of(new Union_int_float_String(\n                            a.getVariableType().getVariableType().toInt(),\n                            aDouble,\n                            a.getVariableType().getVariableType().toInt(),\n                            bDouble));\n                }\n            }\n        }\n        return Optional.empty();",
    "grade-0": {
      "execution": 0
    },
    "1": "if(a == null && b == null) {\n            return null;\n        }\n        return compare_one(a, b);",
    "grade-1": {
      "execution": 0
    },
    "2": "// For each element in a, check if it's in b.\n        // If it is, return the greater value.\n        // If not, return None.\n        // Note that this does not work for strings, because strings come in as\n        // a string.\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n\n        // Now check for strings and floats.\n        Optional<Union_int_float_String> a_optional = a.asOptional();\n        Optional<Union_int_float_String> b_optional = b.asOptional();\n        if (a_optional.isPresent() && b_optional.isPresent()) {\n            Optional<Union_int_float_String> a_optional_union = a_optional.flatMap(Union_int_float_String::asUnion);\n            Optional<Union_int_float_String> b_optional_union = b_optional.flatMap(Union_int_float_String::asUnion);\n            if ((a_optional_union.compare(b_optional_union) < 0)) {\n                return a_optional_union;\n            } else if (a_optional_union.compare(b_optional_union) > 0) {\n                return b_optional_union;\n            }\n        }\n        return Optional.empty();",
    "grade-2": {
      "execution": 0
    },
    "3": "if (typeOf(a) == int.class) {\n            return ((Integer) a > (Integer) b) ? a : ((Integer) a < (Integer) b) ? b : Union_int_float_String_Optional.empty();\n        } else if (typeOf(a) == float.class) {\n            return ((Float) a > (Float) b) ? a : ((Float) a < (Float) b) ? b : Union_int_float_String_Optional.empty();\n        } else if (typeOf(a) == String.class) {\n            if (((String) a).contains(\",\")) {\n                ((String) a).replace(\",\", \".\");\n            }\n            if (((String) b).contains(\",\")) {\n                ((String) b).replace(\",\", \".\");\n            }\n            return (Float.parseFloat((String) a) > Float.parseFloat((String) b)) ? a : (Float.parseFloat((String) a) < Float.parseFloat((String) b)) ? b : Union_int_float_String_Optional.empty();\n        }\n        return Union_int_float_String_Optional.empty();",
    "grade-3": {
      "execution": 0
    },
    "4": "Union_int_float_String_Optional.empty() result = null;\n        if (a instanceof Union_int_float_String.a_int) {\n            if (b instanceof Union_int_float_String.a_int) {\n                int a_value = ((Union_int_float_String.a_int) a)._a_int;\n                int b_value = ((Union_int_float_String.a_int) b)._a_int;\n                if (a_value > b_value) {\n                    result = new Union_int_float_String_Optional.a_int(a_value);\n                } else if (a_value < b_value) {\n                    result = new Union_int_float_String_Optional.a_int(b_value);\n                } else {\n                    result = new Union_int_float_String_Optional.empty();\n                }\n            } else if (b instanceof Union_int_float_String.b_float) {\n                int a_value = ((Union_int_float_String.a_int) a)._a_int;\n                float b_value = ((Union_int_float_String.b_float) b)._b_float;\n                if (a_value > b_value) {\n                    result = new Union_int_float_String_Optional.a_int(a_value);\n                } else if (a_value < b_value) {\n                    result = new Union_int_float_String_Optional.b_float(b_value);\n                } else {\n                    result = new Union_int_float_String_Optional.empty();\n                }\n            } else if (b instanceof Union_int_float_String.c_String) {\n                try {\n                    int a_value = ((Union_int_float_String.a_int) a)._a_int;\n                    String b_value = ((Union_int_float_String.c_String) b)._c_String;\n                    b_value = b_value.replace(\",\", \".\");\n                    float b_value_float = Float.parseFloat(b_value);\n                    if (a_value > b_value",
    "grade-4": {
      "execution": 0
    },
    "5": "if(a.isInt() && b.isInt()) {\n            if(a.getInt() > b.getInt()) {\n                return a;\n            } else if(a.getInt() < b.getInt()) {\n                return b;\n            } else {\n                return None;\n            }\n        } else if(a.isFloat() && b.isFloat()) {\n            if(a.getFloat() > b.getFloat()) {\n                return a;\n            } else if(a.getFloat() < b.getFloat()) {\n                return b;\n            } else {\n                return None;\n            }\n        } else if(a.isString() && b.isString()) {\n            if(a.getString() > b.getString()) {\n                return a;\n            } else if(a.getString() < b.getString()) {\n                return b;\n            } else {\n                return None;\n            }\n        } else {\n            return None;\n        }",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1, 2, 10) == -1\n    public static float triangleArea(int a, int b, int c) {\n",
    "task_id": "71",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n",
    "simplified_intent": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
    "snippet": [
      "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return Math.sqrt( (b*b) + (a*c) - (b*a) );",
    "grade-0": {
      "execution": 0
    },
    "1": "float a = Math.abs(a);\n        float b = Math.abs(b);\n        float c = Math.abs(c);\n        if ((a>0 && b>0) || (a>0 && c>0) || (b>0 && c>0)) {\n            float s = (a + b + c) / 2;\n            float area = Math.abs(Math.sqrt(s*(s-a)*(s-b)*(s-c)));\n            return Math.round(area*100)/100;\n        } else {\n            return -1;\n        }",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your code here\n        float area = 0;\n        if (a == c && b == c) {\n            area = (float) ((a * a + b * b) / 2);\n            System.out.println(\"Return area \" + area);\n        } else {\n            if (a > b) {\n                if (a > c) {\n                    area = (a * a + c * c);\n                    System.out.println(\"Return area \" + area);\n                } else {\n                    area = (a * b + c * c);\n                    System.out.println(\"Return area \" + area);\n                }\n            } else if (b > c) {\n                area = (a * b + c * c);\n                System.out.println(\"Return area \" + area);\n            } else {\n                area = (a * a + b * b);\n                System.out.println(\"Return area \" + area);\n            }\n        }\n        return area;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (a < 0 || b < 0 || c < 0) {\n            return -1;\n        }\n        // Check that a side is longer than the sum of the other two sides\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        // Using Heron's formula\n        float s = (a + b + c) / 2.0f;\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) (Math.round(area * 100.0) / 100.0);",
    "grade-3": {
      "execution": 1
    },
    "4": "float[] sides = new float[]{a, b, c};\n        Arrays.sort(sides);\n        if (sides[0] + sides[1] > sides[2]) {\n            float s = 0.5f * (sides[0] + sides[1] + sides[2]);\n            return (float) Math.sqrt(s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]));\n        }\n        return -1;",
    "grade-4": {
      "execution": 0
    },
    "5": "// https://www.mathopenref.com/heronsformula.html\n        float p = (a + b + c) / 2f;\n        float s = (float) Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return Float.isNaN(s) ? -1 : s;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array arr of integers and a positive integer k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output: [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will be in the range of [1, 1000].\n    // 2. The elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n",
    "task_id": "120",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n",
    "simplified_intent": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
    "snippet": [
      "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int n = arr.size();\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i<n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(i+1 == j) continue;\n                int tmp = arr.get(i);\n                if(i+1 < n && arr.get(j) > arr.get(i)) {\n                    tmp = arr.get(j);\n                    arr.set(j, arr.get(i));\n                    arr.set(i, tmp);\n                }\n                if(tmp > max) {\n                    max = tmp;\n                }\n            }\n            result.add(max);\n            max = Integer.MIN_VALUE;\n        }\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "int m = arr.get(0);\n        ArrayList<Integer> max = new ArrayList<>(k);\n        for (int i = 0; i < k; i++) {\n            ArrayList<Integer> currMax = new ArrayList<>();\n            int j = 0;\n            for (; j < arr.size(); j++) {\n                if (arr.get(j) < m) {\n                    break;\n                }\n                currMax.add(arr.get(j));\n            }\n            currMax.add(m);\n            m = Collections.max(currMax);\n            max.add(m);\n        }\n        return max;",
    "grade-1": {
      "execution": 0
    },
    "2": "Arrays.sort(arr);\n        ArrayList result = new ArrayList<Integer>();\n        int maxNumber = 0;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (index == k) {\n                result.add(maxNumber);\n                maxNumber = 0;\n            }\n            if (arr.get(i) > maxNumber) {\n                maxNumber = arr.get(i);\n                index = i;\n            }\n        }\n        result.add(maxNumber);\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "PriorityQueue<Integer> heap = new PriorityQueue<Integer>(k);\n        for (int i = 0; i < arr.size(); i++) {\n            if (heap.size() < k) {\n                heap.add(arr.get(i));\n            } else {\n                int x = heap.peek();\n                if (x < arr.get(i)) {\n                    heap.poll();\n                    heap.add(arr.get(i));\n                }\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        while (heap.size() > 0) result.add(heap.poll());\n        Collections.reverse(result);\n        return result;",
    "grade-3": {
      "execution": 0
    },
    "4": "TreeMap<Integer, Integer> map = new TreeMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            map.put(arr.get(i), map.getOrDefault(arr.get(i), 0) + 1);\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (map.size() == 0) {\n                break;\n            }\n            result.add(map.lastKey());\n            map.put(map.lastKey(), map.get(map.lastKey()) - 1);\n            if (map.get(map.lastKey()) == 0) {\n                map.remove(map.lastKey());\n            }\n        }\n        return result;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> maximum = new ArrayList<>();\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());\n        for (int i = 0; i < arr.size(); i++)\n            pq.add(arr.get(i));\n        while (k-- > 0)\n            maximum.add(pq.poll());\n        return maximum;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String brackets) {\n",
    "task_id": "56",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n",
    "simplified_intent": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
    "snippet": [
      "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Set<String> openings = new HashSet<String>();\n        Set<String> closings = new HashSet<String>();\n        for (char c: brackets.toCharArray()) {\n            if (c == '<') {\n                openings.add(\"<\");\n            } else if (c == '>') {\n                closings.add(\">\");\n            }\n        }\n        return openings.equals(closings);",
    "grade-0": {
      "execution": 0
    },
    "1": "if (brackets.length() == 0)\n            return false;\n        int len = brackets.length();\n        // return true if brackets is correctly balanced\n        // otherwise, return false.\n        // if brackets is empty, return false\n        if (len == 0)\n            return false;\n        int openBrackets = 0;\n        int i;\n        for (i = 0; i < len; ++i)\n            if (brackets.charAt(i) == '<')\n                openBrackets++;\n            else if (brackets.charAt(i) == '>')\n                openBrackets--;\n            else\n                return false;\n        // if open brackets are 0, return true\n        if (openBrackets == 0)\n            return true;\n        // otherwise, return false\n        else\n            return false;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (brackets.length() == 0)\n            return true;\n        Stack<Character> stack = new Stack<>();\n        int idx = 0;\n        while (idx < brackets.length()) {\n            char c = brackets.charAt(idx);\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                char popped = stack.pop();\n                if (!stack.empty() && (c == popped || c == '>'))\n                    return false;\n            }\n            idx++;\n        }\n        return !stack.empty();",
    "grade-2": {
      "execution": 0
    },
    "3": "int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<')\n                depth++;\n            else if (brackets.charAt(i) == '>')\n                depth--;\n            if (depth < 0)\n                return false;\n        }\n        return depth == 0;",
    "grade-3": {
      "execution": 1
    },
    "4": "// TODO: write code here\n        return false;",
    "grade-4": {
      "execution": 0
    },
    "5": "Stack<Character> st = new Stack<Character>();\n        int len = brackets.length();\n        for (int i = 0; i < len; i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '<') {\n                st.push(ch);\n            } else {\n                if (st.isEmpty()) {\n                    return false;\n                }\n                st.pop();\n            }\n        }\n        return st.isEmpty();",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // Your task is to check if the string is happy or not.\n    // A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n",
    "task_id": "80",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n",
    "simplified_intent": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
    "snippet": [
      "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return s.length() > 3 && s.chars().distinct().count() % 3 == 0;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (s.length() < 3) return false;\n        StringBuilder sb = null;\n        for(int i=0;i<s.length();i++){\n            String temp=s.substring(0,i);\n            if (sb == null){\n                sb = new StringBuilder(temp);\n            }else {\n                sb.append(temp);\n            }\n        }\n        if (sb.toString().equalsIgnoreCase(s)){\n            return true;\n        }\n        return false;",
    "grade-1": {
      "execution": 0
    },
    "2": "int length = s.length();\n        if (length < 3) return false;\n        return s.distinct().map(c -> c+c).distinct().count() >= 3;",
    "grade-2": {
      "execution": 0
    },
    "3": "boolean result = true;\n        if (s.length() >= 3) {\n            result = IntStream.range(0, s.length() - 2).allMatch(i -> s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2));\n        } else {\n            result = false;\n        }\n        return result;",
    "grade-3": {
      "execution": 1
    },
    "4": "// start your code here\n        return false;",
    "grade-4": {
      "execution": 0
    },
    "5": "int len = s.length();\n        if (len < 3) {\n            return false;\n        }\n        for (int i = 0; i <= len - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // for x_or_y(7, 34, 12) == 34\n    // for x_or_y(15, 8, 5) == 5\n    public static int xOrY(int n, int x, int y) {\n",
    "task_id": "150",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n",
    "simplified_intent": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
    "snippet": [
      "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Map<Integer, Integer> values = new HashMap<>();\n        values.put(x, n);\n        values.put(y, n);\n        for (int x : values.keySet()) {\n            for (int y : values.keySet()) {\n                if (x == y) {\n                    continue;\n                }\n                if (isPrime(x) && isPrime(y)) {\n                    int x_or_y = values.get(x);\n                    if (x_or_y == y) {\n                        return x_or_y;\n                    } else if (x_or_y == x) {\n                        return x_or_y;\n                    }\n                }\n            }\n        }\n        return -1;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n == 0) {\n            return x;\n        } else if (n == 1) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n - 2, y, x);\n        } else {\n            return xOrY(n - 2, x, y);\n        }",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n != 1 && n != 0) {\n            if (n % 2 == 0) {\n                return x;\n            } else {\n                return y;\n            }\n        }\n        return n;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (n > 2 && n % 2 == 0) {\n            return y;\n        }\n        if (n > 3 && n % 3 == 0) {\n            return y;\n        }\n        if (n > 5 && n % 5 == 0) {\n            return y;\n        }\n        if (n > 7 && n % 7 == 0) {\n            return y;\n        }\n        if (n > 11 && n % 11 == 0) {\n            return y;\n        }\n        if (n > 13 && n % 13 == 0) {\n            return y;\n        }\n        if (n > 17 && n % 17 == 0) {\n            return y;\n        }\n        if (n > 19 && n % 19 == 0) {\n            return y;\n        }\n        if (n > 23 && n % 23 == 0) {\n            return y;\n        }\n        if (n > 29 && n % 29 == 0) {\n            return y;\n        }\n        if (n > 31 && n % 31 == 0) {\n            return y;\n        }\n        if (n > 37 && n % 37 == 0) {\n            return y;\n        }\n        if (n > 41 && n % 41 == 0) {\n            return y;\n        }\n        if (n > 43 && n % 43 == 0) {\n            return y;\n        }\n        if (n > 47 && n % 47 == 0) {\n            return y;\n        }\n        if (n > 53 && n % 53 == 0) {\n            return y;\n        }\n        if (n > 59 && n % 59 == 0) {\n            return y;\n        }\n        if (n > 61 && n % 61 == 0) {\n            return y;\n        }\n        if (n > 67 && n % 67 == 0) {\n            return y;\n        }\n        if (n > 71 && n % 71 == 0) {\n            return y;\n        }\n        if (n > 73 && n % 73 == 0) {\n            return y;\n        }\n        if (n > 79 && n % 79 == 0) {\n            return y;\n        }\n        if (n >",
    "grade-3": {
      "execution": 0
    },
    "4": "if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }",
    "grade-4": {
      "execution": 0
    },
    "5": "// Write your code here\n        boolean isPrime = true;\n        for (int i = 2; i < n / 2; i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            return x;\n        } else {\n            return y;\n        }",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts a list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted list with a sorted order,\n    // The list is always a list of strings and never an array of numbers,\n    // and it may contain duplicates.\n    // The order of the list should be ascending by length of each word, and you\n    // should return the list sorted by that rule.\n    // If two words have the same length, sort the list alphabetically.\n    // The function should return a list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n",
    "task_id": "149",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n",
    "simplified_intent": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
    "snippet": [
      "        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<>();\n        boolean check = false;\n        for(String item:lst){\n            if(item.length() % 2 != 0 && !check){\n                temp.add(item);\n            }\n            else if(item.length() % 2 == 0 && check){\n                check = false;\n                Collections.sort(temp);\n                result.addAll(temp);\n                result.add(item);\n            }\n            else if(item.length() % 2 == 0 && check){\n                check = true;\n                temp.add(item);\n            }\n        }\n        Collections.sort(result);\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.trim().length() % 2 != 0) {\n                result.add(s);\n            } else {\n                Collections.sort(result, String.CASE_INSENSITIVE_ORDER);\n            }\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<String> sortedList = new ArrayList<>();\n        Collections.sort(lst);\n        for (String str : lst) {\n            if (str.length() % 2 != 0) {\n                sortedList.add(str);\n            }\n        }\n        return sortedList;",
    "grade-2": {
      "execution": 0
    },
    "3": "lst.removeIf(s -> (s.length() % 2 != 0));\n        Collections.sort(lst, (a, b) -> a.length() == b.length() ? a.compareTo(b) : a.length() - b.length());\n        return lst;",
    "grade-3": {
      "execution": 1
    },
    "4": "return lst.stream()\n                  .filter(x -> x.length() % 2 == 0)\n                  .sorted(Comparator.comparing(String::length).thenComparing(String::compareTo))\n                  .collect(Collectors.toCollection(ArrayList::new));",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> res2 = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                res.add(s);\n            }\n        }\n        Collections.sort(res);\n        Collections.sort(res, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an integer. return a tuple that has the number of even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12) ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer, Integer> evenOddCount(int num) {\n",
    "task_id": "155",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n",
    "simplified_intent": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
    "snippet": [
      "        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int count = 0;\n        int oddCount = 0;\n        while(num > 0) {\n            int remainder = num % 10;\n            if(remainder % 2 == 0) {\n                count++;\n            }\n            else {\n                oddCount++;\n            }\n            num = num/10;\n        }\n        Pair<Integer, Integer> returnValue = Pair.of(count, oddCount);\n        return returnValue;",
    "grade-0": {
      "execution": 0
    },
    "1": "Pair<Integer, Integer> tuple = new Pair<Integer, Integer>(0, 0);\n        for(int i = 0; i< num / 10; i++) {\n            int remainder = num % 10;\n            if(remainder % 2 == 0) {\n                tuple.increment(0, 1);\n            }\n            else {\n                tuple.increment(1, 1);\n            }\n            num = num / 10;\n        }\n        return tuple;",
    "grade-1": {
      "execution": 0
    },
    "2": "Set<Integer> set = new HashSet<Integer>();\n        int count = 0;\n        while(num>0) {\n            int digit = num % 10;\n            if(set.contains(digit)) {\n                count++;\n            } else {\n                set.add(digit);\n            }\n            num/=10;\n        }\n        return new Pair<>(count, set.size());",
    "grade-2": {
      "execution": 0
    },
    "3": "// Write your code here...\n        int temp = num;\n        int evenCount = 0;\n        int oddCount = 0;\n        if (num < 0) {\n            temp = temp * -1;\n        }\n        while (temp != 0) {\n            int a = temp % 10;\n            if (a % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            temp = temp / 10;\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
    "grade-3": {
      "execution": 0
    },
    "4": "return new Pair<Integer, Integer>(0, 0);",
    "grade-4": {
      "execution": 0
    },
    "5": "// Your code here",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sort_third([1, 2, 3])\n    // [1, 2, 3]\n    // >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    // [2, 6, 3, 4, 8, 9, 5]\n    public static ArrayList<Integer> sortThird(ArrayList<Integer> l) {\n",
    "task_id": "33",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n",
    "simplified_intent": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
    "snippet": [
      "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Initialize an empty list to hold result l', and then initialize a boolean to keep track of the first indicies of l that have been sorted\n        ArrayList<Integer> l1 = new ArrayList<>(l.size());\n        boolean firstSorted = true;\n        // For each element in l, if its value is divisible by three, sort it by adding it to l1\n        // otherwise, add it to l1 without sorting\n        for(int i = 0; i < l.size(); i++) {\n            int val = l.get(i);\n            // If we haven't started sorting yet, add the value to l1\n            if(firstSorted) {\n                l1.add(val);\n            } else {\n                if(val % 3 == 0) {\n                    l1.add(val);\n                } else {\n                    l1.add(0, val);\n                }\n            }\n            firstSorted = !firstSorted;\n        }\n        return l1;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> l1 = new ArrayList<>();\n        l1.addAll(l);\n        ArrayList<Integer> l2 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l2.add(l1.get(i));\n                l1.remove(i);\n            }\n        }\n        l2.addAll(l1);\n        return l2;",
    "grade-1": {
      "execution": 0
    },
    "2": "// Create a list l' that is identical to l but sorted by\n        // the indicies that are not divisible by three (this is\n        // done by sorting l by it's values and then by the\n        // indicies that are not divisible by three)\n        ArrayList<Integer> l2 = new ArrayList<Integer>(l);\n        Collections.sort(l2);\n        Collections.sort(l2, (l1, l2) -> Integer.compare(l1.get(0), l2.get(0)));\n        Collections.sort(l2, (l1, l2) -> Integer.compare(l1.get(1), l2.get(1)));\n        Collections.sort(l2, (l1, l2) -> Integer.compare(l1.get(2), l2.get(2)));\n        return l2;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Write your code here\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                Collections.sort(l);\n            }\n        }\n        return l;",
    "grade-3": {
      "execution": 0
    },
    "4": "int size = l.size();\n        for (int i = 2; i < size; i += 3) {\n            Collections.sort(l.subList(i - 2, i + 1));\n        }\n        return l;",
    "grade-4": {
      "execution": 0
    },
    "5": "// TODO: Finish this method.\n        return null;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns True if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and False otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    // check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    // check_if_last_char_is_a_letter(\"\") \u279e False\n    public static boolean checkIfLastCharIsALetter(String txt) {\n",
    "task_id": "134",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n",
    "simplified_intent": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
    "snippet": [
      "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(!txt.isEmpty())\n            return txt.substring(txt.length()-1).matches(\"[a-z]\");\n        return false;",
    "grade-0": {
      "execution": 0
    },
    "1": "if(txt.isEmpty()) return false;\n        char[] arr = txt.toCharArray();\n        char last = arr[arr.length-1];\n        // if last char is alphabet and is not part of a word\n        if(Character.isLetter(last)) {\n            for(char c : arr.subList(0, arr.length-1)) {\n                if(!Character.isLetter(c)) return false;\n            }\n            return true;\n        }\n        return false;",
    "grade-1": {
      "execution": 0
    },
    "2": "String newString = new String(txt.subString(0,txt.length()-1).toUpperCase());\n        String[] splitString = new String(newString).split(\" \");\n        for(String string: splitString){\n            if(string.contains(txt.substring(txt.length()-1))){\n                return false;\n            }\n        }\n        return true;",
    "grade-2": {
      "execution": 0
    },
    "3": "char[] txtArr = txt.toCharArray();\n        for (int i = txtArr.length - 1; i >= 0; i--) {\n            if (txtArr[i] == ' ') {\n                continue;\n            } else if (txtArr[i] >= 'a' && txtArr[i] <= 'z') {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;",
    "grade-3": {
      "execution": 0
    },
    "4": "if (txt.length() == 0) {\n            return false;\n        }\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        if (lastWord.length() == 0) {\n            return false;\n        }\n        String lastCharacter = lastWord.substring(lastWord.length() - 1);\n        return !Character.isLetter(lastCharacter.charAt(0));",
    "grade-4": {
      "execution": 0
    },
    "5": "return txt.length() == 0 ? false : txt.charAt(txt.length() - 1) != ' ' && Character.isLetter(txt.charAt(txt.length() - 1));",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa', 'aa')\n    // 3\n    public static int howManyTimes(String string, String substring) {\n",
    "task_id": "18",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n",
    "simplified_intent": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
    "snippet": [
      "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return string.length() - substring.length() + string.indexOf(substring) + string.split(substring).length - 1;",
    "grade-0": {
      "execution": 0
    },
    "1": "return string.split(substring).length - string.split(substring).join(\"\").length();",
    "grade-1": {
      "execution": 0
    },
    "2": "if (string.isEmpty()) {\n            return 0;\n        }\n        int counter = 0;\n        int position = 0;\n        while (position != -1) {\n            position = string.indexOf(substring, position);\n            if (position != -1) {\n                ++counter;\n            }\n            ++position;\n        }\n        return counter;",
    "grade-2": {
      "execution": 0
    },
    "3": "int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index += substring.length();\n        }\n        return count;",
    "grade-3": {
      "execution": 0
    },
    "4": "int count = 0;\n        int index = string.indexOf(substring);\n        while (index != -1) {\n            count++;\n            index = string.indexOf(substring, index + 1);\n        }\n        return count;",
    "grade-4": {
      "execution": 1
    },
    "5": "int count = 0;\n        int index = 0;\n        while (true) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            index += substring.length();\n            count++;\n        }\n        return count;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the array will be randomly ordered. Your task is to determine if\n    // it is possible to get an array sorted in non-decreasing order by performing \n    // the following operation on the given array:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the array by one\n    // position in the right direction. The last element of the array will be moved to\n    // the starting position in the array i.e. 0th index. \n    // If it is possible to obtain the sorted array by performing the above operation\n    // then return True else return False.\n    // If the given array is empty then return True.\n    // Note: The given list is guaranteed to have unique elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4, 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // array by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Integer> arr) {\n",
    "task_id": "109",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n",
    "simplified_intent": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
    "snippet": [
      "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// sort array in non-decreasing order first\n        int n = arr.size();\n        if (n <= 1) {\n            return true;\n        }\n        int n = arr.size();\n        Arrays.sort(arr);\n\n        int n = arr.size();\n        boolean flag = false;\n        if (n > 0) {\n            int x = arr.get(n - 1);\n            int i = n - 1;\n            int j = 0;\n            while (i < n) {\n                if (x == arr.get(i)) {\n                    flag = true;\n                    i++;\n                }\n                else {\n                    flag = false;\n                }\n                if (i == n) {\n                    break;\n                }\n                j++;\n                i = j;\n            }\n        }\n        return flag;",
    "grade-0": {
      "execution": 0
    },
    "1": "int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i=0;i<arr.size();i++){\n            max = Math.max(arr.get(i),max);\n            min = Math.min(arr.get(i),min);\n        }\n        if(arr.size()==0){\n            return true;\n        }\n        for(int i=1;i<arr.size();i++){\n            int temp=arr.get(i-1);\n            if(arr.get(i)>arr.get(i-1)||temp<min){\n                return false;\n            }\n            arr.set(i,arr.get(i-1));\n            arr.set(i-1,temp);\n        }\n        return true;",
    "grade-1": {
      "execution": 0
    },
    "2": "for(int i=arr.size()-1;i>0;i--){\n            int j = arr.indexOf(i);\n            int k = j+1;\n            while(j>0 && j>k && k>0) {\n                if(arr.get(j)>arr.get(k)) {\n                    arr.set(j,arr.get(k));\n                }\n                j--;\n                k--;\n            }\n        }\n        \n        return arr.isEmpty() || arr.containsAll(arr.get(0));",
    "grade-2": {
      "execution": 0
    },
    "3": "// Your Code Here\n        return false;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> tempArray = new ArrayList<>(arr);\n        Collections.sort(tempArray);\n        int temp = tempArray.get(0);\n        int t = arr.indexOf(temp);\n        while(t>0) {\n            Collections.rotate(arr, 1);\n            t--;\n        }\n        return tempArray.equals(arr);",
    "grade-4": {
      "execution": 0
    },
    "5": "if (arr.size() <= 1) return true;\n        int firstIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(firstIndex)) {\n                firstIndex = i;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            int index = (firstIndex + i) % arr.size();\n            if (i == 0) {\n                if (arr.get(index) < arr.get((index + 1) % arr.size())) {\n                    return false;\n                }\n            } else if (i == arr.size() - 1) {\n                if (arr.get(index) < arr.get((index - 1) % arr.size())) {\n                    return false;\n                }\n            } else {\n                if (arr.get(index) < arr.get((index - 1) % arr.size()) ||\n                    arr.get(index) < arr.get((index + 1) % arr.size())) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list of all prefixes from shortest to longest of the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    public static ArrayList<String> allPrefixes(String string) {\n",
    "task_id": "14",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n",
    "simplified_intent": "Return list of all prefixes from shortest to longest of the input string",
    "snippet": [
      "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (string == null)\n            throw new NullPointerException(\"Input string is null\");\n        if (string.length() == 0)\n            throw new IllegalArgumentException(\"Input string is empty\");\n\n        ArrayList<String> result = new ArrayList<String>();\n        int prefixLength = 1;\n        result.add(\"\");\n        while (prefixLength < string.length()) {\n            int length = string.length() - prefixLength;\n            for (int i = 0; i < length; i++) {\n                result.add(string.substring(prefixLength, prefixLength + i));\n            }\n            prefixLength += length;\n        }\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i);\n            prefixes.add(prefix);\n            allPrefixes(prefix, prefixes);\n        }\n        return prefixes;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<String> prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (int i = 0; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<String> answer = new ArrayList<String>();\n        int length = string.length();\n        for (int i = 1; i <= length; i++) {\n            answer.add(string.substring(0, i));\n        }\n        return answer;",
    "grade-3": {
      "execution": 1
    },
    "4": "return new ArrayList<String>(IntStream.range(0, string.length() + 1)\n                                     .mapToObj(i -> string.substring(0, i))\n                                     .collect(Collectors.toList()));",
    "grade-4": {
      "execution": 0
    },
    "5": "int n = string.length();\n        ArrayList<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given list of numbers (of at least two elements), apply a linear transform to that list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n",
    "task_id": "21",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n",
    "simplified_intent": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
    "snippet": [
      "        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Arrays.sort(numbers);\n        Collections.reverse(numbers);\n        ArrayList<Float> result = new ArrayList<>(numbers);\n        int firstNonZeroIndex = Collections.binarySearch(result, 0.f);\n        if (firstNonZeroIndex < 0) {\n            firstNonZeroIndex = -firstNonZeroIndex - 1;\n        } else {\n            firstNonZeroIndex = firstNonZeroIndex + 1;\n        }\n        for (int i = 0; i < result.size(); i++) {\n            result[i] = result[i] / firstNonZeroIndex;\n        }\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Float> result = new ArrayList<>(numbers);\n        Collections.sort(result);\n        result.forEach(b -> {\n            if (b <= 0) {\n                b = 0.0;\n            } else if (b >= 1) {\n                b = 1.0;\n            }\n        });\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Float> result = new ArrayList<Float>();\n        float smallest = numbers.get(0);\n        float largest = numbers.get(0);\n        for (float number : numbers) {\n            result.add(smallest);\n            result.add(number);\n            largest = Math.max(number, largest);\n            smallest = Math.min(number, smallest);\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Float> result = new ArrayList<Float>();\n        Float max = Collections.max(numbers);\n        Float min = Collections.min(numbers);\n        for (Float number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;",
    "grade-3": {
      "execution": 1
    },
    "4": "float x_max = Float.MIN_VALUE;\n        float x_min = Float.MAX_VALUE;\n        float x;\n        for (int i = 0; i < numbers.size(); i++) {\n            x = numbers.get(i);\n            if (x > x_max) x_max = x;\n            if (x < x_min) x_min = x;\n        }\n        ArrayList<Float> new_numbers = new ArrayList<Float>();\n        float a = 1.0f / (x_max - x_min);\n        float b = - a * x_min;\n        for (int i = 0; i < numbers.size(); i++) {\n            x = numbers.get(i);\n            new_numbers.add(a * x + b);\n        }\n        return new_numbers;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Float> list = new ArrayList<Float>();\n        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        for (float number : numbers) {\n            list.add((number - min) / (max - min));\n        }\n        return list;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n",
    "task_id": "4",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n",
    "simplified_intent": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
    "snippet": [
      "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "float mean = 0;\n        float sum = 0;\n        for (float i : numbers) {\n            sum += i;\n            mean += sum / numbers.size();\n        }\n        return Math.sqrt(sum / numbers.size() - mean * mean);",
    "grade-0": {
      "execution": 0
    },
    "1": "// Create an empty list to hold the sums.\n        ArrayList<Float> sums = new ArrayList<>();\n        // Create an empty list to hold the mean.\n        float mean = 0;\n        // Populate the sums list with the sum of all elements.\n        for (Float f : numbers) {\n            sums.add(f);\n        }\n        // Populate the mean with the sum of the elements in the list\n        mean = sums.get(0);\n        // Calculate the mean of the sums\n        for (int i = 1; i < sums.size(); i++) {\n            mean += sums.get(i);\n        }\n        // Divide by the number of elements to get our mean.\n        return (float) Math.sqrt(mean / numbers.size());",
    "grade-1": {
      "execution": 0
    },
    "2": "float mean = 0f;\n        float average = 0f;\n\n        // Find the mean of all the elements\n        for (float x : numbers) {\n            mean += x;\n        }\n        mean /= numbers.size();\n\n        // Find the difference from the mean\n        for (float x : numbers) {\n            average += Math.abs(x - mean);\n        }\n        return average / numbers.size();",
    "grade-2": {
      "execution": 1
    },
    "3": "float mean = 0;\n        int n = numbers.size();\n        for (float number : numbers) {\n            mean += number;\n        }\n        mean /= n;\n        float total = 0;\n        for (float number : numbers) {\n            total += Math.abs(number - mean);\n        }\n        return total / n;",
    "grade-3": {
      "execution": 1
    },
    "4": "float sum = 0;\n        float mean = mean(numbers);\n        for (float f : numbers) {\n            sum += Math.abs(f - mean);\n        }\n        return sum / numbers.size();",
    "grade-4": {
      "execution": 0
    },
    "5": "float x_mean = mean(numbers);\n        float sum = 0;\n        for (Float x : numbers) {\n            sum += Math.abs(x - x_mean);\n        }\n        return sum / numbers.size();",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns True if the date is valid otherwise False.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n    public static boolean validDate(String date) {\n",
    "task_id": "124",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n",
    "simplified_intent": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
    "snippet": [
      "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "LocalDate date;\n        boolean isValid = true;\n        if (date.isEmpty()) {\n            isValid = false;\n        }\n\n        if (isValid) {\n            if (date.getDayOfMonth() < 1 || date.getDayOfMonth() > 31\n                    || date.getMonth() < 1 || date.getMonth() > 12\n                    || date.getYear() < 1950 || date.getYear() > 2020) {\n                isValid = false;\n            }\n        }\n\n        return isValid;",
    "grade-0": {
      "execution": 0
    },
    "1": "// TODO: Implement this function.\n        SimpleDateFormat df = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date d;\n        try {\n            d = df.parse(date);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        if (date.isEmpty()) {\n            return false;\n        }\n        int month;\n        try {\n            month = Integer.parseInt(date.substring(0, 2));\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n        switch (month) {\n            case 1:\n            case 3:\n            case 5:\n            case 7:\n            case 8:\n            case 10:\n            case 12:\n                // Ok\n                break;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n            case 2:\n            case 0:\n                // Not Ok\n                return false;\n            default:\n                // Not Ok\n                return false;\n        }\n        int day;\n        try {\n            day = Integer.parseInt(date.substring(3, 5));\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n        if (day <= 0 || day > 31) {\n            return false;\n        }\n        int year;\n        try {\n            year = Integer.parseInt(date.substring(6, 10));\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n        if (year < 1 || year > 99) {\n            return false;\n        }\n        // Ok\n        return true;",
    "grade-1": {
      "execution": 0
    },
    "2": "return !date.equals(\"\") && checkDateFormat(date) && validateDateRange(date);",
    "grade-2": {
      "execution": 0
    },
    "3": "try {\n          int month = Integer.parseInt(date.substring(0,2));\n          int day = Integer.parseInt(date.substring(3,5));\n          int year = Integer.parseInt(date.substring(6,10));\n          if(month == 2) {\n              if(day > 29) {\n                  return false;\n              }\n          } else if(Arrays.asList(1,3,5,7,8,10,12).contains(month)) {\n              if(day > 31) {\n                  return false;\n              }\n          } else if(Arrays.asList(4,6,9,11).contains(month)) {\n              if(day > 30) {\n                  return false;\n              }\n          }\n          if(month > 12) {\n              return false;\n          }\n          return true;\n      } catch(Exception e) {\n          return false;\n      }",
    "grade-3": {
      "execution": 1
    },
    "4": "boolean res = false;\n        String[] a = date.split(\"-\");\n        if (a.length == 3) {\n            String s_m = a[0];\n            String s_d = a[1];\n            String s_y = a[2];\n            int m = Integer.parseInt(s_m);\n            int d = Integer.parseInt(s_d);\n            int y = Integer.parseInt(s_y);\n            if (m > 0 && m < 13) {\n                if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n                    if (d > 0 && d < 32) {\n                        res = true;\n                    }\n                } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n                    if (d > 0 && d < 31) {\n                        res = true;\n                    }\n                } else if (m == 2) {\n                    if (d > 0 && d < 30) {\n                        res = true;\n                    }\n                }\n            }\n        }\n        return res;",
    "grade-4": {
      "execution": 1
    },
    "5": "// Write your code here.\n\t\t// We will check using the following rules:\n\t\t// 1. Check for empty string\n\t\t// 2. Split by '-' and check for 3 elements\n\t\t// 3. Check for proper order\n\t\t// 4. Check that mm is valid\n\t\t// 5. Check that dd is valid for the given mm\n\t\t// 6. Check that yyyy is valid\n\t\t\n\t\t// 1. Check for empty string\n\t\tif (date.length() == 0) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// 2. Split by '-' and check for 3 elements\n\t\tString[] dateArr = date.split(\"-\");\n\t\tif (dateArr.length != 3) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// 3. Check for proper order\n\t\tint mm = Integer.parseInt(dateArr[0]);\n\t\tint dd = Integer.parseInt(dateArr[1]);\n\t\tint yyyy = Integer.parseInt(dateArr[2]);\n\t\t\n\t\t// 4. Check that mm is valid\n\t\tif (mm < 1 || mm > 12) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// 5. Check that dd is valid for the given mm\n\t\tif (mm == 2) {\n\t\t\tif (dd < 1 || dd > 29) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (mm == 4 || mm == 6 || mm == 9 || mm == 11) {\n\t\t\tif (dd < 1 || dd > 30) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (dd < 1 || dd > 31) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 6. Check that yyyy is valid\n\t\tif (yyyy < 0) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    // (2.0, 2.2)\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    // (2.0, 2.0)\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n",
    "task_id": "20",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n",
    "simplified_intent": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
    "snippet": [
      "        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (numbers.size() < 2)\n            throw new IllegalArgumentException(\"Please supply at least two numbers!\");\n\n        float smallest = numbers.get(0f);\n        float largest = numbers.get(0);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            float current = (float) i / numbers.size();\n\n            float difference = Math.abs(current - numbers.get(i));\n            if (difference < smallest) {\n                smallest = difference;\n            } else if (difference > largest) {\n                largest = difference;\n            }\n        }\n\n        return new Pair(smallest, largest);",
    "grade-0": {
      "execution": 0
    },
    "1": "float minNumber = numbers.stream().min().getAsDouble();\n        float maxNumber = numbers.stream().max().getAsDouble();\n        double maxDiff = maxNumber - minNumber;\n\n        if (maxDiff > 1.0f) return new Pair(minNumber, maxNumber);\n\n        double minDiff = minNumber - maxNumber;\n\n        if (minDiff > 1.0f) return new Pair(maxNumber, minNumber);\n\n        int minIndex = 0;\n        int maxIndex = 1;\n        int minIndexChange = -1;\n        int maxIndexChange = 1;\n\n        while (minIndexChange < minIndex && maxIndexChange < maxIndex) {\n            double minElement = numbers.stream()\n                    .filter(i -> Math.abs(i - minNumber) < maxDiff)\n                    .filter(i -> Math.abs(i - maxNumber) < maxDiff)\n                    .findFirst().getAsDouble();\n\n            double maxElement = numbers.stream()\n                    .filter(i -> Math.abs(i - minNumber) < maxDiff)\n                    .filter(i -> Math.abs(i - maxNumber) < maxDiff)\n                    .findFirst().getAsDouble();\n\n            double minElementDiff = minNumber - minElement;\n\n            if (minElementDiff > 1.0f) minElement = minNumber;\n\n            double maxElementDiff = maxNumber - maxElement;\n\n            if (maxElementDiff > 1.0f) maxElement = maxNumber;\n\n            double diff = Math.abs(minElementDiff - maxElementDiff);\n\n            minIndexChange = minIndex;\n            maxIndexChange = maxIndex;\n            minIndex += 1;\n            maxIndex += 1;\n\n            if (diff > 1.0f) {\n                if (minIndex > maxIndex) {\n                    minIndex -= 1;\n                    maxIndex += 1;\n                } else {\n                    minIndex += 1;\n                    maxIndex += 1;\n                }\n            }\n        }\n\n        return new Pair(minNumber, maxNumber);",
    "grade-1": {
      "execution": 0
    },
    "2": "// Find two smallest values\n        int smallest = -1;\n        int secondSmallest = -1;\n        float smallestDistance = Float.MAX_VALUE;\n        float secondSmallestDistance = Float.MAX_VALUE;\n\n        for (int i = 0; i < numbers.size(); i++) {\n            float currentDistance = calculateDistance(numbers.get(i), numbers.get(i + 1));\n            if (currentDistance < smallestDistance) {\n                secondSmallest = smallest;\n                secondSmallestDistance = smallestDistance;\n                smallest = i;\n                smallestDistance = currentDistance;\n            } else if (currentDistance < secondSmallestDistance) {\n                secondSmallest = i;\n                secondSmallestDistance = currentDistance;\n            }\n        }\n        if (smallest == secondSmallest) {\n            return Pair.of((Float) numbers.get(smallest), (Float) numbers.get(secondSmallest));\n        }\n\n        // We have found an even number of elements,\n        // return the two smallest elements if the smallest element is the smallest\n        // otherwise return the two smallest elements if the second smallest element is the smallest.\n        float smallestDistance2 = Float.MAX_VALUE;\n        float secondSmallestDistance2 = Float.MAX_VALUE;\n        if (smallest == 0) {\n            for (int i = 0; i < numbers.size(); i++) {\n                if (smallestDistance > calculateDistance(numbers.get(i), numbers.get(i + 1))) {\n                    secondSmallest = i;\n                    secondSmallestDistance = smallestDistance;\n                    smallestDistance = calculateDistance(numbers.get(i), numbers.get(i + 1));\n                } else if (smallestDistance > secondSmallestDistance) {\n                    secondSmallest = i;\n                    secondSmallestDistance = smallestDistance;\n                }\n            }\n        } else if (secondSmallest == numbers.size() - 1) {\n            for (int i = 0; i < numbers.size(); i++) {\n                if (secondSmallestDistance > calculateDistance(numbers.get(i), numbers.get(i + 1))) {\n                    smallest = i;\n                    smallestDistance = calculateDistance(numbers.get(i), numbers.get(i + 1));\n                } else if (secondSmallestDistance > smallestDistance) {\n                    smallest = i;\n                    smallestDistance = secondSmallestDistance;\n                }\n            }\n        } else {\n            for (int i = 0; i < numbers.size(); i++) {\n                if (i == smallest) {\n                    if (smallestDistance > secondSmallestDistance2) {\n                        secondSmallest2 = secondSmallest;\n                        secondSmallestDistance2 = smallestDistance;\n                        smallestDistance2 = smallestDistance;\n                    } else if (smallestDistance > secondSmallest",
    "grade-2": {
      "execution": 0
    },
    "3": "// This problem is solved in a more general way. The solution is O(n) in number of elements,\n        // O(1) in space.\n        // The approach is to keep a minimum distance and a pair of points with this distance.\n        // Then to go through the list, compare current element to previous, if the distance is shorter,\n        // update the saved minimum distance and pair.\n        //\n        // We can skip any comparisons with the first element, since it has no previous.\n        //\n        // I've actually written the solution in a more general way, so it will work on any Comparable\n        // input, so long as the list is sorted.\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input must have at least two elements\");\n        }\n        numbers.sort(null);\n        // This is the tuple we will return\n        Pair<Float, Float> closest_elements = new Pair<>(numbers.get(0), numbers.get(1));\n        Float closest_distance = numbers.get(1) - numbers.get(0);\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            // compare the current element to the previous.\n            Float distance = numbers.get(i + 1) - numbers.get(i);\n            if (distance < closest_distance) {\n                closest_distance = distance;\n                closest_elements = new Pair<>(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        return closest_elements;",
    "grade-3": {
      "execution": 0
    },
    "4": "Pair<Float, Float> closest = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        double closestDiff = Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < closestDiff) {\n                    closestDiff = diff;\n                    closest = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closest;",
    "grade-4": {
      "execution": 0
    },
    "5": "if (numbers.size() == 0)\n            return null;\n        float closest = Math.abs(numbers.get(0) - numbers.get(1));\n        float first = numbers.get(0);\n        float second = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (temp < closest) {\n                    closest = temp;\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        return new Pair<Float, Float>(first, second);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique common elements for two lists.\n    // >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5, 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public static ArrayList<Integer> common(ArrayList<Integer> l1, ArrayList<Integer> l2) {\n",
    "task_id": "58",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n",
    "simplified_intent": "Return sorted unique common elements for two lists.",
    "snippet": [
      "        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Set<Integer> s = new HashSet<Integer>(l1);\n        s.addAll(l2);\n        ArrayList<Integer> result = new ArrayList<>(s);\n        Collections.sort(result);\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.removeAll(set2);\n        set1.retainAll(set2);\n        return set1.stream().distinct().sorted().collect(Collectors.toCollection(ArrayList::new));",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        l1.stream().filter(x->!set.add(x)).forEach(result::add);\n        l2.stream().filter(x->!set.add(x)).forEach(result::add);\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> res = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int x : l1) {\n            set.add(x);\n        }\n        for (int x : l2) {\n            if (set.contains(x)) {\n                res.add(x);\n            }\n        }\n        Collections.sort(res);\n        return res;",
    "grade-3": {
      "execution": 0
    },
    "4": "HashSet<Integer> hs = new HashSet<>();\n        hs.addAll(l1);\n        hs.retainAll(l2);\n        ArrayList<Integer> res = new ArrayList<>();\n        res.addAll(hs);\n        Collections.sort(res);\n        return res;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            if (l2.contains(l1.get(i)) && !res.contains(l1.get(i))) {\n                res.add(l1.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static int startsOneEnds(int n) {\n",
    "task_id": "83",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n",
    "simplified_intent": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
    "snippet": [
      "        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// The trick here is to simply count the number of times the number 1\n        // appears at the same position as your number.\n        // In other words, if your number is 7, the positions where the 1\n        // appears are at position 0, 1 and 2.\n        // We keep track of the previous number so that\n        // we can keep track of what the last position was when the\n        // last number was 1.\n        // We also need a way to keep track of what the last position was\n        // when number one was 1 at the start or when it was 1 at the end.\n        // In that case, the previous position will be the same as the\n        // current position. So just keep track of the previous number and\n        // then we can calculate the start or end position.\n        // The only trick is that if we are at the first or last position,\n        // we need to start or end with 1.\n        // The algorithm for calculating this will use recursion.\n        // The general algorithm would be:\n        // 1) If the current number is 1, return the number of times 1 appears\n        //    at the current position.\n        // 2) If the current number is not 1, then:\n        //    a) Find the last number that was 1 at the previous position.\n        //    b) Subtract the current number from that number.\n        //    c) Subtract the previous number from that number.\n        // 3) Increase the previous position.\n        // 4) Repeat until the number at current position is 1.\n        // 5) Return the number of times 1 appears at the current position.\n        // If the current position is equal to or greater than n, then\n        // there is no solution\n        int count = 0;\n        int previous = 0;\n        // This code is written for readability and is not optimized.\n        // It is written to run in Java 8.\n        if (n <= 0) {\n            return 0;\n        }\n        // This is our base case: when the current number is 1, we return\n        // the number of times 1 appears at the current position.\n        if (n == 1) {\n            return 1;\n        }\n        // If we are not at the first or last position, we need to make\n        // calculations to determine what is the last position that was\n        // 1 at the previous position.\n        // We also keep track of what the current position was at the end of\n        // the last number.\n        // In the case of 1, we want the previous position to be the current\n        // position because we need to start or end with 1.\n        // In the case of any other number, we want the previous position to\n        // be the number of times 1 appears at the previous position.\n        // The algorithm will use the previous position.\n        if (previous != 0 && previous != n) {\n            int difference = n - previous;\n            int lastNumber = startsOneEnds(previous);\n            int numberOfTimesLastNumberAppearsAtLastPosition = difference - lastNumber;\n            int numberOfTimesLastNumberAppearsAtPreviousPosition =",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayDeque<Integer> queue = new ArrayDeque<>();\n        queue.addFirst(0);\n        queue.addLast(1);\n        queue.addLast(2);\n        queue.addLast(3);\n        queue.addLast(4);\n        queue.addLast(5);\n        queue.addLast(6);\n        queue.addLast(7);\n        queue.addLast(8);\n        queue.addLast(9);\n        int count = 0;\n        while (queue.size() > 0) {\n            if (queue.peekLast() == n) {\n                queue.removeLast();\n                count++;\n            } else {\n                queue.removeLast();\n                queue.removeLast();\n            }\n        }\n        return count;",
    "grade-1": {
      "execution": 0
    },
    "2": "int count = 0;\n        for (int i = n; i > 0; i--) {\n            String s = Integer.toString(i);\n            if (s.equals(\"1\")) {\n                count++;\n                if (s.length() == n) {\n                    break;\n                }\n            }\n        }\n        return count;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (n == 1) {\n            return 10;\n        } else {\n            return (int) Math.pow(10, n - 1) + 9 * (int) Math.pow(10, n - 2);\n        }",
    "grade-3": {
      "execution": 0
    },
    "4": "if (n == 1) {\n            return 1;\n        }\n        int m = (int)Math.pow(10, n - 1);\n        return m + 9 * (m - 1);",
    "grade-4": {
      "execution": 0
    },
    "5": "return count(n);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return True is list elements are monotonically increasing or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n",
    "task_id": "57",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n",
    "simplified_intent": "Return True is list elements are monotonically increasing or decreasing.",
    "snippet": [
      "        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "IntStream.range(0, l.size() - 1).filter(i -> l.get(i) > l.get(i + 1)).count() != 0;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (l.isEmpty()) {\n            return true;\n        }\n        List<Integer> l2 = l.stream().sorted().collect(Collectors.toList());\n        return l.get(0) == l2.get(0);",
    "grade-1": {
      "execution": 0
    },
    "2": "Set<Integer> set = new HashSet<>(l);\n        boolean increasing = true;\n        for (Integer e : set) {\n            if (set.size() > 1) {\n                if (e < set.get((set.size() - 1)))\n                    increasing = false;\n            }\n            if (e < set.get(0))\n                increasing = false;\n        }\n        return increasing;",
    "grade-2": {
      "execution": 0
    },
    "3": "boolean isMonotonic = true;\n        int firstElement = l.get(0);\n        int lastElement = l.get(l.size() - 1);\n        boolean increasing = firstElement < lastElement;\n        boolean decreasing = firstElement > lastElement;\n        if (increasing) {\n            for (int i = 0; i < l.size() - 1; i++) {\n                int n = l.get(i);\n                int next = l.get(i + 1);\n                if (n > next) {\n                    isMonotonic = false;\n                    break;\n                }\n            }\n        } else if (decreasing) {\n            for (int i = 0; i < l.size() - 1; i++) {\n                int n = l.get(i);\n                int next = l.get(i + 1);\n                if (n < next) {\n                    isMonotonic = false;\n                    break;\n                }\n            }\n        }\n        return isMonotonic;",
    "grade-3": {
      "execution": 1
    },
    "4": "return l.stream().reduce(0, (x, y) -> {\n            if (x < 0) {\n                return x;\n            }\n            if (x == 0) {\n                return y;\n            }\n            return y - x;\n        }) < 0 || l.stream().reduce(0, (x, y) -> {\n            if (x > 0) {\n                return x;\n            }\n            if (x == 0) {\n                return y;\n            }\n            return y - x;\n        }) > 0;",
    "grade-4": {
      "execution": 0
    },
    "5": "if (l.size() <= 1) {\n            return true;\n        }\n        int res = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int diff = l.get(i) - l.get(i - 1);\n            if (diff == 0) {\n                continue;\n            }\n            diff = Integer.signum(diff);\n            if (res == 0) {\n                res = diff;\n            } else if (res != diff) {\n                return false;\n            }\n        }\n        return true;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n    public static String intToMiniRoman(int number) {\n",
    "task_id": "156",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n",
    "simplified_intent": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
    "snippet": [
      "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "switch (number) {\n            case 1:\n                return \"I\";\n            case 2:\n                return \"II\";\n            case 3:\n                return \"III\";\n            case 4:\n                return \"IV\";\n            case 5:\n                return \"V\";\n            case 6:\n                return \"VI\";\n            case 7:\n                return \"VII\";\n            case 8:\n                return \"VIII\";\n            case 9:\n                return \"IX\";\n            case 10:\n                return \"X\";\n            case 11:\n                return \"XI\";\n            case 12:\n                return \"XII\";\n            case 13:\n                return \"XIII\";\n            case 14:\n                return \"XIV\";\n            case 15:\n                return \"XV\";\n            case 16:\n                return \"XVI\";\n            case 17:\n                return \"XVII\";\n            case 18:\n                return \"XVIII\";\n            case 19:\n                return \"XIX\";\n            case 20:\n                return \"XX\";\n            case 21:\n                return \"XXI\";\n            case 22:\n                return \"XXII\";\n            case 23:\n                return \"XXIII\";\n            case 24:\n                return \"XXIV\";\n            case 25:\n                return \"XXV\";\n            case 26:\n                return \"XXVI\";\n            case 27:\n                return \"XXVII\";\n            case 28:\n                return \"XXVIII\";\n            case 29:\n                return \"XXIX\";\n            case 30:\n                return \"XXX\";\n            case 31:\n                return \"XXXI\";\n            case 32:\n                return \"XXXII\";\n            case 33:\n                return \"XXXIII\";\n            case 34:\n                return \"XXXIV\";\n            case 35:\n                return \"XXXV\";\n            case 36:\n                return \"XXXVI\";\n            case 37:\n                return \"XXXVII\";\n            case 38:\n                return \"XXXVIII\";\n            case 39:\n                return \"XXXIX\";\n            case 40:\n                return \"XL\";\n            case 41:\n                return \"L\";\n            case 42:\n                return \"LX\";\n            case 43:\n                return \"LX\";\n            case 44:\n                return \"LXX\";\n            case 45:\n                return \"LXXX\";\n            case 46:\n                return \"LXXXX\";\n            case 47:\n                return \"LXXVI\";\n            case 48:\n                return \"LXXVII\";\n            case 49:\n                return \"LXXVIII\";\n            case 50:\n                return \"LXXIX\";\n            case 51:\n                return \"LXXXI\";\n            case 52:\n                return \"LXXXII",
    "grade-0": {
      "execution": 0
    },
    "1": "int[] miniRoman = new int[1000];\n        for (int i=1;i<=97;i++) {\n            miniRoman[i] = i+1;\n        }\n        for (int i=10;i<=99;i++) {\n            miniRoman[i] = i;\n        }\n        for(int i=1000;i>0;i-=10) {\n            miniRoman[i] = i+1;\n        }\n        char[] digits = new char[number];\n        Arrays.fill(digits,'.');\n        String roman = \"\";\n        Arrays.stream(miniRoman).forEach(i -> digits[number - i] = roman.charAt(number - i));\n        return String.valueOf(digits);",
    "grade-1": {
      "execution": 0
    },
    "2": "if (number == 0)\n            return \"\";\n        List<String> list = new ArrayList<>();\n        int remainder = number % 100;\n        list.add(remainder / 10 + \"\" + remainder % 10);\n        int i = 2;\n        while (i < number) {\n            list.add(i % 10 + \"\" + i / 10);\n            i += 2;\n        }\n        for (int j = list.size() - 1; j >= 0; j--) {\n            String roman = list.get(j);\n            int v = roman.charAt(0) - '0';\n            if (v > 0) {\n                list.add(roman.substring(1));\n            } else {\n                list.remove(v);\n            }\n        }\n        return list.toString().toLower();",
    "grade-2": {
      "execution": 0
    },
    "3": "StringBuilder sb = new StringBuilder();\n        while (number >= 1000) {\n            sb.append('m');\n            number -= 1000;\n        }\n        while (number >= 500) {\n            sb.append('d');\n            number -= 500;\n        }\n        while (number >= 100) {\n            sb.append('c');\n            number -= 100;\n        }\n        while (number >= 50) {\n            sb.append('l');\n            number -= 50;\n        }\n        while (number >= 10) {\n            sb.append('x');\n            number -= 10;\n        }\n        while (number >= 5) {\n            sb.append('v');\n            number -= 5;\n        }\n        while (number >= 1) {\n            sb.append('i');\n            number -= 1;\n        }\n        return sb.toString();",
    "grade-3": {
      "execution": 0
    },
    "4": "StringBuilder romanNumber = new StringBuilder();\n        if (number == 0) {\n            return \"\";\n        }\n        for (int i = 1; i <= number; i++) {\n            romanNumber.append(\"i\");\n        }\n        romanNumber.replace(0, 1, \"I\");\n        romanNumber.replace(1, 3, \"V\");\n        romanNumber.replace(2, 4, \"X\");\n        romanNumber.replace(3, 5, \"L\");\n        romanNumber.replace(4, 6, \"C\");\n        romanNumber.replace(5, 7, \"D\");\n        romanNumber.replace(6, 8, \"M\");\n        romanNumber.replace(7, 9, \"V'\");\n        romanNumber.replace(8, 10, \"X'\");\n        romanNumber.replace(9, 11, \"L'\");\n        romanNumber.replace(10, 12, \"C'\");\n        romanNumber.replace(11, 13, \"D'\");\n        romanNumber.replace(12, 14, \"M'\");\n        romanNumber.replace(13, 15, \"V''\");\n        romanNumber.replace(14, 16, \"X''\");\n        romanNumber.replace(15, 17, \"L''\");\n        romanNumber.replace(16, 18, \"C''\");\n        romanNumber.replace(17, 19, \"D''\");\n        romanNumber.replace(18, 20, \"M''\");\n        romanNumber.replace(19, 20, \"X'''\");\n        romanNumber.replace(20, 21, \"L'''\");\n        romanNumber.replace(21, 22, \"C'''\");\n        romanNumber.replace(22, 23, \"D'''\");\n        romanNumber.replace(23, 24, \"M'''\");\n        romanNumber.replace(24, 25, \"X''''\");\n        romanNumber.replace(25, 26, \"L''''\");\n        romanNumber.replace(26, 27, \"C''''\");\n        romanNumber.replace(27, 28, \"D''''\");\n        romanNumber.replace(",
    "grade-4": {
      "execution": 0
    },
    "5": "// replace this with your code\n        return \"\";",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given two positive integers n and m, and your task is to compute the\n    // average of the integers from n through m (including n and m). \n    // Round the answer to the nearest integer and convert that to binary.\n    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static Union_String_int roundedAvg(int n, int m) {\n",
    "task_id": "103",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n",
    "simplified_intent": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
    "snippet": [
      "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(n>m){\n            return new Union_String_int(-1,\"\");\n        }\n        int start = 0;\n        int end = n+m;\n        StringBuilder sb = new StringBuilder();\n        while(start<end){\n            int index = Math.min(start,end);\n            int value = index-(n+m);\n            sb.append(Integer.toString(value));\n            if(start<end-1){\n                sb.append(\",\");\n            }\n            start = index+1;\n        }\n        start = n+m;\n        while(start<end){\n            int index = Math.min(start,end);\n            int value = n+m-index;\n            sb.append(Integer.toString(value));\n            if(start<end-1){\n                sb.append(\",\");\n            }\n            start = index+1;\n        }\n        \n        int index = Math.min(start,end);\n        int value = n+m-index;\n        sb.append(Integer.toString(value));\n        \n        return new Union_String_int(Integer.parseInt(sb.toString()),\"\");",
    "grade-0": {
      "execution": 0
    },
    "1": "Union_String_int us = new Union_String_int(null, 0);\n        \n        // write your logic here\n        int n1 = Math.min(Math.max(n, 1), m);\n        int m1 = Math.min(Math.max(m, 1), n);\n        int avg = n1 + m1;\n        \n        // return your answer in binary format\n        if (avg == n) {\n            \n            \n        } else {\n            return -1;\n        }",
    "grade-1": {
      "execution": 0
    },
    "2": "String result = \"\";\n        Union_Int_String nToM = new Union_Int_String(n, m);\n        // Write your code here.\n        if (nToM.getA() == nToM.getB()) \n            return new Union_String_int(nToM);\n        \n        for (int i = nToM.getA(); i <= nToM.getB(); i++ ) {\n            if (i < nToM.getA()){\n                result += Integer.toBinaryString(i);\n            }\n            if (i > nToM.getB()){\n                result += Integer.toBinaryString(i-nToM.getB());\n            }\n        }\n        \n        return new Union_String_int(result);",
    "grade-2": {
      "execution": 0
    },
    "3": "if (n > m) {\n            return new Union_String_int(new Variant_int(-1));\n        }\n        double sum = 0;\n        int avg = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        avg = (int) Math.round(sum / (m - n + 1));\n        return new Union_String_int(new Variant_String(\"0b\" + Integer.toBinaryString(avg)));",
    "grade-3": {
      "execution": 0
    },
    "4": "if (n > m) {\n            return new Union_String_int(0, -1);\n        }\n        double avg = (double)(n + m) / 2;\n        long rounded = Math.round(avg);\n        String binary = Long.toBinaryString(rounded);\n        return new Union_String_int(0, binary);",
    "grade-4": {
      "execution": 0
    },
    "5": "// your code goes here\n        return null;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return True if all numbers in the list l are below threshold t.\n    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1, 20, 4, 10], 5)\n    // False\n    public static boolean belowThreshold(ArrayList<Integer> l, int t) {\n",
    "task_id": "52",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n",
    "simplified_intent": "Return True if all numbers in the list l are below threshold t.",
    "snippet": [
      "        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int threshold = t;\n        for(int num : l) {\n            if(num < threshold) {\n                return false;\n            }\n            threshold--;\n        }\n        return true;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (l == null) return false;\n        if (l.size() == 0) return false;\n        double sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your code here\n        \n        \n        int i=0;\n        boolean b = true;\n        \n        \n        while (b && i<l.size()){\n            \n            if(l.get(i)<t)\n            {\n                b = false;\n            }\n            i++;\n        }\n        \n        \n        return b;",
    "grade-2": {
      "execution": 0
    },
    "3": "return l.stream().mapToInt(e -> e).allMatch(e -> e < t);",
    "grade-3": {
      "execution": 1
    },
    "4": "return true;",
    "grade-4": {
      "execution": 0
    },
    "5": "// TODO: Implement this.\n        return l.stream().allMatch(x -> x < t);",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns True if the string\n    // length is a prime number or False otherwise\n    // Examples\n    // prime_length('Hello') == True\n    // prime_length('abcdcba') == True\n    // prime_length('kittens') == True\n    // prime_length('orange') == False\n    public static boolean primeLength(String string) {\n",
    "task_id": "82",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n",
    "simplified_intent": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
    "snippet": [
      "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (string.length() < 2) {\n            return false;\n        }\n        int n = 0;\n        long i = 2;\n        while (i <= string.length()) {\n            if (string.charAt(n - 1) == '0') {\n                return true;\n            }\n            if (i % string.charAt(n - 1) == 0) {\n                return false;\n            }\n            n++;\n            i += 2;\n        }\n        return true;",
    "grade-0": {
      "execution": 0
    },
    "1": "return string.length() == 1 || (string.length() > 1 && string.length() % 2 == 0 && primeNumber(string.length()));",
    "grade-1": {
      "execution": 0
    },
    "2": "if (string.length() < 2)\n            return false;\n        int flag = 0;\n        for (int i = 3; i <= string.length() - 1; i++) {\n            if (string.charAt(i) == string.charAt(i - 1))\n                flag = 1;\n            if (string.charAt(i) == string.charAt(i - 2))\n                flag++;\n            if (string.charAt(i) == string.charAt(i - 3))\n                flag++;\n            if (flag > 1)\n                break;\n        }\n        if (flag == 0)\n            return true;\n        return false;",
    "grade-2": {
      "execution": 0
    },
    "3": "int strLength = string.length();\n        if (strLength == 1) return false;\n        if (strLength == 2) return true;\n        if (strLength % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(strLength); i += 2) {\n            if (strLength % i == 0) return false;\n        }\n        return true;",
    "grade-3": {
      "execution": 1
    },
    "4": "return (new HashSet<Integer>(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)).contains(string.length()));",
    "grade-4": {
      "execution": 1
    },
    "5": "// write code here\n        return false;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    // False\n    // >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    // True\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n",
    "task_id": "0",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n",
    "simplified_intent": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
    "snippet": [
      "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "HashMap<Float, Float> numbersByDistance = new HashMap<>();\n        for (float number : numbers) {\n            Float distance = null;\n            if (numbersByDistance.containsKey(number)) {\n                distance = numbersByDistance.get(number);\n            } else {\n                distance = computeDistance(number);\n                numbersByDistance.put(number, distance);\n            }\n            if (distance != null) {\n                Float difference = distance - threshold;\n                if (Math.abs(difference) < 0.1f) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "grade-0": {
      "execution": 0
    },
    "1": "Arrays.sort(numbers);\n        for (int i = 0; i < numbers.size()-1; i++) {\n            if (numbers.get(i+1) - numbers.get(i) > threshold) {\n                return true;\n            }\n        }\n        return false;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (numbers == null) {\n            return false;\n        }\n        ArrayList<Float> close = new ArrayList<>(numbers);\n        close.removeIf((value) -> Math.abs(value - threshold) < Math.sqrt(numbers.size()));\n        return close.isEmpty() ? false : true;",
    "grade-2": {
      "execution": 0
    },
    "3": "for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i+1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "grade-3": {
      "execution": 1
    },
    "4": "// float prev = numbers.get(0);\n        // float curr = 0;\n        // for (int i = 1; i < numbers.size(); i++) {\n        //     curr = numbers.get(i);\n        //     if (Math.abs(curr - prev) < threshold) {\n        //         return true;\n        //     }\n        //     prev = curr;\n        // }\n        // return false;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "grade-4": {
      "execution": 1
    },
    "5": "Collections.sort(numbers);\n\tfor (int i = 0; i < numbers.size() - 1; i++) {\n\t    if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a tuple containing the result string and True/False for the check.\n    // Example\n    // For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n",
    "task_id": "112",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n",
    "simplified_intent": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
    "snippet": [
      "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Solve\n        // 1. Get the length of s and c.\n        int n = s.length();\n        int m = 0;\n        while (m < n) {\n            if (s.charAt(m) == c.charAt(m)) {\n                m++;\n            } else {\n                break;\n            }\n        }\n        // 2. Iterate over s and c.\n        int p = 0;\n        int i = m;\n        int j = 0;\n        while (i < n && j < m) {\n            if (s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else if (s.charAt(i) > c.charAt(j)) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        // 3. Delete m from the s string.\n        StringBuilder sb = new StringBuilder(s.substring(0, i));\n        return sb.reverse().toString();",
    "grade-0": {
      "execution": 0
    },
    "1": "int[] s = new int[c.length()];\n        int index = 0;\n        int flag = true;\n        for (int i = 0; i < s.length(); i++) {\n            s[i] = c.charAt(i) - 'a';\n        }\n        StringBuilder sb = new StringBuilder();\n        boolean isRevDelete = true;\n        while (index < s.length() && flag) {\n            int value = s[index];\n            for (int i = s.length() - 1; i >= index; i--) {\n                if (s[i] == value) {\n                    isRevDelete = false;\n                    break;\n                }\n            }\n            sb.append(value);\n            index++;\n            flag = isRevDelete;\n        }\n        int n = sb.length();\n        if (isRevDelete && n == s.length) {\n            return Pair.of(sb.reverse().toString(), true);\n        } else {\n            return Pair.of(sb.reverse().toString(), false);\n        }",
    "grade-1": {
      "execution": 0
    },
    "2": "Map<Character, Integer> counter = new HashMap<>();\n        for(int i : s.toCharArray()) {\n            if(!counter.containsKey(i))\n                counter.put(i, 1);\n            else\n                counter.put(i, counter.get(i) + 1);\n        }\n        \n        List<Integer> list = new ArrayList<>(counter.keySet());\n        Collections.sort(list);\n        \n        for(int i = 0; i < list.size() - 1; i++) {\n            if((counter.get(list.get(i)) == counter.get(list.get(i + 1))) && (list.get(i) == list.get(i + 1))) {\n                Collections.swap(list, i, i + 1);\n            }\n        }\n        \n        Collections.reverse(list);\n        \n        boolean result = true;\n        \n        for(int i = 0; i < list.size(); i++) {\n            if(counter.get(list.get(i)) == counter.get(list.get(i + 1)))\n                result = false;\n        }\n        \n        if(result)\n            return new Pair<String, Boolean>(\"True\", true);\n        \n        Map<Character, Integer> counterReverse = new HashMap<>();\n        for(int i : s.toCharArray()) {\n            if(!counterReverse.containsKey(i))\n                counterReverse.put(i, 1);\n            else\n                counterReverse.put(i, counterReverse.get(i) + 1);\n        }\n        \n        list = new ArrayList<>(counterReverse.keySet());\n        Collections.sort(list);\n        \n        for(int i = 0; i < list.size() - 1; i++) {\n            if((counterReverse.get(list.get(i)) == counterReverse.get(list.get(i + 1))) && (list.get(i) == list.get(i + 1))) {\n                Collections.swap(list, i, i + 1);\n            }\n        }\n        \n        Collections.reverse(list);\n        \n        result = true;\n        \n        for(int i = 0; i < list.size(); i++) {\n            if(counterReverse.get(list.get(i)) == counterReverse.get(list.get(i + 1)))\n                result = false;\n        }\n        \n        if(result)\n            return new Pair<String, Boolean>(\"True\", true);\n        \n        return new Pair<String, Boolean>(\"False\", false);",
    "grade-2": {
      "execution": 0
    },
    "3": "throw new UnsupportedOperationException(\"Not implemented\");",
    "grade-3": {
      "execution": 0
    },
    "4": "// write your code here\n        return null;",
    "grade-4": {
      "execution": 0
    },
    "5": "// Write your code here\n        return new Pair<String, Boolean>(\"\", false);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return True if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // is_nested('[[]]') \u279e True\n    // is_nested('[]]]]]]][[[[[]') \u279e False\n    // is_nested('[][]') \u279e False\n    // is_nested('[]') \u279e False\n    // is_nested('[[][]]') \u279e True\n    // is_nested('[[]][[') \u279e True\n    public static boolean isNested(String string) {\n",
    "task_id": "132",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n",
    "simplified_intent": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
    "snippet": [
      "        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Write your code here\n        List<String> list = new ArrayList<>();\n        boolean result = true;\n        Stack<String> stack = new Stack<>();\n\n        for(char c: string.toCharArray()){\n            if(c == '[') \n                stack.push(c);\n            if(c == ']'){\n                boolean found = false;\n                if(stack.peek() == '[') \n                    stack.peek();\n                if(!stack.peek().equals(c))\n                    result = false;\n                if(!stack.peek().equals(c)) \n                    result = false;\n                stack.pop();\n                if(stack.peek() == '[') \n                    stack.peek();\n                if(!stack.peek().equals(c))\n                    result = false;\n                if(!stack.peek().equals(c)) \n                    result = false;\n                stack.pop();\n            }\n            list.add(String.valueOf(c));\n        }\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (string == null || string.trim().isEmpty()) return false;\n        if (string.equals(\"[]\")) return true;\n        \n        List<Integer> nesting = new ArrayList<>();\n        int nestingLevel = 0;\n        \n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                nesting.add(nestingLevel);\n            } else if (c == ']') {\n                nesting.remove(nestingLevel);\n            }\n            nestingLevel++;\n        }\n        \n        return nesting.contains(nestingLevel);",
    "grade-1": {
      "execution": 0
    },
    "2": "boolean returnValue = false;\n\n        Stack<String> stack = new Stack<>();\n        stack.push(\"\");\n        for(char ch: string.toCharArray())\n        {\n            boolean foundBracket = false;\n            while(!foundBracket && stack.size() > 0)\n            {\n                char nextChar = stack.pop();\n                if(ch == '[')\n                {\n                    stack.push(nextChar);\n                    foundBracket = true;\n                }\n                else if(ch == ']')\n                {\n                    if(stack.size() <= 0)\n                    {\n                        break;\n                    }\n                    char poppedChar = stack.pop();\n                    if(poppedChar == '[')\n                    {\n                        stack.push(nextChar);\n                        foundBracket = true;\n                    }\n                }\n                else if(ch == ']' && stack.size() > 0)\n                {\n                    char poppedChar = stack.pop();\n                    if(poppedChar == '[')\n                    {\n                        stack.push(nextChar);\n                        foundBracket = true;\n                    }\n                }\n            }\n\n            if(!foundBracket)\n            {\n                stack.push(ch);\n            }\n        }\n\n        if(stack.size() <= 0)\n        {\n            returnValue = true;\n        }\n        else if(stack.size() > 1)\n        {\n            returnValue = false;\n        }\n\n        return returnValue;",
    "grade-2": {
      "execution": 0
    },
    "3": "int count = 0;\n        int open = 0;\n        int close = 0;\n        boolean result = false;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                open++;\n            } else if (string.charAt(i) == ']') {\n                close++;\n            }\n            if (close > open) {\n                return false;\n            }\n        }\n        if (close < open) {\n            return false;\n        }\n        return true;",
    "grade-3": {
      "execution": 0
    },
    "4": "return string.chars().filter(c -> c == '[').count() != string.chars().filter(c -> c == ']').count() || \n            string.matches(\"(\\\\[\\\\[\\\\])+\") || string.matches(\"(\\\\]\\\\]\\\\])+\");",
    "grade-4": {
      "execution": 0
    },
    "5": "Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char letter = string.charAt(i);\n            if (letter == '[') {\n                stack.push(letter);\n            } else if (letter == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sort_even([1, 2, 3])\n    // [1, 2, 3]\n    // >>> sort_even([5, 6, 3, 4])\n    // [3, 6, 5, 4]\n    public static ArrayList<Integer> sortEven(ArrayList<Integer> l) {\n",
    "task_id": "37",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n",
    "simplified_intent": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
    "snippet": [
      "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> l2 = new ArrayList<Integer>(l.size());\n        for (int i=0; i<l.size(); i+=2) {\n            l2.add(l.get(i));\n        }\n        Collections.sort(l2);\n        for (int i=1; i<l.size(); i+=2) {\n            l2.set(i, l2.get(i-1));\n        }\n        return l2;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> even = new ArrayList<Integer>();\n        ArrayList<Integer> odd = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i += 2) {\n            odd.add(l.get(i));\n            even.add(l.get(i + 1));\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        sorted.addAll(odd);\n        sorted.addAll(even);\n        return sorted;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> l2 = new ArrayList<>();\n        int i;\n        for (i = l.size(); i > 0; i--) {\n            l2.add(l.get(i));\n        }\n\n        int i2 = l2.size() / 2;\n        while (i2 > l) {\n            l2.add(l.get(i2));\n            i2--;\n        }\n\n        l2.addAll(l.subList(i * 2, l.size()));\n        return l2;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (l.size() == 0) {\n            return l;\n        }\n        ArrayList<Integer> left = new ArrayList<Integer>();\n        ArrayList<Integer> right = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                left.add(l.get(i));\n            } else {\n                right.add(l.get(i));\n            }\n        }\n        left = sort(left);\n        for (int i = 0; i < left.size(); i++) {\n            right.add(i * 2, left.get(i));\n        }\n        return right;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                ArrayList<Integer> current_pare = new ArrayList<Integer>();\n                current_pare.add(l.get(i));\n                result.add(current_pare.get(0));\n                Collections.sort(current_pare);\n                result.set(i - 1, current_pare.get(0));\n                result.set(i, current_pare.get(1));\n            }\n        }\n        return result;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> evens = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) evens.add(l.get(i));\n        }\n        evens.sort(Comparator.naturalOrder());\n        int k = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) l.set(i, evens.get(k++));\n        }\n        return l;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this Kata, you have to sort an array of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n",
    "task_id": "116",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n",
    "simplified_intent": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
    "snippet": [
      "                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Write your code here.\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i = 0; i<arr.size(); i++) {\n            int count = 0;\n            while(arr.get(i) != 0) {\n                count++;\n                arr.get(i)--;\n            }\n            res.add((i+1)*count);\n        }\n        Collections.sort(res);\n        return res;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> result = new ArrayList<>();\n        Integer lastValue = null;\n        int oneCounter = 0;\n        for (int num : arr) {\n            if (num == Integer.MIN_VALUE) {\n                oneCounter = 0;\n            }\n            if (oneCounter != 0) {\n                result.add(lastValue);\n                oneCounter = 0;\n            }\n            lastValue = num;\n            oneCounter++;\n        }\n        if (oneCounter != 0) {\n            result.add(lastValue);\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> sorted = new ArrayList<>();\n        arr.forEach((x) -> {\n            long val = Long.parseLong(Integer.toBinaryString(x));\n            int oneCount = Integer.parseInt(Integer.toBinaryString(val));\n            int decCount = Integer.parseInt(Integer.toBinaryString(val % 1));\n            sorted.add(decCount + oneCount);\n        });\n        Collections.sort(sorted);\n        return sorted;",
    "grade-2": {
      "execution": 0
    },
    "3": "arr.sort(Comparator.comparing(Integer::bitCount)\n                .thenComparing(Integer::intValue));\n        return arr;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.addAll(arr);\n        Collections.sort(ans, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int o1o = Integer.bitCount(o1);\n                int o2o = Integer.bitCount(o2);\n                if (o1o == o2o)\n                    return o1 - o2;\n                return o1o - o2o;\n            }\n        });\n        return ans;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> result = new ArrayList<Integer>();\n        List<Pair<Integer, Integer>> pairList = new ArrayList<Pair<Integer, Integer>>();\n        HashMap<Integer, Integer> onesMap = new HashMap<Integer, Integer>();\n        int ones = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ones = Integer.bitCount(arr.get(i));\n            onesMap.put(ones, arr.get(i));\n            pairList.add(new Pair<Integer, Integer>(ones, arr.get(i)));\n        }\n        Collections.sort(pairList, new SortByKey());\n        // pairList.forEach(item -> System.out.println(item.getValue0() + \" - \" + item.getValue1()));\n        pairList.forEach(item -> result.add(item.getValue1()));\n        // result.forEach(item -> System.out.println(item));\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1, 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    public static ArrayList<Integer> getPositive(ArrayList<Integer> l) {\n",
    "task_id": "30",
    "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n",
    "simplified_intent": "Return only positive numbers in the list.",
    "snippet": [
      "        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> n = new ArrayList<>();\n        for (Integer i : l)\n            if (i >= 0) n.add(i);\n        return n;",
    "grade-0": {
      "execution": 0
    },
    "1": "int i = 0;\n        for (Integer i : l) {\n            if (i >= 0) l.add(i);\n        }\n        l.sort(Comparator.naturalOrder());\n        return l;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
    "grade-2": {
      "execution": 1
    },
    "3": "return null;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> newL = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                newL.add(i);\n            }\n        }\n        return newL;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                out.add(i);\n            }\n        }\n        return out;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    public static String antiShuffle(String s) {\n",
    "task_id": "86",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n",
    "simplified_intent": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
    "snippet": [
      "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Set<String> set = new HashSet<>(Arrays.asList(s.split(\" \")));\n        StringBuilder builder = new StringBuilder();\n        \n        for(String str : set){\n            int size = str.length();\n            for(int i = 0; i < size; i++){\n                char ch = str.charAt(i);\n                builder.append(ch);\n            }\n            builder.append(\" \");\n        }\n        \n        String result = builder.toString();\n        \n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "// write your code here\n        \n        String[] words = s.split(\" \");\n        Arrays.sort(words);\n        StringBuilder sb = new StringBuilder();\n        for(String word : words){\n            sb.append(word);\n        }\n        return sb.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "if (s == null || s.isEmpty()) {\n            return s;\n        }\n        s = antiShuffle(s, new LinkedList<String>());\n        StringBuilder sb = new StringBuilder();\n        for (String str : s) {\n            sb.append(str);\n        }\n        return sb.toString();",
    "grade-2": {
      "execution": 0
    },
    "3": "return Stream.of(s.split(\" \"))\n                .map(String::chars)\n                .map(i -> i.sorted()\n                    .collect(StringBuilder::new,\n                            StringBuilder::appendCodePoint,\n                            StringBuilder::append)\n                    .toString())\n                .collect(Collectors.joining(\" \"));",
    "grade-3": {
      "execution": 1
    },
    "4": "String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            words[i] = antiShuffleWord(words[i]);\n        }\n        return String.join(\" \", words);",
    "grade-4": {
      "execution": 0
    },
    "5": "StringBuilder result = new StringBuilder();\n        for (String word : s.split(\" \")) {\n            List<Character> chars = new ArrayList<>();\n            for (char c : word.toCharArray()) {\n                chars.add(c);\n            }\n            Collections.sort(chars);\n            for (Character c : chars) {\n                result.append(c);\n            }\n            result.append(\" \");\n        }\n        return result.toString().trim();",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    // Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    public static ArrayList<Integer> compare(ArrayList<Integer> game, ArrayList<Integer> guess) {\n",
    "task_id": "152",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n",
    "simplified_intent": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
    "snippet": [
      "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Your code here",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> guesses = new ArrayList<Integer>();\n        ArrayList<Integer> scores = new ArrayList<Integer>();\n        for(int i = 0; i < game.size(); i++) {\n            guesses.add(guess.get(i));\n            scores.add(game.get(i));\n        }\n        Arrays.sort(guesses);\n        Arrays.sort(scores);\n        ArrayList<Integer> wrong = new ArrayList<Integer>();\n        for (int i = 0; i < guesses.size(); i++) {\n            if (guess.get(i) != scores.get(i)) {\n                wrong.add(i);\n            }\n        }\n        return wrong;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> results = new ArrayList<>();\n        ArrayList<Integer> difference = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (guess.get(i) == game.get(i)) {\n                results.add(guess.get(i));\n            } else {\n                difference.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return difference;",
    "grade-2": {
      "execution": 0
    },
    "3": "// insert your code here ...\n        return new ArrayList<Integer>();",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            ans.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return ans;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int actual = game.get(i);\n            int score = guess.get(i);\n            int diff = Math.abs(actual - score);\n            result.add(diff);\n        }\n        return result;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Out of list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    public static Optional<String> longest(ArrayList<String> strings) {\n",
    "task_id": "12",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n",
    "simplified_intent": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
    "snippet": [
      "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (String s : strings) {\n            Integer value = map.get(s);\n            if (value == null) {\n                map.put(s, 1);\n            } else {\n                map.put(s, value + 1);\n            }\n        }\n        List<String> sorted = new ArrayList<>(map.keySet());\n        Collections.sort(sorted);\n        String largest = sorted.get(sorted.size() - 1);\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == largest) {\n                return Optional.ofNullable(entry.getKey());\n            }\n        }\n        return Optional.empty();",
    "grade-0": {
      "execution": 0
    },
    "1": "if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        ArrayList<String> sorted = new ArrayList<>(strings);\n        Collections.sort(sorted);\n        return sorted.stream()\n                .distinct()\n                .map(s -> s.length() == strings.get(0).length() ? s : null)\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .findFirst();",
    "grade-1": {
      "execution": 0
    },
    "2": "if (strings.size() <= 0)\n            return Optional.empty();\n\n        Comparator<String> lengthComparator = (a, b) -> a.length() - b.length();\n        Collections.sort(strings, lengthComparator);\n\n        if (strings.get(strings.size() - 1).length() == strings.get(strings.size() - 2).length()) {\n            return Optional.of(strings.get(strings.size() - 1));\n        }\n\n        return Optional.of(strings.get(strings.size() - 2));",
    "grade-2": {
      "execution": 0
    },
    "3": "return strings.stream().reduce((string1, string2) -> string1.length() > string2.length() ? string1 : string2);",
    "grade-3": {
      "execution": 0
    },
    "4": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        int maxLength = 0;\n        String s = \"\";\n        for (String string : strings) {\n            if (string.length() > maxLength) {\n                maxLength = string.length();\n                s = string;\n            }\n        }\n        return Optional.of(s);",
    "grade-4": {
      "execution": 0
    },
    "5": "//return strings.stream().max(Comparator.comparing(String::length)).get();\n        if (strings.size() == 0) {\n            return Optional.empty();\n        } else {\n            Collections.sort(strings, Comparator.comparing(String::length));\n            return Optional.of(strings.get(strings.size() - 1));\n        }",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    // should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    // split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    // split_words(\"abcdef\") == 3\n    public static Union_ArrayList_String__int splitWords(String txt) {\n",
    "task_id": "125",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n",
    "simplified_intent": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
    "snippet": [
      "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "String[] words = txt.split(\"\\\\s+\");\n        // return txt.split(\",\");\n        Union_ArrayList_String__int res = new Union_ArrayList_String__int();\n        for (String word : words) {\n            res.add(word);\n        }\n        return res;",
    "grade-0": {
      "execution": 0
    },
    "1": "// Your code here\n        Union_ArrayList_String__int word_list = new Union_ArrayList_String__int();\n        Set<String> temp = new HashSet<>();\n        \n        for(char ch : txt.toCharArray()) {\n            if(Character.isWhitespace(ch)){\n                if(!temp.isEmpty()){\n                    word_list.add(temp.toArray(new String[temp.size()]));\n                    temp = new HashSet<>();\n                }\n            } else if(!Character.isWhitespace(ch)){\n                temp.add(Character.toString(ch));\n            }\n        }\n        \n        if(!temp.isEmpty()){\n            word_list.add(temp.toArray(new String[temp.size()]));\n        }\n        \n        return word_list;",
    "grade-1": {
      "execution": 0
    },
    "2": "String[] arr = txt.split(\" \");\n        Union_ArrayList_String__int arr = new Union_ArrayList_String__int(Arrays.asList(arr));\n        Set<String> set = new HashSet<>();\n        for(int i = 0; i < arr.length; i++) {\n            String s = arr[i];\n            if(!set.add(s)) {\n                String[] words = s.split(\",\");\n                for(int j = 0; j < words.length; j++) {\n                    set.add(words[j]);\n                }\n            }\n        }\n        int count = 0;\n        for(int i = 0; i < set.length(); i++) {\n            if(!set.get(i).startsWith(\"a\")) {\n                count += 1;\n            }\n        }\n        return count;",
    "grade-2": {
      "execution": 0
    },
    "3": "int c = 0;\n        // Find number of odd order letters\n        for (int i = 0; i < txt.length(); i++) {\n            if ('a' <= txt.charAt(i) && txt.charAt(i) <= 'z') {\n                if ((txt.charAt(i) - 'a') % 2 == 1) {\n                    c++;\n                }\n            }\n        }\n        // Find if there are commas\n        boolean comma = false;\n        for (int i = 0; i < txt.length(); i++) {\n            if (txt.charAt(i) == ',') {\n                comma = true;\n                break;\n            }\n        }\n        if (comma) {\n            return Union_ArrayList_String__int.left(Arrays.asList(txt.split(\",\")));\n        } else {\n            return Union_ArrayList_String__int.right(c);\n        }",
    "grade-3": {
      "execution": 0
    },
    "4": "if (txt.contains(\" \")) {\n            String[] splitted = txt.split(\" \");\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(splitted)));\n        } else if (txt.contains(\",\")) {\n            String[] splitted = txt.split(\",\");\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(splitted)));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) - 'a' == i % 2) {\n                    count++;\n                }\n            }\n            return new Union_ArrayList_String__int(count);\n        }",
    "grade-4": {
      "execution": 0
    },
    "5": "if(txt.length() == 0) return new Unit_String(\"\");\n        if(txt.contains(\" \")) {\n            return new Unit_ArrayList_String(Arrays.asList(txt.split(\" \")));\n        } else if(txt.contains(\",\")) {\n            return new Unit_ArrayList_String(Arrays.asList(txt.split(\",\")));\n        } else {\n            return new Unit_int(txt.chars().filter(c -> c >= 'a' && c <= 'z').map(c -> c - 'a').filter(i -> i % 2 == 0).count());\n        }",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of non-negative integers, return a copy of the given array after sorting,\n    // you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given array.\n    // Examples:\n    // * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n",
    "task_id": "88",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n",
    "simplified_intent": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
    "snippet": [
      "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> copy = array.clone();\n        Arrays.sort(copy);\n\n        if (copy.get(0) % 2 != 0) {\n            Collections.reverse(copy);\n        }\n\n        return copy;",
    "grade-0": {
      "execution": 0
    },
    "1": "int n = array.size();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            int min = i;\n            int max = n - 1;\n            while (max >= min) {\n                int j = min + 1;\n                int k = max - 1;\n                int sum = array.get(min) + array.get(k);\n                if (sum % 2 == 0) {\n                    max = k - 1;\n                } else {\n                    min = j + 1;\n                }\n            }\n            result.add(array.get(min));\n            result.add(array.get(max));\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "int[] arrayValue = new int[array.size()];\n        for (int i = 0; i < array.size(); i++) {\n            arrayValue[i] = array.get(i);\n        }\n        int evenSum = 0;\n        int oddSum = 0;\n        for (int i = 0; i < arrayValue.length; i++) {\n            evenSum = evenSum + arrayValue[i];\n            oddSum = oddSum + arrayValue[i];\n        }\n        if (oddSum % 2 != 0) {\n            Arrays.sort(arrayValue);\n        } else {\n            Arrays.sort(arrayValue.reverse());\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arrayValue.length; i++) {\n            result.add(arrayValue[i]);\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "// The answer:\n        // The solution is to use a number of Java 8 features and to write the solution as Java 8 idiomatic code.\n        // Specifically, I used a Stream with a lambda expression, converted to an ArrayList and then invoked the\n        // Collections.sort() method.\n        // Note:\n        // * I also used IntPredicate and IntBinaryOperator.\n        // * The code uses == Integer.sum() which is a short-hand for Integer.sum().equals() which is the same\n        //   as the code Integer.sum().intValue() == 0.\n        // * The code also uses Collections.sort() with a lambda expression which is a Java 8 feature.\n        // * The code also uses IntPredicate which is a Java 8 feature.\n        // * The code also uses IntBinaryOperator which is a Java 8 feature.\n        // My comments:\n        // The solution uses Java 8 idiomatic code and a Stream with a lambda expression.\n        // The code also uses IntPredicate and IntBinaryOperator.\n        // The code uses == Integer.sum() which is a short-hand for Integer.sum().equals() which is the same\n        // as the code Integer.sum().intValue() == 0.\n        // The code also uses Collections.sort() with a lambda expression which is a Java 8 feature.\n        // The code also uses IntPredicate which is a Java 8 feature.\n        // The code also uses IntBinaryOperator which is a Java 8 feature.\n        // * If you are not familiar with streams, you can go to https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html\n        //   which has a nice introduction to streams and the Stream API.\n        // * If you are not familiar with java.util.function you can go to\n        //   https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html\n        //   which has a nice introduction to java.util.function and the java.util.function API.\n        // * If you are not familiar with java.util.function.IntPredicate you can go to\n        //   https://docs.oracle.",
    "grade-3": {
      "execution": 0
    },
    "4": "int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n        }\n        return array;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> list = (ArrayList<Integer>) array.clone();\n        Collections.sort(list);\n        if ((list.get(0) + list.get(list.size() - 1)) % 2 == 0) {\n            Collections.reverse(list);\n        }\n        return list;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n    public static int add(ArrayList<Integer> lst) {\n",
    "task_id": "85",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n",
    "simplified_intent": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
    "snippet": [
      "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(lst.size() < 2)\n            return 0;\n        HashMap<Integer, Integer> hm = new HashMap<>();\n        for(int i : lst) {\n            hm.put(i, 0);\n        }\n        for(int i : lst) {\n            hm.put(i, hm.get(i) + i);\n        }\n        return hm.get(2);",
    "grade-0": {
      "execution": 0
    },
    "1": "// Write your code here.\n        return 0;",
    "grade-1": {
      "execution": 0
    },
    "2": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.size() > 2) {\n                total += lst.get(i - 1);\n                lst.remove(i-1);\n            }\n        }\n        return total;",
    "grade-2": {
      "execution": 0
    },
    "3": "// replace the code below with your solution\n        return 2;",
    "grade-3": {
      "execution": 0
    },
    "4": "return lst.stream().filter(n -> (n % 2 == 0 && lst.indexOf(n) % 2 != 0)).reduce(0, (a, b) -> a + b);",
    "grade-4": {
      "execution": 0
    },
    "5": "int ans = 0;\n      for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n          ans += lst.get(i);\n        }\n      }\n      return ans;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sum_to_n(30)\n    // 465\n    // >>> sum_to_n(100)\n    // 5050\n    // >>> sum_to_n(5)\n    // 15\n    // >>> sum_to_n(10)\n    // 55\n    // >>> sum_to_n(1)\n    // 1\n    public static int sumToN(int n) {\n",
    "task_id": "60",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n",
    "simplified_intent": "sum_to_n is a function that sums numbers from 1 to n.",
    "snippet": [
      "        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == -1) return 0;\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        return nums.stream().mapToInt(x -> sumToN(n - x)).sum();",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n <= 0) {\n            return 0;\n        }\n        Integer[] arr = new Integer[n];\n        Arrays.fill(arr, 0, n, 1);\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n        return (int) sum;",
    "grade-1": {
      "execution": 0
    },
    "2": "return Stream.generate(() -> n).sum();",
    "grade-2": {
      "execution": 0
    },
    "3": "// (n * (n + 1)) / 2\n        return n * (n + 1) / 2;",
    "grade-3": {
      "execution": 1
    },
    "4": "// if 1 <= n <= 100, return the sum of numbers from 1 to n\n        // else, return -1\n        if (n < 1 || n > 100) {\n            return -1;\n        }\n        int sum = 0;\n        int i = 1;\n        while (i <= n) {\n            sum += i;\n            i += 1;\n        }\n        return sum;",
    "grade-4": {
      "execution": 1
    },
    "5": "//INSERT YOUR CODE HERE\n        int res = 0;\n        for (int i = 0; i <= n; i++) {\n            res += i;\n        }\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public static int largestDivisor(int n) {\n",
    "task_id": "24",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n",
    "simplified_intent": "For a given number n, find the largest number that divides n evenly, smaller than n",
    "snippet": [
      "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// return n if n is divisible by itself\n        if (n % 2 == 0)\n            return n;\n\n        int largestDivisor = 1;\n        int maxDivisor = 2;\n\n        // loop through all the divisors \n        while ((maxDivisor < n) && (n % maxDivisor == 0)) {\n            largestDivisor *= maxDivisor;\n            maxDivisor++;\n        }\n        return largestDivisor;",
    "grade-0": {
      "execution": 0
    },
    "1": "int largestDivisor = n;\n        if (n <= 0) {\n            return largestDivisor;\n        }\n        // If n is evenly divisible by 1, return it directly\n        if (n%2 == 0) {\n            return n;\n        }\n        // Start searching from the second divisor of n\n        for (int i = 3; i <= Math.sqrt(n); i++) {\n            if (n%i == 0) {\n                largestDivisor = i;\n                break;\n            }\n        }\n        return largestDivisor;",
    "grade-1": {
      "execution": 0
    },
    "2": "int divisor = 0;\n        for (divisor += n; divisor % 2 == 0; divisor += n)\n            ;\n        return divisor;",
    "grade-2": {
      "execution": 0
    },
    "3": "return n > 0 ? n/2 : n;",
    "grade-3": {
      "execution": 0
    },
    "4": "// >>> (2 ** 15 - 1) / 15\n        // 127\n        for (int i = (int)Math.pow(2, n) - 1; i > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return 0;",
    "grade-4": {
      "execution": 0
    },
    "5": "int d = n - 1;\n        while (n % d != 0) {\n            d--;\n        }\n        return d;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangle_area(5, 3)\n    // 7.5\n    public static float triangleArea(int a, int h) {\n",
    "task_id": "45",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n",
    "simplified_intent": "Given length of a side and high return area for a triangle.",
    "snippet": [
      "        return a * h / 2;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return Math.pow(a, 3) + ((float)((a + h) / 2)) * h;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (a == 0) return 0; // base case\n        return (float) (a * (h - b) * (h - c));",
    "grade-1": {
      "execution": 0
    },
    "2": "float area = a*h;\n        return area;",
    "grade-2": {
      "execution": 0
    },
    "3": "return (a * h) / 2;",
    "grade-3": {
      "execution": 0
    },
    "4": "// Enter code here.\n        float result;\n        result=0.5f*(a*h);\n        return result;",
    "grade-4": {
      "execution": 1
    },
    "5": "float area = (float) (0.5 * a * h);\n        return area;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    public static ArrayList<Integer> getOddCollatz(int n) {\n",
    "task_id": "123",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n",
    "simplified_intent": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
    "snippet": [
      "        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> odd_collatz = new ArrayList<>();\n        if (n <= 1) return odd_collatz;\n        int prev_term = n;\n        odd_collatz.add(n);\n        for(int i : range(2, n)) {\n            if (n % i == 0) continue;\n            int next_term = prev_term / i;\n            odd_collatz.add(next_term);\n            prev_term = next_term * i;\n        }\n        return odd_collatz;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> collatz = new ArrayList<>();\n        if(n != 1) {\n            for(int i = 2; i <= n; i++) {\n                if((n % i) == 0) {\n                    collatz.add(i + (n / i));\n                }\n            }\n        }\n        return collatz;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> collatzSequence = new ArrayList<Integer>();\n        if (n == 1) {\n            collatzSequence.add(1);\n            return collatzSequence;\n        }\n        collatzSequence.add(1);\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % 2 == 0) {\n                collatzSequence.add(2 * collatzSequence.get(i));\n            } else {\n                collatzSequence.add(3 * collatzSequence.get(i) + 1);\n            }\n        }\n        return collatzSequence;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> result = new ArrayList<Integer>();\n        while (n > 1) {\n            result.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1);\n        return result;",
    "grade-3": {
      "execution": 0
    },
    "4": "var ans = new ArrayList<Integer>();\n        var seen = new HashSet<Integer>();\n        var stack = new Stack<Integer>();\n        stack.push(n);\n        while(!stack.isEmpty()) {\n            var x = stack.pop();\n            if(seen.contains(x)) {\n                continue;\n            }\n            seen.add(x);\n            if(x == 1) {\n                ans.add(x);\n                continue;\n            }\n            if(x % 2 == 1) {\n                ans.add(x);\n            }\n            stack.push(x / 2);\n            stack.push(3 * x + 1);\n        }\n        Collections.sort(ans);\n        return ans;",
    "grade-4": {
      "execution": 0
    },
    "5": "//your code here.\n        ArrayList<Integer> arr = new ArrayList<Integer>();\n        int num = n;\n        while(num != 1) {\n            arr.add(num);\n            if(num % 2 == 0) num /= 2;\n            else num = num * 3 + 1;\n        }\n        arr.add(1);\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 1) res.add(arr.get(i));\n        }\n        return res;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // match_parens(['()(', ')']) == 'Yes'\n    // match_parens([')', ')']) == 'No'\n    public static String matchParens(ArrayList<String> lst) {\n",
    "task_id": "119",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n",
    "simplified_intent": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
    "snippet": [
      "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Arrays.sort(lst);\n        String result = \"\";\n        boolean flag = false;\n        for (String s : lst) {\n            if (flag) {\n                if (s.equals(\"(\")) {\n                    flag = false;\n                } else if (s.equals(\")\")) {\n                    result = result + s.trim();\n                }\n            } else {\n                if (s.equals(\"(\")) {\n                    flag = true;\n                } else if (s.equals(\")\")) {\n                    result = result + s.trim();\n                }\n            }\n        }\n        if (result.isEmpty()) {\n            return \"No\";\n        } else {\n            return \"Yes\";\n        }",
    "grade-0": {
      "execution": 0
    },
    "1": "Set<String> set = new HashSet<String>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                set.add(s);\n            } else if (s.equals(\")\")) {\n                if (set.size() == 0)\n                    return \"No\";\n                else\n                    set.remove(s);\n            }\n        }\n        if (set.size() != 0)\n            return \"No\";\n        else\n            return \"Yes\";",
    "grade-1": {
      "execution": 0
    },
    "2": "Stack<String> stack = new Stack<>();\n        for (String str : lst) {\n            int i = str.indexOf('(');\n            int j = str.indexOf(')');\n            if (i < 0 || j < 0) {\n                return \"No\";\n            }\n            stack.push(str);\n            if (j > i) {\n                while (!stack.isEmpty() && stack.peek().indexOf('(') < j) {\n                    stack.pop();\n                }\n                stack.push(str.substring(0, i) + str.substring(j + 1));\n            } else {\n                while (!stack.isEmpty() && stack.peek().indexOf(')') > i) {\n                    stack.pop();\n                }\n                stack.push(str.substring(0, i) + str.substring(j));\n            }\n        }\n        return \"Yes\".equals(stack.isEmpty() ? \"No\" : stack.peek());",
    "grade-2": {
      "execution": 0
    },
    "3": "// Implement me\n        return \"Yes\";",
    "grade-3": {
      "execution": 0
    },
    "4": "String res = \"Yes\";\n        String concatenation = String.join(\"\", lst);\n        int numberOfOpenParens = 0;\n        int numberOfCloseParens = 0;\n        for (char ch : concatenation.toCharArray()) {\n            if (ch == '(') {\n                numberOfOpenParens++;\n            } else {\n                numberOfCloseParens++;\n            }\n            if (numberOfCloseParens > numberOfOpenParens) {\n                res = \"No\";\n                break;\n            }\n        }\n        return res;",
    "grade-4": {
      "execution": 0
    },
    "5": "Stack<Character> s = new Stack<>();\n        for (String s1 : lst) {\n            for (char c : s1.toCharArray()) {\n                if (c == '(') {\n                    s.push(c);\n                } else {\n                    if (s.isEmpty()) {\n                        return \"No\";\n                    }\n                    s.pop();\n                }\n            }\n        }\n        return s.isEmpty() ? \"Yes\" : \"No\";",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns True if there are two distinct elements in the list that\n    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3, 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n    public static boolean pairsSumToZero(ArrayList<Integer> l) {\n",
    "task_id": "43",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n",
    "simplified_intent": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
    "snippet": [
      "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "HashSet<Integer> set = new HashSet<Integer>();\n        HashSet<Integer> set2 = new HashSet<Integer>();\n        int sum = 0;\n        for (int i: l) {\n            sum += i;\n            if (set.contains(sum)) {\n                set2.add(sum);\n            }\n            set.add(sum);\n        }\n        return set2.size() == 1;",
    "grade-0": {
      "execution": 0
    },
    "1": "// write your code here\n        ArrayList<Integer> newl = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n\n        for (Integer i : l) {\n            int j = i;\n            while (j != 0) {\n                if (j % 2 == 0) {\n                    j = (j - 2) / 2;\n                }\n                else {\n                    j = (j - 1) / 2;\n                }\n            }\n            set.add(j);\n        }\n        if (set.size() == 1) {\n            newl.addAll(l);\n        }\n        else if (set.size() == 2) {\n            return true;\n        }\n        return false;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list can't be empty.\");\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : l) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n            }\n        }\n        Set<Integer> set = new HashSet<>();\n        for (int i : map.keySet()) {\n            if (map.get(i) == 1) {\n                set.add(i);\n            }\n        }\n        return set.size() < 2;",
    "grade-2": {
      "execution": 0
    },
    "3": "throw new UnsupportedOperationException(\"Problem.pairsSumToZero not implemented\");",
    "grade-3": {
      "execution": 0
    },
    "4": "return false;",
    "grade-4": {
      "execution": 0
    },
    "5": "if (l.size() < 2) {\n            return false;\n        }\n        HashSet<Integer> s = new HashSet<Integer>();\n        int sum = 0;\n        boolean result = false;\n        for (int i = 0; i < l.size(); i++) {\n            sum = l.get(i);\n            if (s.contains(sum)) {\n                result = true;\n                break;\n            }\n            s.add(sum);\n        }\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    public static int fruitDistribution(String s, int n) {\n",
    "task_id": "67",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n",
    "simplified_intent": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
    "snippet": [
      "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// you can do your magic here\n        long apples = 0, oranges = 0, mangos = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 'a') apples++;\n            if (s.charAt(i) == 'o') oranges++;\n            if (s.charAt(i) == 'm') mangos++;\n        }\n        long basket = apples + oranges + mangos;\n        return basket - (apples - oranges) - mangos;",
    "grade-0": {
      "execution": 0
    },
    "1": "int apples = Integer.parseInt(s.substring(0, s.indexOf(\" apples\") - 1).trim());\n        int oranges = Integer.parseInt(s.substring(s.indexOf(\" apples\") - 1, s.indexOf(\" oranges\")).trim());\n        int mangos = Integer.parseInt(s.substring(s.indexOf(\" oranges\") + 1, s.length()).trim());\n        int sum = apples + oranges + mangos;\n        return sum - (apples + oranges + mangos) - n;",
    "grade-1": {
      "execution": 0
    },
    "2": "// write your code here\n        List<Integer> list = Arrays.stream(str.split(\" \"))\n                .map(Integer::parseInt)\n                .collect(Collectors.toList());\n\n        int apples = list.get(0);\n        int oranges = list.get(1);\n\n        int totalApples = apples + oranges;\n        int totalOranges = apples - oranges;\n\n        double mangoes = ((double) totalOranges / totalApples);\n        int newMango = mangoes * n;\n        return newMango;",
    "grade-2": {
      "execution": 0
    },
    "3": "// write your code here\n        String []arr = s.split(\" \");\n        int x = 0, y = 0;\n        for(int i = 0; i < arr.length; i += 2)\n        {\n            x += Integer.parseInt(arr[i]);\n        }\n        for(int i = 1; i < arr.length; i += 2)\n        {\n            if(arr[i].equals(\"apples\"))\n                y += 1;\n            else\n                y += 2;\n        }\n        if(y == 0)\n            return n;\n        return n - x * y;",
    "grade-3": {
      "execution": 0
    },
    "4": "int oranges = 0;\n        int apples = 0;\n        String[] words = s.split(\" \");\n        apples = Integer.parseInt(words[0]);\n        oranges = Integer.parseInt(words[2]);\n        return n - apples - oranges;",
    "grade-4": {
      "execution": 0
    },
    "5": "int nO=0,nA=0;\n        StringTokenizer st = new StringTokenizer(s);\n        while(st.hasMoreTokens()){\n            String t = st.nextToken();\n            if(t.equals(\"oranges\"))\n                nO = Integer.parseInt(st.nextToken());\n            else if(t.equals(\"apples\"))\n                nA = Integer.parseInt(st.nextToken());\n        }\n        return n - nO - nA;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int n) {\n",
    "task_id": "15",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n",
    "simplified_intent": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
    "snippet": [
      "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "List<String> list = Arrays.stream(new int[] {0, 1, 2, 3, 4, 5}).map(i->Integer.toString(i)).toList();\n        return list.stream().collect(Collectors.joining(\" \"));",
    "grade-0": {
      "execution": 0
    },
    "1": "List<Integer> list = new ArrayList<>();\n        for (int i=0; i<n; i++)\n            list.add(i);\n        \n        return list.stream().map(Object::toString).collect(Collectors.joining(\" \"));",
    "grade-1": {
      "execution": 0
    },
    "2": "List<String> numbers = new ArrayList<>();\n        for (int i = 0; i < n; i++) numbers.add(String.valueOf(i));\n        return String.join(\" \", numbers);",
    "grade-2": {
      "execution": 0
    },
    "3": "// Feel free to modify the return statement below\n        return \"\";",
    "grade-3": {
      "execution": 0
    },
    "4": "StringBuilder builder = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            builder.append(i + \" \");\n        }\n        builder.deleteCharAt(builder.length() - 1);\n        return builder.toString();",
    "grade-4": {
      "execution": 1
    },
    "5": "List<String> nums = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            nums.add(Integer.toString(i));\n        }\n        return String.join(\" \", nums);",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(int a) {\n",
    "task_id": "75",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n",
    "simplified_intent": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
    "snippet": [
      "        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int n = 3, count = 0, check;\n        while (n <= a) {\n            check = Math.sqrt(n) * Math.sqrt(n);\n            if (check == 2 || check == 3) {\n                count++;\n            }\n            n = n + 1;\n        }\n        if (count == 0) {\n            return true;\n        } else {\n            return false;\n        }",
    "grade-0": {
      "execution": 0
    },
    "1": "int b = 1;\n        int c = 1;\n        int temp = a;\n        int n = 1;\n        int i = 0;\n        while (a > 1) {\n            b = b;\n            while (a % b == 0) {\n                a = a / b;\n            }\n        }\n        while (temp != 0) {\n            c = c * temp;\n            temp = temp - 1;\n        }\n        while (c > 1) {\n            if (n % c == 0) {\n                return false;\n            }\n            n = n + 1;\n            c = c / 2;\n        }\n        return true;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (a > 100) return false;\n        int count = 0;\n        // Count how many prime numbers there are less than a AND smaller than a AND larger than a\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                count++;\n                if (count > 2) break;\n            }\n        }\n        // If the number is multiple of 3 or 5, it's a multiplication of 3 or 5 prime numbers\n        return (count >= 3 || count >= 5);",
    "grade-2": {
      "execution": 0
    },
    "3": "int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\t\tList<Integer> primeFactors = new ArrayList<Integer>();\n\t\twhile (a > 1) {\n\t\t\tboolean found = false;\n\t\t\tfor (int prime : primes) {\n\t\t\t\tif (a % prime == 0) {\n\t\t\t\t\tprimeFactors.add(prime);\n\t\t\t\t\ta /= prime;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn primeFactors.size() == 3;",
    "grade-3": {
      "execution": 1
    },
    "4": "// Write your code here\n        int a1 = a;\n        int p = 2;\n        int counter = 0;\n        while (a1 != 1) {\n            if (a1 % p == 0) {\n                counter++;\n                a1 = a1 / p;\n            } else {\n                p++;\n            }\n        }\n        if (counter == 3) {\n            return true;\n        } else {\n            return false;\n        }",
    "grade-4": {
      "execution": 1
    },
    "5": "if (a == 2 || a == 3 || a == 5) return true;\n      for (int x = 2; x <= Math.ceil(Math.sqrt(a)); x++) {\n        if (a % x == 0) {\n          int y = a / x;\n          for (int z = 2; z <= Math.ceil(Math.sqrt(y)); z++) {\n            if (y % z == 0) {\n              int t = y / z;\n              for (int u = 2; u <= Math.ceil(Math.sqrt(t)); u++) {\n                if (t % u == 0) {\n                  int v = t / u;\n                  if (x != y && x != z && x != t && x != u && x != v && y != z && y != t && y != u && y != v && z != t && z != u && z != v && t != u && t != v && u != v) {\n                    return true;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return false;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public static float truncateNumber(float number) {\n",
    "task_id": "2",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n",
    "simplified_intent": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
    "snippet": [
      "        return number % 1.0;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "long integerPart = Float.floatToIntBits(number);\n        long decimalPart = number - Float.intBitsToFloat(integerPart);\n        return floatToInteger(decimalPart);",
    "grade-0": {
      "execution": 0
    },
    "1": "float remainder;\n        float intPart;\n        intPart = (int) number;\n        remainder = (float) (number - intPart);\n        return remainder;",
    "grade-1": {
      "execution": 1
    },
    "2": "return number < 0.0\n            ? 0.0\n            : Math.floor(number);",
    "grade-2": {
      "execution": 0
    },
    "3": "throw new UnsupportedOperationException(\"Not implemented\");",
    "grade-3": {
      "execution": 0
    },
    "4": "// >>> 3.5\n        // 3.5\n        // >>> int(3.5)\n        // 3\n        // >>> 3.5 - int(3.5)\n        // 0.5\n        return number - (int) number;",
    "grade-4": {
      "execution": 1
    },
    "5": "// Implement the function.\n        return 0.0f;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n",
    "task_id": "118",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n",
    "simplified_intent": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
    "snippet": [
      "        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// write your code here\n        return \"\";",
    "grade-0": {
      "execution": 0
    },
    "1": "if(word.isEmpty()) return \"\";\n        \n        StringBuilder sb = new StringBuilder();\n        \n        for(int i=word.length(); i>0; i--){\n            char c = word.charAt(i-1);\n            \n            // find the first vowel \n            int vowelIndex = Arrays.asList(\"AEIOUaeiou\".split(\"\")).indexOf(c); // search from the right\n            \n            String pre = word.substring(0, i); // get the word before the vowel\n            String post = word.substring(i+1); // get the word after the vowel\n            \n            // if the first vowel is found\n            if(vowelIndex >= 0){\n                // get the first vowel before the current one in the word\n                char vowelBefore = pre.charAt(vowelIndex-1);\n                // if the vowel before is a consonant, then the previous vowel is a vowel\n                if(Character.isLetter(vowelBefore))\n                    sb.append(vowelBefore);\n                else{\n                    // get the last vowel before the current one in the word\n                    char vowelBeforeLast = post.charAt(vowelIndex-1);\n                    // if the vowel before the last one is a consonant, then the previous vowel is a vowel\n                    if(Character.isLetter(vowelBeforeLast))\n                        sb.append(vowelBeforeLast);\n                }\n                // get the first vowel after the current one in the word\n                char vowelAfter = post.charAt(vowelIndex);\n                // if the vowel after is a consonant, then the previous vowel is a vowel\n                if(Character.isLetter(vowelAfter))\n                    sb.append(vowelAfter);\n                else{\n                    // get the last vowel after the current one in the word\n                    char vowelAfterLast = pre.charAt(vowelIndex);\n                    // if the vowel after the last one is a consonant, then the previous vowel is a vowel\n                    if(Character.isLetter(vowelAfterLast))\n                        sb.append(vowelAfterLast);\n                }\n            }\n        }\n        return sb.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your code here\n        int l = word.length();\n        Map<Character,Integer> vowelMap = new HashMap<Character,Integer>();\n        vowelMap.put('a',0);\n        vowelMap.put('e',0);\n        vowelMap.put('i',0);\n        vowelMap.put('o',0);\n        vowelMap.put('u',0);\n        vowelMap.put('y',0);\n        vowelMap.put('i',0);\n        vowelMap.put('u',0);\n        for(int i = l-1; i >= 0; i--) {\n            char c = word.charAt(i);\n            Character c2 = word.charAt(i+1);\n            \n            if((c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') && c2 != 'a' && c2 != 'e' && c2 != 'i' && c2 != 'o' && c2 != 'u' && c2 != 'y') {\n                vowelMap.put(c,1);\n                vowelMap.put(c2,1);\n            }\n        }\n        char prevChar = word.charAt(l-1);\n        int vowelCount = 0;\n        for(Character c : vowelMap.keySet()) {\n            Character c2 = word.charAt(l);\n            if((c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') && c2 != 'a' && c2 != 'e' && c2 != 'i' && c2 != 'o' && c2 != 'u' && c2 != 'y') {\n                vowelCount += vowelMap.get(c);\n            }\n        }\n        \n        int currCount = vowelMap.get(prevChar);\n        \n        if(vowelCount > currCount) {\n            return word.charAt(l-1);\n        } else {\n            return \"\";\n        }",
    "grade-2": {
      "execution": 0
    },
    "3": "String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        ArrayList<String> vowelList = new ArrayList<String>(Arrays.asList(vowels));\n        String closestVowel = \"\";\n        int closestDistance = word.length();\n        for (int i = 0; i < word.length(); i++) {\n            String currentLetter = word.substring(i, i + 1);\n            if (vowelList.contains(currentLetter)) {\n                for (int j = word.length() - 1; j > i; j--) {\n                    String letterFromTheEnd = word.substring(j, j + 1);\n                    if (!vowelList.contains(letterFromTheEnd)) {\n                        int distance = j - i;\n                        if (distance < closestDistance) {\n                            closestDistance = distance;\n                            closestVowel = currentLetter;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return closestVowel;",
    "grade-3": {
      "execution": 0
    },
    "4": "// Your code goes here\n        int length = word.length();\n        boolean foundOne = false;\n        boolean isVowel = false;\n        if (length == 0) {\n            return \"\";\n        }\n        else if (length == 1) {\n            return \"\";\n        }\n        else {\n            char currentChar = word.charAt(length - 1);\n            for (int index = length - 2; index >= 0; index--) {\n                char currentCharLeft = word.charAt(index);\n                if (!isVowel(currentCharLeft)) {\n                    currentChar = currentCharLeft;\n                    isVowel = false;\n                }\n                else {\n                    if (!isVowel(currentChar)) {\n                        return \"\" + currentCharLeft;\n                    }\n                    else {\n                        foundOne = true;\n                        currentChar = currentCharLeft;\n                        isVowel = true;\n                    }\n                }\n            }\n            if (foundOne) {\n                return \"\" + currentChar;\n            }\n            else {\n                return \"\";\n            }\n        }",
    "grade-4": {
      "execution": 0
    },
    "5": "// write your code here.\n      return \"\";",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // decimal_to_binary(15)   # returns \"db1111db\"\n    // decimal_to_binary(32)   # returns \"db100000db\"\n    public static String decimalToBinary(int decimal) {\n",
    "task_id": "79",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n",
    "simplified_intent": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
    "snippet": [
      "        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int binaryDigit = 0;\n        StringBuilder result = new StringBuilder();\n        while (decimal != 0) {\n            decimal = decimal / 2;\n            binaryDigit++;\n        }\n        for (int i = 0; i < binaryDigit; i++) {\n            result.append(\"1\");\n        }\n        for (int i = binaryDigit - 1; i >= 0; i--) {\n            result.insert(0, (char) ('0' + decimal%2));\n            decimal = decimal/2;\n        }\n        return \"db\" + result + \"db\";",
    "grade-0": {
      "execution": 0
    },
    "1": "String binary = String.format(\"%db%db\", decimal, decimal);\n        binary = binary.substring(0, binary.length() - 2);\n        return binary;",
    "grade-1": {
      "execution": 0
    },
    "2": "String binary = \"\";\n        for (int i = decimal; i > 0; i /= 10) {\n            binary += (i%2 == 1 ? \"1\" : \"0\");\n        }\n        binary += \"db\";\n        return binary;",
    "grade-2": {
      "execution": 0
    },
    "3": "return Integer.toBinaryString(decimal);",
    "grade-3": {
      "execution": 0
    },
    "4": "StringBuilder result = new StringBuilder(\"db\");\n        while (decimal > 0) {\n            int r = decimal % 2;\n            decimal /= 2;\n            result.append(r);\n        }\n        result.append(\"db\");\n        return result.reverse().toString();",
    "grade-4": {
      "execution": 0
    },
    "5": "StringBuilder sb = new StringBuilder(\"db\");\n        for (; decimal > 0; decimal >>= 1) {\n            sb.append(decimal & 1);\n        }\n        sb.append(\"db\");\n        return sb.reverse().toString();",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of numbers, return whether or not they are sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n    // number, return False. Assume no negative numbers and only integers.\n    // Examples\n    // is_sorted([5]) \u279e True\n    // is_sorted([1, 2, 3, 4, 5]) \u279e True\n    // is_sorted([1, 3, 2, 4, 5]) \u279e False\n    // is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    // is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    public static boolean isSorted(ArrayList<Integer> lst) {\n",
    "task_id": "126",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n",
    "simplified_intent": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
    "snippet": [
      "        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "boolean result = true;\n        Set<Integer> set = new HashSet<Integer>();\n        for(int i : lst) {\n            if(!set.contains(i)) {\n                set.add(i);\n            } else {\n                result = false;\n            }\n        }\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "for (int i = 0; i < lst.size()-1; i++) {\n            for (int j = i+1; j < lst.size(); j++) {\n                if (lst.get(i) < lst.get(j)) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (lst.size() <= 1) return true;\n        Map<Integer, Integer> m = new HashMap<Integer, Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (!m.containsKey(lst.get(i))) {\n                m.put(lst.get(i), 1);\n            } else {\n                m.put(lst.get(i), m.get(lst.get(i)) + 1);\n            }\n        }\n        for (Integer i: m.keySet()) {\n            if (m.get(i) == 1) return false;\n        }\n        return true;",
    "grade-2": {
      "execution": 0
    },
    "3": "int last = Integer.MIN_VALUE;\n        int dupes = 0;\n        for (int i : lst) {\n            if (i == last) {\n                dupes++;\n            }\n            if (i < last) {\n                return false;\n            }\n            last = i;\n        }\n        return dupes < 2;",
    "grade-3": {
      "execution": 0
    },
    "4": "Set<Integer> set = new HashSet<Integer>(lst);\n        if (set.size() == lst.size()) {\n            int a = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < a) {\n                    return false;\n                }\n                a = lst.get(i);\n            }\n            return true;\n        }\n        return false;",
    "grade-4": {
      "execution": 0
    },
    "5": "// Your code here\n        return lst.equals(sort(lst));",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    public static ArrayList<String> byLength(ArrayList<Integer> arr) {\n",
    "task_id": "105",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n",
    "simplified_intent": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
    "snippet": [
      "        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (arr.isEmpty()) return new ArrayList<String>();\n        if (arr.size() == 1) {\n            ArrayList<String> result = new ArrayList<String>();\n            result.add(\"One\");\n            return result;\n        }\n        arr.sort(Comparator.comparing(i -> i));\n        arr.reverse();\n        arr = arr.stream().map(i -> String.valueOf(i)).collect(Collectors.toCollection(ArrayList::new));\n        arr = arr.stream().map(i -> {\n            if (i == Integer.parseInt(\"1\")) return \"One\";\n            if (i == Integer.parseInt(\"2\")) return \"Two\";\n            if (i == Integer.parseInt(\"3\")) return \"Three\";\n            if (i == Integer.parseInt(\"4\")) return \"Four\";\n            if (i == Integer.parseInt(\"5\")) return \"Five\";\n            if (i == Integer.parseInt(\"6\")) return \"Six\";\n            if (i == Integer.parseInt(\"7\")) return \"Seven\";\n            if (i == Integer.parseInt(\"8\")) return \"Eight\";\n            if (i == Integer.parseInt(\"9\")) return \"Nine\";\n            return i;\n        }).collect(Collectors.toCollection(ArrayList::new));\n        arr.sort(Comparator.comparing(i -> i));\n        arr.reverse();\n        return arr;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<String> result = new ArrayList<>();\n        // return an empty array if no array\n        if (arr.isEmpty()) {\n            return result;\n        }\n        boolean isReversed = false;\n        // check if there is any reversed number\n        if (isReverse(arr)) {\n            isReversed = true;\n            int length = arr.size() - 1;\n            for (int i = 0; i < length; i++) {\n                Integer n = arr.get(i);\n                arr.set(i, arr.get(length - i));\n                arr.set(length - i, n);\n            }\n        }\n        int size = arr.size();\n        // add new number to result\n        String[] strArr = new String[size];\n        for (int i = 0; i < size; i++) {\n            strArr[i] = getName(arr.get(i));\n        }\n        if (isReversed) {\n            Arrays.sort(strArr);\n            Arrays.reverse(strArr);\n        }\n        // add arr length to result\n        result.add(Integer.toString(size));\n        // add result to result\n        Collections.addAll(result, (ArrayList<String>) strArr);\n        // return result\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "if(arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        ArrayList<String> res = new ArrayList<>();\n        ArrayList<Integer> sorted = new ArrayList<>(arr);\n        Collections.sort(sorted);\n        for(int i = sorted.size() - 1; i > 0; i--) {\n            if(sorted.get(i) == i) {\n                res.add(\"One\");\n            }\n            else if(sorted.get(i) > i) {\n                res.add(\"Two\");\n            }\n            else if(sorted.get(i) < i) {\n                res.add(\"Three\");\n            }\n            else if(sorted.get(i) == i) {\n                res.add(\"Four\");\n            }\n            else if(sorted.get(i) > i) {\n                res.add(\"Five\");\n            }\n            else if(sorted.get(i) < i) {\n                res.add(\"Six\");\n            }\n            else if(sorted.get(i) == i) {\n                res.add(\"Seven\");\n            }\n            else if(sorted.get(i) > i) {\n                res.add(\"Eight\");\n            }\n            else if(sorted.get(i) < i) {\n                res.add(\"Nine\");\n            }\n            else {\n                res.add(\"Zero\");\n            }\n        }\n        Collections.sort(res);\n        return res;",
    "grade-2": {
      "execution": 0
    },
    "3": "String[] numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        arr.sort(Comparator.comparingInt(Integer::intValue));\n        Collections.reverse(arr);\n        ArrayList<String> str = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int x = arr.get(i);\n            if (x >= 1 && x <= 9) {\n                str.add(numbers[x - 1]);\n            }\n        }\n        return str;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<String> copy = new ArrayList<String>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                String translated = \"\";\n                switch (arr.get(i)) {\n                    case 1:\n                        translated = \"One\";\n                        break;\n                    case 2:\n                        translated = \"Two\";\n                        break;\n                    case 3:\n                        translated = \"Three\";\n                        break;\n                    case 4:\n                        translated = \"Four\";\n                        break;\n                    case 5:\n                        translated = \"Five\";\n                        break;\n                    case 6:\n                        translated = \"Six\";\n                        break;\n                    case 7:\n                        translated = \"Seven\";\n                        break;\n                    case 8:\n                        translated = \"Eight\";\n                        break;\n                    case 9:\n                        translated = \"Nine\";\n                        break;\n                }\n                copy.add(translated);\n            }\n        }\n        Collections.sort(copy);\n        Collections.reverse(copy);\n        return copy;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<String> res = new ArrayList<>();\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        Collections.sort(arr);\n        ArrayList<Integer> copy = new ArrayList<>(arr);\n        Collections.reverse(copy);\n        for (int num : copy) {\n            if (num > 0 && num < 10) {\n                res.add(map.get(num));\n            }\n        }\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given array will not contain\n    // duplicate values.\n    // Examples:\n    // can_arrange([1,2,4,3,5]) = 3\n    // can_arrange([1,2,3]) = -1\n    public static int canArrange(ArrayList<Integer> arr) {\n",
    "task_id": "135",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n",
    "simplified_intent": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
    "snippet": [
      "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int largest = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int element = arr.get(i);\n            int nextElement = arr.get(i + 1);\n            if (element > nextElement) {\n                largest = i;\n                break;\n            }\n        }\n        return largest;",
    "grade-0": {
      "execution": 0
    },
    "1": "int max = -1;\n        int i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(max)) {\n                max = i;\n            }\n            i++;\n        }\n        return max;",
    "grade-1": {
      "execution": 0
    },
    "2": "int result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    result = i;\n                }\n            }\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "int i = 0;\n        while (i < arr.size() - 1) {\n            if (arr.get(i + 1) >= arr.get(i)) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        return i;",
    "grade-3": {
      "execution": 0
    },
    "4": "int len = arr.size();\n        for (int i = 0; i < len - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i;\n            }\n        }\n        return -1;",
    "grade-4": {
      "execution": 0
    },
    "5": "// Your code here!",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // f(5) == [1, 2, 6, 24, 15]\n    public static ArrayList<Integer> f(int n) {\n",
    "task_id": "106",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n",
    "simplified_intent": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
    "snippet": [
      "        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> res = new ArrayList<>();\n        if (n > 0) {\n            for (int i = 1; i <= n; i++) {\n                if (i % 2 == 0) {\n                    res.add(i * i);\n                } else {\n                    res.add(1);\n                    for (int j = 2; j <= i; j++) {\n                        res.add(i * j);\n                    }\n                }\n            }\n        }\n        return res;",
    "grade-0": {
      "execution": 0
    },
    "1": "int factorial = 1;\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                result.add(factorial);\n            } else {\n                result.add(sum);\n            }\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (n <= 0) {\n            result.add(1);\n            return result;\n        }\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(sum);\n            } else {\n                sum += i;\n                result.add(sum);\n            }\n        }\n\n        result.add(sum);\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Your code here\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int fact = 1;\n                for (int j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                res.add(fact);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n == 0) {\n            return list;\n        }\n        if (n == 1) {\n            list.add(1);\n            return list;\n        }\n        int j = 2;\n        list.add(1);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(j);\n                j *= i;\n            } else {\n                list.add(i);\n            }\n        }\n        return list;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> res = new ArrayList<Integer>();\n        if (n < 1) return res;\n        res.add(1);\n        for (int i = 2; i <= n; i++) {\n            int tmp = i % 2 == 0 ? factorial(i) : sum(i);\n            res.add(tmp);\n        }\n        return res;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique elements in a list\n    // >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    public static ArrayList<Integer> unique(ArrayList<Integer> l) {\n",
    "task_id": "34",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n",
    "simplified_intent": "Return sorted unique elements in a list",
    "snippet": [
      "        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "HashSet<Integer> hs = new HashSet<Integer>(l);\n        ArrayList<Integer> u = new ArrayList<Integer>(hs.size());\n        hs.forEach(u::add);\n        return u;",
    "grade-0": {
      "execution": 1
    },
    "1": "Map<Integer, Integer> counts = new HashMap<>();\n        for(Integer i : l) {\n            if(counts.get(i) == null) {\n                counts.put(i, 1);\n            } else {\n                counts.put(i, counts.get(i) + 1);\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(counts.keySet());\n        Collections.sort(result);\n        return result;",
    "grade-1": {
      "execution": 1
    },
    "2": "ArrayList<Integer> u = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            if(!u.contains(l.get(i)))\n                u.add(l.get(i));\n        }\n        return u;",
    "grade-2": {
      "execution": 0
    },
    "3": "Collections.sort(l);\n        ArrayList<Integer> r = new ArrayList<Integer>();\n        int last = -1;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != last) {\n                r.add(l.get(i));\n                last = l.get(i);\n            }\n        }\n        return r;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> u = new ArrayList<Integer>();\n        int n = l.size();\n        for (int i = 0; i < n; i++) {\n            int e = l.get(i);\n            if (!u.contains(e)) {\n                u.add(e);\n            }\n        }\n        Collections.sort(u);\n        return u;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (l.size() == 0) {\n            return result;\n        }\n        Collections.sort(l);\n        result.add(l.get(0));\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) != l.get(i - 1)) {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n    public static int modp(int n, int p) {\n",
    "task_id": "49",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n",
    "simplified_intent": "Return 2^n modulo p (be aware of numerics).",
    "snippet": [
      "        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int res = 1;\n        while ((n /= 2) != 1) {\n            res *= n;\n        }\n        return ((n % p + p) % p == 0) ? res : n % p;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n == 0 || p == 0 || p == 1) return n;\n        if (p > n) return 0;\n        int result = modp(n/2, p);\n        int mod = n%p;\n        result %= p;\n        if (result < mod) result += p;\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "return ((int)Math.pow(2,n)) % p;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (n == 0) {\n            return 1;\n        }\n        int q = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (q * q) % p;\n        } else {\n            return (2 * q * q) % p;\n        }",
    "grade-3": {
      "execution": 1
    },
    "4": "if (n == 0) return 1;\n        int z = modp(n/2, p);\n        if (n % 2 == 0) return z*z % p;\n        else return z*z*2 % p;",
    "grade-4": {
      "execution": 1
    },
    "5": "int n3 = n;\n        while (n3 > 1) {\n            if (n3 % 2 == 1) {\n                n3 = (3 * n3 + 1) / 2;\n            } else {\n                n3 /= 2;\n            }\n        }\n        if (n3 == 0) {\n            return 1;\n        }\n        return n3;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static int minSubArraySum(ArrayList<Integer> nums) {\n",
    "task_id": "114",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n",
    "simplified_intent": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
    "snippet": [
      "        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "HashMap<Integer, Integer> sumMap = new HashMap<Integer, Integer>();\n        for(Integer i : nums) {\n            if (sumMap.containsKey(i)) {\n                sumMap.put(i, sumMap.get(i) + i);\n            }\n            else {\n                sumMap.put(i, i);\n            }\n        }\n\n        int minSum = Integer.MIN_VALUE;\n        int minSumIndex = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if (sumMap.containsKey(nums.get(i))) {\n                Integer oldSum = sumMap.get(nums.get(i));\n                Integer newSum = oldSum + nums.get(i);\n                sumMap.put(nums.get(i), newSum);\n                if (newSum < minSum) {\n                    minSum = newSum;\n                    minSumIndex = i;\n                }\n            }\n        }\n        return minSum;",
    "grade-0": {
      "execution": 0
    },
    "1": "return nums.stream()\n                .filter(i -> i != -1)\n                .map(i -> Arrays.stream(nums.subList(i, nums.size()))\n                        .filter(j -> j != -1)\n                        .mapToInt(Integer::intValue)\n                        .sum())\n                .min()\n                .get();",
    "grade-1": {
      "execution": 0
    },
    "2": "int[] a = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            a[i] = nums.get(i);\n        }\n        int sum = 0, minSum = Integer.MAX_VALUE;\n        for (int i = 0; i < a.length; i++) {\n            sum += a[i];\n            if (sum < minSum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum -= a[i];\n            }\n        }\n        return minSum;",
    "grade-2": {
      "execution": 0
    },
    "3": "// We use a sliding window.\n        // The window is represented by a pair (i, j)\n        // and contains all the numbers in nums[i:j]\n        // We will use the invariant that nums[i:j] is sorted.\n        // To find the minimum sum, we will repeatedly compute the sum\n        // of the window (i, j), and move the window to the right\n        // by decrementing i (we always increment j).\n        // Start with i = 0 and j = 1\n        int i = 0;\n        int j = 1;\n        // The sum of the window\n        int s = nums.get(i) + nums.get(j);\n        // The minimum sum, initialized to the sum of the window\n        int minSum = s;\n        // While the window isn't off the end of the array\n        while (j < nums.size()) {\n            // Compute the new sum of the window\n            s = s + nums.get(j);\n            // Update the minimum sum\n            minSum = Math.min(minSum, s);\n            // Slide the window to the right\n            // We will always move j to the right, and possibly i\n            // If we find a new minimum sum, then i must have\n            // decreased.\n            if (minSum == s) {\n                // We know that the current minimum sum is the minimum\n                // for nums[i:j] and nums[i:j+1].\n                // Also, nums[i:j] will be a prefix of nums[i:j+1].\n                // Therefore, to find the first i such that\n                // nums[i:j+1] has the minimum sum,\n                // we can just check the numbers in nums[i:j]\n                // in increasing order of i.\n                // Since i is monotonically increasing as we\n                // decrement it, this means that we need to increment i\n                // as long as sum - nums[i] is greater than or equal to\n                // the current minimum sum.\n                while (s - nums.get(i) >= minSum) {\n                    s = s - nums.get(i);\n                    i =",
    "grade-3": {
      "execution": 0
    },
    "4": "int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;",
    "grade-4": {
      "execution": 0
    },
    "5": "// We maintain the minimum sum, and for each index i we compute the minimum sum so far.\n        // Then we return the smallest minimum sum.\n        // Time complexity: O(n), where n is the length of nums.\n        // Space complexity: O(1).\n        int minSum = Integer.MAX_VALUE;\n        int minSumSoFar = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            minSumSoFar = Math.min(nums.get(i), minSumSoFar + nums.get(i));\n            minSum = Math.min(minSum, minSumSoFar);\n        }\n        return minSum;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    // multiply(14,-15) should return 20.\n    public static int multiply(int a, int b) {\n",
    "task_id": "97",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n",
    "simplified_intent": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
    "snippet": [
      "        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Complete the function\n        // Return the result",
    "grade-0": {
      "execution": 0
    },
    "1": "if(b < 0) {\n            return 0;\n        }\n        \n        int unitA = (int)(Math.log10(a));\n        int unitB = (int)(Math.log10(b));\n        \n        int unitAB = unitA + unitB;\n        \n        if( unitAB < 0 ) {\n            return 0;\n        }\n        \n        if(a < 1000 || b < 1000) {\n            return a*b;\n        }\n        \n        int unitAB_1000 = unitAB/1000;\n        int unitAB_1000_of_b = unitAB_1000*b;\n        \n        int result = 0;\n        \n        if(unitAB_1000_of_b == 0) {\n            result = a;\n        } else {\n            result = unitAB_1000_of_b;\n        }\n        \n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "int c=0;\n        if(a<0)\n        {\n            try{\n            throw new ArithmeticException(\"Negative value cannot be taken as an input\");\n            }catch(ArithmeticException e){\n                e.printStackTrace();\n            }\n        }\n        if(b<0)\n        {\n            try{\n            throw new ArithmeticException(\"Negative value cannot be taken as an input\");\n            }catch(ArithmeticException e){\n                e.printStackTrace();\n            }\n        }\n        if(a==0)\n        {\n            return b;\n        }\n        while(b>0)\n        {\n            c=c*10+(a%10);\n            a=a/10;\n            b=b/10;\n        }\n        return c;",
    "grade-2": {
      "execution": 0
    },
    "3": "int result = 0;\n        // TODO\n        return result;",
    "grade-3": {
      "execution": 0
    },
    "4": "return multiplyUnitDigits(a, b);",
    "grade-4": {
      "execution": 0
    },
    "5": "// Use the % operator to get the last digits of\n        // both numbers.\n        int m = Math.abs(a % 10);\n        int n = Math.abs(b % 10);\n        return m * n;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns True if x * n evaluates to a whole number and False\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // simplify(\"1/5\", \"5/1\") = True\n    // simplify(\"1/6\", \"2/1\") = False\n    // simplify(\"7/10\", \"10/2\") = False\n    public static boolean simplify(String x, String n) {\n",
    "task_id": "144",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n",
    "simplified_intent": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
    "snippet": [
      "        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Fraction f1 = Fraction.get(x);\n        Fraction f2 = Fraction.get(n);\n        Fraction f3 = Fraction.getFraction(f1.getNumerator(), f1.getDenominator());\n        Fraction f4 = Fraction.getFraction(f2.getNumerator(), f2.getDenominator());\n        if (f3.getNumerator() == f1.getNumerator()) {\n            return f1.getDenominator() == 1;\n        }\n        if (f4.getNumerator() == f2.getNumerator()) {\n            return f2.getDenominator() == 1;\n        }\n        Fraction f5 = Fraction.getFraction(f3.getNumerator(), f3.getDenominator());\n        if (f4.getNumerator() % f5.getNumerator() == 0) {\n            int q1 = f2.getNumerator() / f5.getNumerator();\n            int q2 = f1.getNumerator() / f5.getNumerator();\n            if (q1 == q2) {\n                return false;\n            }\n            if (f2.getDenominator() == 1) {\n                return true;\n            }\n        }\n        return false;",
    "grade-0": {
      "execution": 0
    },
    "1": "// Complete the implementation here",
    "grade-1": {
      "execution": 0
    },
    "2": "try{\n            String[] nx = x.split(\"/\");\n            String[] nn = n.split(\"/\");\n            int nx1 = Integer.parseInt(nx[0]);\n            int nx2 = Integer.parseInt(nx[1]);\n            int nn1 = Integer.parseInt(nn[0]);\n            int nn2 = Integer.parseInt(nn[1]);\n            if(nx1 == nn1 && nx2 == nn2) return true;\n            else return false;\n        }catch (Exception e){\n            return false;\n        }",
    "grade-2": {
      "execution": 0
    },
    "3": "BigInteger numerator = new BigInteger(x.split(\"/\")[0]);\n        BigInteger denominator = new BigInteger(x.split(\"/\")[1]);\n        BigInteger factorNumerator = new BigInteger(n.split(\"/\")[0]);\n        BigInteger factorDenominator = new BigInteger(n.split(\"/\")[1]);\n        BigInteger productNumerator = numerator.multiply(factorNumerator);\n        BigInteger productDenominator = denominator.multiply(factorDenominator);\n        if (productNumerator.mod(productDenominator).equals(BigInteger.ZERO)) {\n            return true;\n        }\n        return false;",
    "grade-3": {
      "execution": 1
    },
    "4": "String[] fractionX = x.split(\"/\");\n        String[] fractionN = n.split(\"/\");\n        long numeratorX = Long.parseLong(fractionX[0]);\n        long numeratorN = Long.parseLong(fractionN[0]);\n        long denominatorX = Long.parseLong(fractionX[1]);\n        long denominatorN = Long.parseLong(fractionN[1]);\n        long numeratorP = numeratorX * numeratorN;\n        long denominatorP = denominatorX * denominatorN;\n        return numeratorP % denominatorP == 0;",
    "grade-4": {
      "execution": 1
    },
    "5": "return new Rational(x).multiply(new Rational(n)).isWhole();",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Integer> derivative(ArrayList<Integer> xs) {\n",
    "task_id": "62",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n",
    "simplified_intent": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
    "snippet": [
      "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (xs == null || xs.size() < 3) {\n            return null;\n        }\n        ArrayList[] rec = new ArrayList[xs.size()+1];\n        for(int i = 0; i < rec.length; i++) {\n            ArrayList r = new ArrayList();\n            r.add(xs);\n            rec[i] = r;\n        }\n\n        for(int i = 0; i < rec.length; i++) {\n            rec[i].add(0);\n        }\n\n        for(int i = 1; i < rec.length; i++) {\n            rec[i+1] = rec[i].clone();\n        }\n\n        for(int i = 0; i < rec.length; i++) {\n            for(int j = 0; j < rec[i].size(); j++){\n                rec[i][j] += rec[i-1][j]*i;\n            }\n        }\n\n        return rec[xs.size()];",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> ret = new ArrayList<>();\n        for(Integer x : xs) {\n            for(int i = 0; i <= x; i++) {\n                ret.add(x * i);\n            }\n        }\n        return ret;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> derivative = new ArrayList<>();\n        for (int i = xs.size() - 1; i >= 1; i--) {\n            derivative.add(1);\n            for (int j = i - 1; j >= 0; j--) {\n                derivative.add(Derivative.multiply(xs.get(i), xs.get(j)));\n            }\n        }\n        return derivative;",
    "grade-2": {
      "execution": 0
    },
    "3": "int[] ys = xs.stream().mapToInt(Integer::intValue).toArray();\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 1; i < ys.length; i++) {\n            ret.add(ys[i] * i);\n        }\n        return ret;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> ret = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
    "grade-4": {
      "execution": 1
    },
    "5": "//throw new RuntimeException(\"derivative not implemented\");\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++){\n            ans.add(xs.get(i) * i);\n        }\n        return ans;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> remove_vowels('')\n    // ''\n    // >>> remove_vowels('abcdef')\n    // 'bcdf'\n    // >>> remove_vowels('aaaaa')\n    // ''\n    // >>> remove_vowels('aaBAA')\n    // 'B'\n    // >>> remove_vowels('zbcd')\n    // 'zbcd'\n    public static String removeVowels(String text) {\n",
    "task_id": "51",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n",
    "simplified_intent": "remove_vowels is a function that takes string and returns string without vowels.",
    "snippet": [
      "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// 1. split text into chars\n        char[] charArray = text.toCharArray();\n        \n        // 2. filter the char\n        List<Character> newArrayList = new ArrayList<>();\n        for (char c: charArray) {\n            if(!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')){\n                newArrayList.add(c);\n            }\n        }\n        \n        // 3. convert back to string\n        StringBuilder sb = new StringBuilder();\n        for (Character c: newArrayList) {\n            sb.append(c);\n        }\n        \n        return sb.toString();",
    "grade-0": {
      "execution": 0
    },
    "1": "Set<String> vowels = new HashSet<String>(Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\"));\n        String result = \"\";\n        char[] charArray = text.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (vowels.contains((char) charArray[i])) {\n                result += (char) charArray[i];\n            }\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "StringBuilder builder = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y') {\n                builder.append(c);\n            }\n        }\n        return builder.toString();",
    "grade-2": {
      "execution": 0
    },
    "3": "Set<Character> set = new HashSet<Character>();\n        set.add('a');\n        set.add('e');\n        set.add('i');\n        set.add('o');\n        set.add('u');\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!set.contains(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
    "grade-3": {
      "execution": 0
    },
    "4": "List<Character> vowels = new ArrayList<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        StringBuilder filteredText = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!vowels.contains(text.charAt(i))) {\n                filteredText.append(text.charAt(i));\n            }\n        }\n        return filteredText.toString();",
    "grade-4": {
      "execution": 1
    },
    "5": "// Implementation\n        return null;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array of the words.\n    // For example:\n    // words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    public static ArrayList<String> wordsString(String s) {\n",
    "task_id": "101",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n",
    "simplified_intent": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
    "snippet": [
      "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "String[] ss = s.split(\", \");\n        List<String> ss = new ArrayList<String>(Arrays.asList(ss));\n        ArrayList<String> stringList = new ArrayList<>();\n        for (String ss : ss) {\n            stringList.add(ss.trim());\n        }\n        return stringList;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<String> result = new ArrayList<>();\n        String[] array = s.split(\"[, ]\");\n        for (String s1 : array) {\n            result.add(s1);\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<String> list = new ArrayList<>();\n        ArrayList<String> list2 = new ArrayList<>();\n        ArrayList<String> list3 = new ArrayList<>();\n        ArrayList<String> list4 = new ArrayList<>();\n        ArrayList<String> list5 = new ArrayList<>();\n        ArrayList<String> list6 = new ArrayList<>();\n        String newStr = \"\";\n        int count = 0;\n\n        String[] arrStr = s.trim().split(\"\\\\s+\");\n        for (String str : arrStr) {\n            list2.add(str);\n        }\n        list2.stream().forEach(s -> list2.remove((list2.indexOf(s)) + 1));\n        list2.stream().forEach(s -> list2.remove((list2.indexOf(s)) + 1));\n        list.add(s);\n        list2.stream().forEach(s -> list.add(s));\n        return list;",
    "grade-2": {
      "execution": 0
    },
    "3": "return new ArrayList<String>(Arrays.asList(s.split(\"[\\\\,\\\\s]+\")));",
    "grade-3": {
      "execution": 0
    },
    "4": "String[] words = s.split(\"[,\\\\s]\");\n        ArrayList<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                result.add(word);\n            }\n        }\n        return result;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<String> words = new ArrayList<String>();\n        int index = 0;\n        String word = \"\";\n        while (index < s.length()) {\n            char curr = s.charAt(index);\n            if (curr == ' ' || curr == ',') {\n                if (word.length() > 0) {\n                    words.add(word);\n                    word = \"\";\n                }\n            } else {\n                word += curr;\n            }\n            index++;\n        }\n        words.add(word);\n        return words;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n    public static int chooseNum(int x, int y) {\n",
    "task_id": "102",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n",
    "simplified_intent": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
    "snippet": [
      "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (x > y || x < 0 || y < 0) {\n            return -1;\n        }\n        int[] arr = {x};\n        Arrays.sort(arr);\n        for(int i = 1;i<=y;i++) {\n            if (arr[i] == (x+i)) {\n                arr.add(i);\n                Arrays.sort(arr);\n            }\n        }\n        return arr[0];",
    "grade-0": {
      "execution": 0
    },
    "1": "return IntStream.range(x, y)\n                .filter(n -> n % 2 == 0)\n                .max().getAsInt();",
    "grade-1": {
      "execution": 0
    },
    "2": "int result = 0;\n        while (x < y) {\n            if (x % 2 == 0) {\n                if (x % 2 == 0 && y % 2 == 0) {\n                    result = x + y;\n                }\n                if (x % 2 != 0 && y % 2 != 0) {\n                    result = x + y;\n                }\n            }\n            if (y % 2 == 0) {\n                if (x % 2 == 0 && y % 2 == 0) {\n                    result = x + y;\n                }\n                if (x % 2 != 0 && y % 2 != 0) {\n                    result = x + y;\n                }\n            }\n            x++;\n            y++;\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "int diff = y - x;\n        if (diff < 0) return -1;\n        int index = diff % 2 == 0 ? diff : diff - 1;\n        int result = x + index;\n        return result % 2 == 0 ? result : -1;",
    "grade-3": {
      "execution": 0
    },
    "4": "int xx = x;\n        int yy = y;\n        if (x > y) {\n            xx = y;\n            yy = x;\n        }\n        for (int i = yy; i >= xx; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;",
    "grade-4": {
      "execution": 0
    },
    "5": "int res = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                res = i;\n            }\n        }\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> prime_fib(1)\n    // 2\n    // >>> prime_fib(2)\n    // 3\n    // >>> prime_fib(3)\n    // 5\n    // >>> prime_fib(4)\n    // 13\n    // >>> prime_fib(5)\n    // 89\n    public static int primeFib(int n) {\n",
    "task_id": "39",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n",
    "simplified_intent": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
    "snippet": [
      "        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n == 0 || n == 1) {\n            return n;\n        }\n        else {\n            return primeFib(n - 1) + primeFib(n - 2);\n        }",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n <= 1) {\n            return 2;\n        }\n        switch (n % 2) {\n            case 0:\n                return primeFib(n - 1) + 1;\n            case 1:\n                return primeFib(n - 1) + 2;\n            default:\n                return primeFib(n - 2) + primeFib(n - 1);\n        }",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n <= 1)\n            return n;\n        else if (n == 2)\n            return 2;\n        else if (n % 2 == 0) {\n            return primeFib(3 * n + 1) / 2;\n        } else {\n            return primeFib(3 * n + 3) / 2;\n        }",
    "grade-2": {
      "execution": 0
    },
    "3": "int[] cache = new int[n];\n        int[] p = new int[n];\n        int[] q = new int[n];\n        p[0] = 2;\n        q[0] = 1;\n        int i = 1;\n        int index = 0;\n        int candidate = 0;\n        while (index < n) {\n            cache[index] = candidate;\n            candidate = p[i - 1] + q[i - 1];\n            p[i] = q[i - 1];\n            q[i] = candidate;\n            i++;\n            if (BigInteger.valueOf(candidate).isProbablePrime(10)) {\n                index++;\n            }\n        }\n        return cache[n - 1];",
    "grade-3": {
      "execution": 0
    },
    "4": "if (n == 1) return 2;\n        if (n == 2) return 3;\n        int i = 3;\n        int j = 5;\n        int k = 8;\n        int c = 0;\n        while (true) {\n            if (isPrime(j)) c++;\n            if (c == n) return j;\n            int t = k;\n            k = i + j + k;\n            i = j;\n            j = t;\n        }",
    "grade-4": {
      "execution": 0
    },
    "5": "int a = 2;\n        int b = 3;\n        int primeFib = 0;\n        int counter = 1;\n        while (counter < n) {\n            primeFib = b;\n            int c = a + b;\n            a = b;\n            b = c;\n            while (!isPrime(b)) {\n                b += c;\n            }\n            counter++;\n        }\n        return primeFib;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n    public static boolean isEqualToSumEven(int n) {\n",
    "task_id": "138",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n",
    "simplified_intent": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
    "snippet": [
      "        return n % 2 == 0 && n >= 8;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int sum = 0;\n        while ( n >= 4 ) {\n            sum += n;\n            n -= 4;\n        }\n        return sum == 4 && n == 0;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n == 0)\n            return true;\n        else\n            return (n%2 == 0) && isEqualToSumEven(n/2);",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n <= 4) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        return isEqualToSumEven(n - 4) + isEqualToSumEven(n - 2);",
    "grade-2": {
      "execution": 0
    },
    "3": "// Fill in your solution here\n        return false;",
    "grade-3": {
      "execution": 0
    },
    "4": "if (n % 2 != 0) {\n            return false;\n        }\n        // Create a list of all even numbers smaller than n\n        List<Integer> evens = IntStream.range(2, n).filter(x -> x % 2 == 0).boxed().collect(Collectors.toList());\n        // Check whether the list contains n and if so, return true\n        return evens.contains(n);",
    "grade-4": {
      "execution": 0
    },
    "5": "if(n<=0) return false;\n        int target = n;\n        int sum = 0;\n        for(int i=2;i<=target;i+=2){\n            sum += i;\n            if(sum == target) return true;\n            if(sum > target) break;\n        }\n        return false;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    public static ArrayList<Integer> parseMusic(String music_string) {\n",
    "task_id": "17",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n",
    "simplified_intent": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
    "snippet": [
      "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> beats_array = new ArrayList<>();\n        music_string = music_string.replace('o', '0');\n        music_string = music_string.replace('|', '1');\n        music_string = music_string.replaceAll(\"\\\\.\", \"\");\n        String[] arr = music_string.split(\"(?!^)\");\n        for (String beat : arr) {\n            try {\n                beats_array.add(Integer.valueOf(beat));\n            } catch (NumberFormatException e) {\n                System.out.println(\"Could not parse music string : \" + music_string);\n            }\n        }\n        return beats_array;",
    "grade-0": {
      "execution": 0
    },
    "1": "// write your code here\n        ArrayList<Integer> notes = new ArrayList<Integer>();\n        if (music_string.isEmpty()) return notes;\n        String[] parts = music_string.split(\" \");\n        for (int i = 0; i < parts.length; i++) {\n            notes.add(getBeatCount(parts[i]));\n        }\n        return notes;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> notes = new ArrayList<Integer>();\n        String s = music_string;\n        music_string.trim();\n        music_string.replaceAll(\" \", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\\\\\\", \"\");\n        music_string.replaceAll(\"\\\\[\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        music_string.replaceAll(\"\\\\\\\\\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        s = music_string;\n        music_string.trim();\n        music_string.replaceAll(\" \", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        s = music_string;\n        music_string.trim();\n        music_string.replaceAll(\" \", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        s = music_string;\n        music_string.trim();\n        music_string.replaceAll(\" \", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replace",
    "grade-2": {
      "execution": 0
    },
    "3": "// Your code here\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        String letter = \"\";\n        String num = \"\";\n        ArrayList<String> notes = new ArrayList<String>();\n        ArrayList<Integer> note_lengths = new ArrayList<Integer>();\n        for (int i = 0; i < music_string.length(); i++) {\n            if (Character.isLetter(music_string.charAt(i))) {\n                letter += music_string.charAt(i);\n            } else if (Character.isDigit(music_string.charAt(i))) {\n                num += music_string.charAt(i);\n            } else if (letter != \"\" && num != \"\") {\n                notes.add(letter);\n                note_lengths.add(Integer.parseInt(num));\n                letter = \"\";\n                num = \"\";\n            }\n        }\n        if (letter != \"\" && num != \"\") {\n            notes.add(letter);\n            note_lengths.add(Integer.parseInt(num));\n        }\n        for (int i = 0; i < notes.size(); i++) {\n            String note = notes.get(i);\n            if (note.equals(\"o\")) {\n                list.add(4);\n            } else if (note.equals(\"o|\")) {\n                list.add(2);\n            } else if (note.equals(\".|\")) {\n                list.add(1);\n            } else {\n                note = note.replaceAll(\"\\\\.\", \"\");\n                note = note.replaceAll(\"\\\\|\", \"\");\n                int num_dots = note.length();\n                int base_note = note_lengths.get(i);\n                int total_note = 0;\n                for (int j = 0; j < num_dots; j++) {\n                    total_note += base_note;\n                    base_note /= 2;\n                }\n                total_note += base_note;\n                list.add(total_note);\n            }\n        }\n        return list;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> music_list = new ArrayList<Integer>();\n        String[] notes = music_string.split(\" \");\n        //  System.out.println(notes.length);\n        for (int i = 0; i < notes.length; i++) {\n            String notes1 = notes[i];\n            switch (notes1) {\n                case \"o\":\n                    music_list.add(4);\n                    break;\n                case \"o|\":\n                    music_list.add(2);\n                    break;\n                case \".|\":\n                    music_list.add(1);\n                    break;\n            }\n        }\n        return music_list;",
    "grade-4": {
      "execution": 1
    },
    "5": "var list = new ArrayList<Integer>();\n        var chars = music_string.split(\" \");\n        for (var c : chars) {\n            switch (c) {\n                case \"o\":\n                    list.add(4);\n                    break;\n                case \"o|\":\n                    list.add(2);\n                    break;\n                case \".|\":\n                    list.add(1);\n                    break;\n            }\n        }\n        return list;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    // True\n    // >>> same_chars('abcd', 'dddddddabc')\n    // True\n    // >>> same_chars('dddddddabc', 'abcd')\n    // True\n    // >>> same_chars('eabcd', 'dddddddabc')\n    // False\n    // >>> same_chars('abcd', 'dddddddabce')\n    // False\n    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    // False\n    public static boolean sameChars(String s0, String s1) {\n",
    "task_id": "54",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n",
    "simplified_intent": "Check if two words have the same characters.",
    "snippet": [
      "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "boolean answer = false;\n        int len_0 = s0.length();\n        int len_1 = s1.length();\n        for (int i = 0; i < len_0; i++) {\n            if (s1.charAt(i) != s0.charAt(i)) {\n                answer = true;\n                break;\n            }\n        }\n        return answer;",
    "grade-0": {
      "execution": 0
    },
    "1": "char[] s0_chars = s.toCharArray();\n        char[] s1_chars = s.toCharArray();\n\n        for (int i = 0; i < s0_chars.length; i++) {\n            if (s1_chars[i] != s0_chars[i]) return false;\n        }\n\n        return true;",
    "grade-1": {
      "execution": 0
    },
    "2": "for (int i = 0; i < s0.length(); i++) {\n            if (s1.indexOf(s0.charAt(i)) == -1)\n                return false;\n        }\n        return true;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (s0.length() != s1.length()) {\n            return false;\n        }\n        int [] cnt = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            cnt[s0.charAt(i) - 'a']++;\n            cnt[s1.charAt(i) - 'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
    "grade-3": {
      "execution": 0
    },
    "4": "// ...\n        int[] alphabet = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            alphabet[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            alphabet[s1.charAt(i) - 'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (alphabet[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
    "grade-4": {
      "execution": 0
    },
    "5": "final int LEN = 256;\n        int[] count = new int[LEN];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < LEN; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String> words) {\n",
    "task_id": "158",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n",
    "simplified_intent": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
    "snippet": [
      "        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int max = 0;\n        String temp = \"\";\n        for(String word: words) {\n            int count = 0;\n            for(char c: word.toCharArray()) {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n                temp = word;\n            }\n        }\n        if (max > 1) {\n            for (int i = 0; i < words.size(); i++) {\n                String word2 = words.get(i);\n                if (word2.compareTo(temp) > 0) {\n                    temp = word2;\n                }\n            }\n        }\n        return temp;",
    "grade-0": {
      "execution": 0
    },
    "1": "String max = \"\";\n        int count = 0;\n        for (String word : words) {\n            Set<Character> unique = new HashSet<Character>();\n            for (char c : word.toCharArray()) {\n                if (!unique.add(c)) {\n                    unique.clear();\n                    break;\n                }\n            }\n            if (unique.size() > count) {\n                max = word;\n                count = unique.size();\n            }\n        }\n        return max;",
    "grade-1": {
      "execution": 0
    },
    "2": "return words.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .sorted(Map.Entry.<String, Long>comparingByValue().reversed())\n            .map(Map.Entry::getKey)\n            .findFirst()\n            .orElse(\"\");",
    "grade-2": {
      "execution": 0
    },
    "3": "return null;",
    "grade-3": {
      "execution": 0
    },
    "4": "String result = \"\";\n        Set<Character> chars = new HashSet<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                chars.add(c);\n            }\n            if (chars.size() > result.length()) {\n                result = word;\n            }\n            chars.clear();\n        }\n        return result;",
    "grade-4": {
      "execution": 0
    },
    "5": "int maxUnique = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            int unique = countUnique(word);\n            if (unique > maxUnique) {\n                maxUnique = unique;\n                maxWord = word;\n            }\n        }\n        return maxWord;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    public static String fileNameCheck(String file_name) {\n",
    "task_id": "141",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n",
    "simplified_intent": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
    "snippet": [
      "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int count = 0;\n        char firstChar = file_name.charAt(0);\n        char secondChar = file_name.charAt(1);\n        char thirdChar = file_name.charAt(2);\n        if (file_name.length() > 3 || file_name.contains(\".\") == false || firstChar == '.' || secondChar == 0 || secondChar == '.') {\n            return \"No\";\n        }\n        if (file_name.contains(\".\")) {\n            String[] split = file_name.split(\"\\\\.\");\n            String firstString = split[0];\n            int first = firstString.charAt(0);\n            if (first.matches(\"[a-zA-Z]\") && secondChar == '.') {\n                return \"No\";\n            }\n        }\n        if (file_name.contains(\".\")) {\n            String[] split = file_name.split(\"\\\\.\");\n            String firstString = split[0];\n            int first = firstString.charAt(0);\n            if (first.matches(\"[a-zA-Z]\") && secondChar == '.') {\n                return \"No\";\n            }\n        }\n        return null;",
    "grade-0": {
      "execution": 0
    },
    "1": "boolean valid = false;\n        char firstLetter = file_name.charAt(0);\n        char lastLetter = file_name.charAt(file_name.length() - 1);\n        String file_name = file_name.substring(1);\n        if (file_name.length() > 3) {\n            return valid;\n        }\n        if (file_name.indexOf(' ') >= 0) {\n            return valid;\n        }\n        if (file_name.startsWith(firstLetter) && \n            !file_name.equals(firstLetter + file_name)) {\n            return valid;\n        }\n        if (file_name.endsWith(\".exe\") || \n            file_name.endsWith(\".dll\") ||\n            file_name.endsWith(\".txt\")) {\n            valid = true;\n        }\n        return valid;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (file_name.matches(\"[0-9]+\") && !file_name.contains(\".\") &&\n                file_name.substring(0, 1).matches(\"[a-zA-Z]\") &&\n                file_name.substring(file_name.indexOf(\".\")).matches(\"(txt|exe|dll)\"))\n            return \"Yes\";\n        return \"No\";",
    "grade-2": {
      "execution": 0
    },
    "3": "// TODO: implement this function\n        String answer = \"\";\n        String[] file_parts = file_name.split(\"\\\\.\");\n        if (file_parts.length == 2) {\n            if (file_parts[0].length() > 0) {\n                if (file_parts[0].substring(0, 1).matches(\"[a-zA-Z]\")) {\n                    if (file_parts[1].equals(\"txt\") || file_parts[1].equals(\"exe\") || file_parts[1].equals(\"dll\")) {\n                        if (file_parts[0].replaceAll(\"[^0-9]\", \"\").length() <= 3) {\n                            answer = \"Yes\";\n                        }\n                    }\n                }\n            }\n        }\n        if (answer.equals(\"\")) {\n            answer = \"No\";\n        }\n        return answer;",
    "grade-3": {
      "execution": 1
    },
    "4": "int count = 0;\n        int index = 0;\n        boolean first = true;\n        for (int i = 0; i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n            if (Character.isDigit(c)) {\n                count++;\n            }\n            if (c == '.') {\n                index = i;\n            }\n            if (first && !Character.isLetter(c)) {\n                return \"No\";\n            }\n            first = false;\n        }\n        if (count > 3) {\n            return \"No\";\n        }\n        String extension = file_name.substring(index);\n        if (!extension.equals(\".txt\") && !extension.equals(\".exe\") && !extension.equals(\".dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";",
    "grade-4": {
      "execution": 0
    },
    "5": "// Your code here\n        char[] arr = file_name.toCharArray();\n        boolean condition1 = false;\n        boolean condition2 = false;\n        boolean condition3 = false;\n        boolean condition4 = false;\n        boolean condition5 = false;\n        boolean condition6 = false;\n        for(int i = 0; i < arr.length; i++) {\n            if(!(arr[i] == '0' || arr[i] == '1' || arr[i] == '2' || arr[i] == '3' || arr[i] == '4' || arr[i] == '5' || arr[i] == '6' || arr[i] == '7' || arr[i] == '8' || arr[i] == '9')) {\n                condition1 = true;\n            }\n            if(arr[i] == '.') {\n                condition2 = true;\n            }\n            if(i == 0 && (arr[i] == 'a' || arr[i] == 'b' || arr[i] == 'c' || arr[i] == 'd' || arr[i] == 'e' || arr[i] == 'f' || arr[i] == 'g' || arr[i] == 'h' || arr[i] == 'i' || arr[i] == 'j' || arr[i] == 'k' || arr[i] == 'l' || arr[i] == 'm' || arr[i] == 'n' || arr[i] == 'o' || arr[i] == 'p' || arr[i] == 'q' || arr[i] == 'r' || arr[i] == 's' || arr[i] == 't' || arr[i] == 'u' || arr[i] == 'v' || arr[i] == 'w' || arr[i] == 'x' || arr[i] == 'y' || arr[i] == 'z' || arr[i] == 'A' || arr[i] == 'B' || arr[i] == 'C' || arr[i] == 'D' || arr[i] == 'E' || arr[i] == 'F'",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n",
    "task_id": "157",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n",
    "simplified_intent": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
    "snippet": [
      "        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "double aa = Math.abs(a/b), ba = Math.abs(b/c), ca = Math.abs(c/a); \n        if (aa==ba&&ba==ca) return false;\n        else if ((aa<=90 && ba<=90 && ca<=90) || (aa>=90 && ba>=90 && ca>=90)) \n            return false;\n        else return true;",
    "grade-0": {
      "execution": 0
    },
    "1": "return ((a + b > c) && (a + c > b) && (b + c > a));",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your code here\n        int ab = Math.abs(a - b);\n        int ac = Math.abs(a - c);\n        int bc = Math.abs(b - c);\n        boolean isRight = ac + bc == ab;\n        return isRight;",
    "grade-2": {
      "execution": 0
    },
    "3": "int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        if (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]) {\n            return true;\n        }\n        return false;",
    "grade-3": {
      "execution": 1
    },
    "4": "// Algorithm: Square all three sides and add the result. The sum of the squared\n        // sides has to be a perfect square.\n        return isPerfectSquare(a*a + b*b + c*c);",
    "grade-4": {
      "execution": 0
    },
    "5": "return a*a + b*b == c*c ||\n               a*a + c*c == b*b ||\n               b*b + c*c == a*a;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    // cycpattern_check(\"abcd\",\"abd\") => False\n    // cycpattern_check(\"hello\",\"ell\") => True\n    // cycpattern_check(\"whassup\",\"psus\") => False\n    // cycpattern_check(\"abab\",\"baa\") => True\n    // cycpattern_check(\"efef\",\"eeff\") => False\n    // cycpattern_check(\"himenss\",\"simen\") => True\n    public static boolean cycpatternCheck(String a, String b) {\n",
    "task_id": "154",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n",
    "simplified_intent": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
    "snippet": [
      "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "List<String> aList = Arrays.asList(a.split(\"\"));\n        List<String> bList = Arrays.asList(b.split(\"\"));\n\n        boolean isCycPattern = false;\n        boolean isCycPattern2 = false;\n\n        for(int i=0;i<aList.size();i++) {\n            for(int j=0;j<bList.size();j++) {\n                if(aList.get(i).equals(bList.get(j))) {\n                    isCycPattern = true;\n                    break;\n                }\n            }\n        }\n        for(int i=0;i<aList.size()-2;i++) {\n            for(int j=0;j<bList.size()-2;j++) {\n                if(aList.get(i).equals(bList.get(j))) {\n                    isCycPattern2 = true;\n                    break;\n                }\n            }\n        }\n        if(isCycPattern==true) {\n            return isCycPattern2;\n        }\n        else {\n            return isCycPattern;\n        }",
    "grade-0": {
      "execution": 0
    },
    "1": "boolean flag = false;\n        int i, j = 0, k = 0;\n        int lena = a.length();\n        int lenb = b.length();\n        String ab = a;\n        String bb = b;\n        if ((a.length()!=b.length()) || (a.length()==0))\n            return false;\n        for (i = 0; i <= lena; i++)\n        {\n            if((a.charAt(i) == b.charAt(j)))\n                j++;\n            else\n            {\n                if (j < lenb)\n                    k = j;\n                else\n                    k = 0;\n                String pattern = b.substring(k, k+1);\n                String s = a.substring(i, i+1);\n                if (s.contains(pattern))\n                {\n                    flag = true;\n                    break;\n                }\n                j = 0;\n            }\n        }\n        return flag;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (a == null || b == null) return false;\n        if (b.length() == 0) return false;\n        if (a.length() == 0) return false;\n        if (b.length() > a.length()) return false;\n        if (a.length() % 2 != 0) return false;\n        List<String> list = new ArrayList<>();\n        for (int i = 0; i < b.length(); i++)\n            if (b.charAt(i) != a.charAt(i))\n                list.add(a.substring(0, i) + b.substring(i + 1));\n        Collections.sort(list);\n        return list.contains(b);",
    "grade-2": {
      "execution": 0
    },
    "3": "int len = b.length();\n        for (int i = 0; i < len; i++) {\n            if (a.contains(b)) return true;\n            b = b.substring(1) + b.charAt(0);\n        }\n        return false;",
    "grade-3": {
      "execution": 1
    },
    "4": "b = b + b;\n        return b.contains(a);",
    "grade-4": {
      "execution": 0
    },
    "5": "if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(0)) {\n                boolean found = true;\n                for (int j = 0; j < b.length(); j++) {\n                    if (a.charAt((i + j) % a.length()) != b.charAt(j)) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public static int countDistinctCharacters(String string) {\n",
    "task_id": "16",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n",
    "simplified_intent": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
    "snippet": [
      "        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return string.toLowerCase()\n                .chars()\n                .mapToObj(i -> String.valueOf((char)i))\n                .distinct()\n                .count();",
    "grade-0": {
      "execution": 0
    },
    "1": "int result = 0;\n        for (char c : string.toCharArray())\n            result += Character.isLetterOrDigit(c) ? 1 : 0;\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "Set<Character> seen = new HashSet<Character>();\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (seen.contains(c)) {\n                count++;\n            } else {\n                seen.add(c);\n            }\n        }\n        return count;",
    "grade-2": {
      "execution": 0
    },
    "3": "Set<Character> s = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            s.add(c);\n        }\n        return s.size();",
    "grade-3": {
      "execution": 0
    },
    "4": "return (int) string.toLowerCase().chars().distinct().count();",
    "grade-4": {
      "execution": 1
    },
    "5": "// throw new NotImplementedException();\n        int count = 0;\n        char[] ch = string.toCharArray();\n        Set<Character> set = new HashSet<Character>();\n        for(int i = 0; i < ch.length; i++) {\n            set.add(ch[i]);\n        }\n        count = set.size();\n        return count;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts two lists of strings and returns the list that has \n    // total number of chars in the all strings of the list less than the other list.\n    // if the two lists have the same number of chars, return the first list.\n    // Examples\n    // total_match([], []) \u279e []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n",
    "task_id": "74",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n",
    "simplified_intent": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
    "snippet": [
      "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int listSize1 = lst1.size();\n        int listSize2 = lst2.size();\n        ArrayList<String> result = new ArrayList<>();\n        if (listSize1 > listSize2) \n            return result;\n        if (listSize2 == 0) \n            return result;\n        if (listSize1 == listSize2)\n            return lst1;\n        int minCount = Math.min(listSize1, listSize2);\n        Collections.sort(lst1, Comparator.comparing(String::length).reversed());\n        Collections.sort(lst2, Comparator.comparing(String::length).reversed());\n        int index = 0;\n        while (index < listSize1 - minCount && index < listSize2 - minCount) {\n            int count = 0;\n            while (index < listSize1 - minCount && index < listSize2 - minCount && lst1.get(index).length() <= lst2.get(index).length()) {\n                count += 1;\n                index += 1;\n            }\n            listSize1 -= count;\n            listSize2 -= count;\n            result.addAll(lst1.subList(index, Math.min(index + minCount, listSize1)));\n            result.addAll(lst2.subList(index, Math.min(index + minCount, listSize2)));\n            index = Math.min(index + minCount, listSize1);\n        }\n        if (index < listSize1)\n            result.addAll(lst1.subList(index, Math.min(listSize1, listSize2)));\n        if (index < listSize2)\n            result.addAll(lst2.subList(index, Math.min(listSize2, listSize1)));\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "// Solution logic\n        // Step 1: Find out the length of both strings\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        // Step 2: Make a list with same length\n        ArrayList<String> match = new ArrayList<String>(n1);\n        // Step 3: For each string in lst1, if exist in lst2, add it into list\n        for (int i = 0; i < n1; i++) {\n            if (lst2.contains(lst1.get(i))) {\n                match.add(lst1.get(i));\n            }\n        }\n        // Step 4: Return list\n        return match;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<String> lst3 = new ArrayList<>();\n        lst3.addAll(lst1);\n        int listSize = lst1.size();\n        int list2Size = lst2.size();\n        if (listSize == list2Size) {\n            int i = 0;\n            while (i < listSize) {\n                if (lst1.get(i).length() > lst2.get(i).length()) {\n                    i++;\n                } else {\n                    int j = 0;\n                    while (j < list2Size && lst1.get(i).equals(lst2.get(j))) {\n                        j++;\n                    }\n                    list3.add(lst1.get(i));\n                    i = j;\n                }\n            }\n            return lst3;\n        } else {\n            System.out.println(\"listSize: \" + listSize + \", list2Size: \" + list2Size);\n        }",
    "grade-2": {
      "execution": 0
    },
    "3": "int len1 = lst1.stream().mapToInt(e -> e.length()).sum();\n        int len2 = lst2.stream().mapToInt(e -> e.length()).sum();\n        return len1 > len2 ? lst2 : lst1;",
    "grade-3": {
      "execution": 1
    },
    "4": "int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        return sum1 <= sum2 ? lst1 : lst2;",
    "grade-4": {
      "execution": 1
    },
    "5": "int total_chars_lst1 = 0;\n        int total_chars_lst2 = 0;\n        for (String a : lst1) {\n            total_chars_lst1 += a.length();\n        }\n        for (String b : lst2) {\n            total_chars_lst2 += b.length();\n        }\n        return total_chars_lst1 < total_chars_lst2 ? lst1 : lst2;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n    // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Integer, Integer> interval1, Pair<Integer, Integer> interval2) {\n",
    "task_id": "127",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n",
    "simplified_intent": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
    "snippet": [
      "        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int[] start = new int[2];\n        int[] end = new int[2];\n        start[0] = interval1.getKey();\n        start[1] = interval1.getValue();\n        end[0] = interval2.getKey();\n        end[1] = interval2.getValue();\n        int count = 0;\n        for (int i = start[0]; i <= end[0]; i++) {\n            int count = 0;\n            for (int j = start[1]; j <= end[1]; j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n            if (count == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
    "grade-0": {
      "execution": 0
    },
    "1": "Pair<Integer, Integer> start1 = new Pair<>();\n        Pair<Integer, Integer> start2 = new Pair<>();\n        Pair<Integer, Integer> end1 = new Pair<>();\n        Pair<Integer, Integer> end2 = new Pair<>();\n        boolean intersection = false;\n        boolean allEqual = true;\n\n        for (int i = 0; i < interval1.getLeft() && i < interval2.getLeft(); i++) {\n            start1.setLeft(i);\n            start2.setLeft(i);\n            start1.setRight(interval1.getRight());\n            start2.setRight(interval2.getRight());\n            for (int j = 0; j < interval1.getLeft() && j < interval2.getLeft(); j++) {\n                end1.setLeft(j);\n                end2.setLeft(j);\n                end1.setRight(interval1.getRight());\n                end2.setRight(interval2.getRight());\n                intersection = true;\n                for (int k = 0; k < start1.getLeft() && k < start2.getLeft(); k++) {\n                    if (end1.getLeft() < start2.getLeft() && end2.getLeft() < start1.getLeft() && start2.getLeft() > start1.getLeft() && end2.getLeft() > start1.getLeft()) {\n                        if (end1.getRight() <= start2.getLeft() && end2.getRight() <= start1.getLeft()) {\n                            if (end1.getRight() <= start2.getRight() && end2.getRight() <= start1.getRight()) {\n                                intersection = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (intersection) {\n                    break;\n                }\n            }\n            if (intersection) {\n                break;\n            }\n        }\n        if (intersection) {\n            return \"YES\";\n        }\n        return \"NO\";",
    "grade-1": {
      "execution": 0
    },
    "2": "return null;",
    "grade-2": {
      "execution": 0
    },
    "3": "if(interval1.getValue0() >= interval2.getValue1() || interval2.getValue0() >= interval1.getValue1())\n            return \"NO\";\n        int intersection_length = 1;\n        if(interval1.getValue0() <= interval2.getValue0())\n            intersection_length = interval1.getValue1() - interval2.getValue0();\n        else\n            intersection_length = interval2.getValue1() - interval1.getValue0();\n        return (Primes.isPrime(intersection_length))? \"YES\" : \"NO\";",
    "grade-3": {
      "execution": 0
    },
    "4": "int i1_start = interval1.getValue0();\n        int i1_end = interval1.getValue1();\n        int i2_start = interval2.getValue0();\n        int i2_end = interval2.getValue1();\n        // write your code here\n        return \"\";",
    "grade-4": {
      "execution": 0
    },
    "5": "String result = \"NO\";\n        int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        int len = end - start + 1;\n        if (start <= end) {\n            result = len == 1 ? \"NO\" : isPrime(len) ? \"YES\" : \"NO\";\n        }\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n    // 14\n    public static int fib4(int n) {\n",
    "task_id": "46",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n",
    "simplified_intent": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
    "snippet": [
      "        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if ( n <= 1 ) { return 0; }\n        else { \n        System.out.println(n); \n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4); }",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n <= 2) {\n            return 0;\n        } else if (n == 3) {\n            return 1;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n >= 4 && n <= 25) return n;\n        else if (n >= 26 && n <= 49) return fib4(n - 3) + fib4(n - 2) + fib4(n - 1) + fib4(n - 4);\n        else if (n >= 50 && n <= 99) return fib4(n - 9) + fib4(n - 8) + fib4(n - 7) + fib4(n - 6) + fib4(n - 5) + fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n        else return fib4(n - 13) + fib4(n - 12) + fib4(n - 11) + fib4(n - 10) + fib4(n - 9) + fib4(n - 8) + fib4(n - 7) + fib4(n - 6) + fib4(n - 5) + fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1) + fib4(n - 0);",
    "grade-2": {
      "execution": 0
    },
    "3": "int num1 = 0;\n        int num2 = 0;\n        int num3 = 2;\n        int num4 = 0;\n        int num5 = 0;\n        for (int i = 4; i <= n; i++) {\n            num5 = num1 + num2 + num3 + num4;\n            num1 = num2;\n            num2 = num3;\n            num3 = num4;\n            num4 = num5;\n        }\n        return num5;",
    "grade-3": {
      "execution": 1
    },
    "4": "// TODO: Implement me\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n        }\n        return f[n];",
    "grade-4": {
      "execution": 1
    },
    "5": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 2;\n        int n4 = 0;\n        int curr = 0;\n        for (int i = 4; i <= n; i++) {\n            curr = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = curr;\n        }\n        return curr;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg') returns 0\n    // count_upper('dBBE') returns 0\n    public static int countUpper(String s) {\n",
    "task_id": "98",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n",
    "simplified_intent": "Given a string s, count the number of uppercase vowels in even indices.",
    "snippet": [
      "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Count the vowels\n        HashMap<Character, Integer> counts = new HashMap<>();\n        for(int i = 0; i < s.length(); i++) {\n            Character ch = s.charAt(i);\n            if(counts.containsKey(ch)) {\n                counts.put(ch, counts.get(ch) + 1);\n            } else {\n                counts.put(ch, 1);\n            }\n        }\n\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            Character ch = s.charAt(i);\n            if(counts.containsKey(ch)) {\n                count += counts.get(ch);\n            }\n        }\n        return count;",
    "grade-0": {
      "execution": 0
    },
    "1": "int evenIndex = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                evenIndex++;\n                if (evenIndex % 2 == 0) {\n                    return evenIndex;\n                }\n            }\n        }\n        return 0;",
    "grade-1": {
      "execution": 0
    },
    "2": "int count = 0;\n        for (int i=0; i<s.length(); i++) {\n            if (s.charAt(i)=='A' || s.charAt(i)=='E' || s.charAt(i)=='I' || s.charAt(i)=='O' || s.charAt(i)=='U')\n                count++;\n            if (s.charAt(i)=='a' || s.charAt(i)=='e' || s.charAt(i)=='i' || s.charAt(i)=='o' || s.charAt(i)=='u')\n                count++;\n        }\n        return count;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Fill this in.\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char curr = s.charAt(i);\n            if (Character.isUpperCase(curr)) {\n                switch (curr) {\n                    case 'A':\n                    case 'E':\n                    case 'I':\n                    case 'O':\n                    case 'U':\n                        count++;\n                        break;\n                }\n            }\n        }\n        return count;",
    "grade-3": {
      "execution": 1
    },
    "4": "return s.chars().filter(c -> c >= 'A' && c <= 'Z').filter(c -> (s.indexOf(c) + 1) % 2 == 0).map(c -> 1).sum();",
    "grade-4": {
      "execution": 0
    },
    "5": "int count = 0;\n        // YOUR CODE HERE\n        return count;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n",
    "task_id": "1",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n",
    "simplified_intent": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
    "snippet": [
      "        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// For each group of nested parentheses in the input string, split the group of parentheses up into a\n        // separate string. If there is only one group in paren_string, return paren_string.\n        ArrayList<String> groups_of_parens = new ArrayList<String>();\n        ArrayList<String> groups_of_parens_temp = new ArrayList<String>();\n        ArrayList<String> temp_group = new ArrayList<String>();\n        boolean in_group = false;\n        for (char c : paren_string.toCharArray()) {\n            // If we are not in the in_group variable (outside of a group), we should be adding the current\n            // character to the temp_group variable.\n            if (in_group == false) {\n                temp_group.add(c);\n                // If we have not yet encountered a closing parenthesis, then we are in some sort of group of\n                // parentheses.\n            } else if (c == '(') {\n                in_group = true;\n                groups_of_parens_temp.add(temp_group);\n                // If we have encountered a closing parenthesis, we will have to keep track of the\n                // groups of parentheses we have encountered. \n            } else if ((c == ')') && (in_group == true)) {\n                groups_of_parens_temp.add(temp_group);\n                in_group = false;\n                // Add the current character to the groups_of_parens array. If it is also a parenthesis, add it.\n                groups_of_parens.add(temp_group);\n                temp_group = new ArrayList<String>();\n            } else {\n                temp_group.add(c);\n            }\n        }\n        if (temp_group.isEmpty() == false) {\n            // If we encountered any characters that weren't parentheses, add them to the groups_of_parens array.\n            groups_of_parens.add(temp_group);\n        }\n        // If the input is missing an ending parenthesis, throw an error.\n        if (groups_of_parens.size() == 0) {\n            System.out.println(\"Invalid parenthesis string, ending parenthesis missing.\");\n            return null;\n        } else {\n            return groups_of_parens;\n        }",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<String> list_return = new ArrayList<String>();\n        String[] str_array = paren_string.split(\" \");\n        for(int i=0; i<str_array.length; i++) {\n            String[] str_array2 = str_array[i].split(\"\");\n            for(int j=0; j<str_array2.length; j++) {\n                if(str_array2[j].matches(\"^\\\\p{Punct}*$\")) {\n                    str_array2[j] = str_array2[j].substring(1,str_array2[j].length());\n                }\n                if(!str_array2[j].matches(\"^\\\\p{Punct}*$\")) {\n                    if(str_array2[j].matches(\"^\\\\p{Punct}*$\")) {\n                        continue;\n                    }\n                    if(str_array2[j].matches(\"^\\\\p{Punct}*$\")) {\n                        continue;\n                    }\n                    if(str_array2[j].equals(\")\")) {\n                        if(list_return.contains(str_array[j])) {\n                            continue;\n                        }\n                        list_return.add(str_array[j]);\n                        break;\n                    }\n                    if(str_array2[j].equals(\")\")) {\n                        if(list_return.contains(str_array[j])) {\n                            continue;\n                        }\n                        list_return.add(str_array[j]);\n                        break;\n                    }\n                }\n            }\n        }\n        return list_return;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<String> groups = new ArrayList<>();\n        ArrayList<String> group_item = new ArrayList<>();\n        int open_counter = 0, close_counter = 0, i = 0, j = 0;\n        boolean nested_within = false;\n        // Loop through the input string until there are no more characters\n        while (i < paren_string.length()) {\n            // Count the number of open/closed parentheses within this character\n            open_counter = paren_string.charAt(i) == '(' ? 1 : 0;\n            close_counter = paren_string.charAt(i) == ')' ? 1 : 0;\n            // If the parenthesis count is greater than 0, add this character to the current group\n            if (open_counter > close_counter) {\n                group_item.add(paren_string.charAt(i));\n            } else if (close_counter > open_counter) {\n                // If the parentheses count is less than 0, add a new group\n                if (nested_within) {\n                    groups.add(String.valueOf(group_item));\n                }\n                // Reset the list of group items for this character\n                group_item = new ArrayList<>();\n                nested_within = open_counter < close_counter;\n            }\n            // Advance the loop\n            i++;\n        }\n        // If the string contains any nested parenthesis, add the last group\n        if (nested_within) {\n            groups.add(String.valueOf(group_item));\n        }\n        return groups;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<String> paren_groups = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        String current = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push('(');\n                current += '(';\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop();\n                current += ')';\n            } else {\n                continue;\n            }\n            if (stack.isEmpty()) {\n                paren_groups.add(current);\n                current = \"\";\n            }\n        }\n        return paren_groups;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<String> paren_groups = new ArrayList<String>();\n        int leftmost_opening_paren = paren_string.indexOf('(');\n        int next_opening_paren = leftmost_opening_paren + 1;\n        int next_closing_paren = next_opening_paren;\n        int count = 1;\n        while (next_opening_paren != -1) {\n            while (count != 0) {\n                next_closing_paren = paren_string.indexOf(')', next_closing_paren + 1);\n                if (paren_string.charAt(next_closing_paren - 1) == '(') {\n                    count++;\n                } else {\n                    count--;\n                }\n            }\n            paren_groups.add(paren_string.substring(leftmost_opening_paren, next_closing_paren + 1));\n            next_opening_paren = paren_string.indexOf('(', next_closing_paren + 1);\n            leftmost_opening_paren = next_opening_paren;\n            count = 1;\n        }\n        return paren_groups;",
    "grade-4": {
      "execution": 0
    },
    "5": "// # BEGIN SOLUTION\n        ArrayList<String> result = new ArrayList<String>();\n        int start = 0;\n        while (start < paren_string.length()) {\n            int stack = 0;\n            int i = start;\n            while (i < paren_string.length()) {\n                if (paren_string.charAt(i) == '(') {\n                    stack++;\n                } else if (paren_string.charAt(i) == ')') {\n                    stack--;\n                }\n                if (stack == 0) {\n                    break;\n                }\n                i++;\n            }\n            result.add(paren_string.substring(start, i + 1));\n            start = i + 1;\n        }\n        return result;\n        // # END SOLUTION",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // Input: 3\n    // Output: (1, 2)\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // Input: 12\n    // Output: (4, 6)\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Pair<Integer, Integer> evenOddPalindrome(int n) {\n",
    "task_id": "107",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n",
    "simplified_intent": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
    "snippet": [
      "        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(n <= 0) {\n            return null;\n        }\n        if(n <= 2) {\n            return Pair.of(2,2);\n        }\n        Set<Integer> set = new TreeSet<Integer>();\n        for(int i = 1; ; i++) {\n            if(i%2 == 0) {\n                if((n-1) % i > 0) {\n                    set.add(i);\n                }\n            } else {\n                if((n-1) % i > 0) {\n                    set.add(i);\n                }\n            }\n        }\n        int evenPalindromes = 0;\n        int oddPalindromes = 0;\n        for(Integer i : set) {\n            int n = i*i;\n            int even = (n/2)/i;\n            int odd = (n/2)/(i-1);\n            evenPalindromes += even;\n            oddPalindromes += odd;\n        }\n        return Pair.of(evenPalindromes, oddPalindromes);",
    "grade-0": {
      "execution": 0
    },
    "1": "int evenCounter = 0;\n        int oddCounter = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            String evenPalindrome = evenPalindrome(i);\n            String oddPalindrome = oddPalindrome(i);\n            if (evenPalindrome.length() > oddPalindrome.length()) {\n                evenCounter++;\n            } else {\n                oddCounter++;\n            }\n        }\n        return Pair.of((int)evenCounter, (int)oddCounter);",
    "grade-1": {
      "execution": 0
    },
    "2": "int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            // If the number is even\n            if (i % 2 == 0) {\n                even++;\n            }\n            // If the number is odd\n            else if (i % 2 != 0) {\n                odd++;\n            }\n        }\n        return Pair.of(even, odd);",
    "grade-2": {
      "execution": 0
    },
    "3": "// Fill in your code here\n        return null;",
    "grade-3": {
      "execution": 0
    },
    "4": "// write your code here\n        return null;",
    "grade-4": {
      "execution": 0
    },
    "5": "int numEven = 0;\n        int numOdd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    numEven++;\n                } else {\n                    numOdd++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(numEven, numOdd);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2, 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10, 14) => []\n    public static ArrayList<Integer> generateIntegers(int a, int b) {\n",
    "task_id": "163",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n",
    "simplified_intent": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
    "snippet": [
      "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> evenDigits = new ArrayList<Integer>();\n\n        // If a>b, there are no even digits\n        if (a>b) {\n            return evenDigits;\n        }\n\n        // If b is less than a, there are no even digits\n        if (b<a) {\n            return evenDigits;\n        }\n\n        // Add all even digits to a list\n        for (int i = a; i <= b; i++) {\n            if (i%2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n\n        // Sort even digits from smallest to largest\n        Collections.sort(evenDigits);\n\n        return evenDigits;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> list = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        System.out.println(a);\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                System.out.println(i);\n                list.add(i);\n            }\n        }\n        return list;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> arr = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                arr.add(i);\n            }\n        }\n        return arr;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            }\n        }\n        return res;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        int lower, upper;\n        if (a > b) {\n            lower = b;\n            upper = a;\n        } else {\n            lower = a;\n            upper = b;\n        }\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                ret.add(i);\n            }\n        }\n        return ret;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                ret.add(i);\n            }\n        }\n        return ret;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    // >>> intersperse([], 4)\n    // []\n    // >>> intersperse([1, 2, 3], 4)\n    // [1, 4, 2, 4, 3]\n    public static ArrayList<Integer> intersperse(ArrayList<Integer> numbers, int delimeter) {\n",
    "task_id": "5",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n",
    "simplified_intent": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
    "snippet": [
      "        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> results = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return results;\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            results.add(numbers.get(i));\n            results.add(delimeter);\n        }\n        return results;",
    "grade-0": {
      "execution": 0
    },
    "1": "List<Integer> list = new ArrayList<Integer>();\n        numbers = numbers.stream().limit(numbers.size()/2).collect(Collectors.toList());\n        for (Integer i : numbers) {\n            list.add(i);\n            list.add(delimeter);\n            list.add(i);\n        }\n        return list;",
    "grade-1": {
      "execution": 0
    },
    "2": "return IntStream.range(0, numbers.size())\n                .mapToObj(i -> numbers.get(i))\n                .collect(Collectors.toCollection(ArrayList::new))\n                .stream()\n                .map(i -> i == numbers.get(i) ? delimeter : i)\n                .collect(Collectors.toCollection(ArrayList::new));",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            out.add(numbers.get(i));\n            if (i + 1 < numbers.size()) {\n                out.add(delimeter);\n            }\n        }\n        return out;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return result;\n        } else {\n            result.add(numbers.get(0));\n            for (int i = 1; i < numbers.size(); i++) {\n                result.add(delimeter);\n                result.add(numbers.get(i));\n            }\n            return result;\n        }",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a given list of integers, generate a list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static ArrayList<Integer> rollingMax(ArrayList<Integer> numbers) {\n",
    "task_id": "9",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n",
    "simplified_intent": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
    "snippet": [
      "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int N = numbers.size();\n        ArrayList<Integer> result = new ArrayList<Integer>(N);\n        int index = 0;\n        int maxN = 0;\n        for (int i = 0; i < N; ++i) {\n            if (numbers.get(i) >= maxN) {\n                result.add(numbers.get(index));\n                maxN = maxN - numbers.get(index);\n                index++;\n            } else {\n                result.add(numbers.get(i));\n                maxN = numbers.get(i);\n            }\n        }\n        result.add(maxN);\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "// return null if there is no such sequence\n        if (numbers == null || numbers.isEmpty()) return null;\n\n        // initialize rolling max sequence\n        ArrayList<Integer> rollingMax = new ArrayList<>();\n        int lastMax = numbers.get(0);\n\n        // add first element\n        rollingMax.add(lastMax);\n        // for each subsequent element\n        for (int i = 1; i < numbers.size(); i++) {\n            // if it is greater than the last max\n            if (numbers.get(i) > lastMax) {\n                // remember new max\n                rollingMax.add(numbers.get(i));\n                // and update last max\n                lastMax = numbers.get(i);\n            }\n        }\n\n        // return the rolling max\n        return rollingMax;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> maxList = new ArrayList<>();\n        int maxNumber = 0;\n        int size = numbers.size();\n        for (int i = 0; i < size; i++) {\n            if (numbers.get(i) > maxNumber) {\n                maxNumber = numbers.get(i);\n            }\n            for (int j = 0; j < size; j++) {\n                if (maxNumber > numbers.get(j)) {\n                    maxNumber = numbers.get(j);\n                }\n            }\n            numbers.set(i + 1, maxNumber);\n            maxList.add(maxNumber);\n        }\n        return maxList;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (numbers.size() < 1) {\n            return numbers;\n        }\n        ArrayList<Integer> rolling = new ArrayList<>();\n        rolling.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            rolling.add(Math.max(rolling.get(i - 1), numbers.get(i)));\n        }\n        return rolling;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> solution = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            solution.add(max);\n        }\n        return solution;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> response = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n        for (int number : numbers) {\n            max = Math.max(max, number);\n            response.add(max);\n        }\n        return response;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int n) {\n",
    "task_id": "59",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n",
    "simplified_intent": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
    "snippet": [
      "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int factor = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n                n /= factor;\n                factor++;\n            }\n        }\n        return factor;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (n == 1) return n;\n        int max_factor = 1;\n        Primes primes = new Primes(n);\n        primes.stream().filter(p -> p > 1).forEach(p -> {\n            if (p > max_factor) max_factor = p;\n        });\n        return max_factor;",
    "grade-1": {
      "execution": 0
    },
    "2": "int largestPrimeFactor = n;\n        while (largestPrimeFactor % 2 == 0) {\n            largestPrimeFactor /= 2;\n        }\n        while (largestPrimeFactor != 2) {\n            for (int i = 3; i <= largestPrimeFactor; i += 2) {\n                while (largestPrimeFactor % i == 0) {\n                    largestPrimeFactor = i;\n                    break;\n                }\n            }\n        }\n        return largestPrimeFactor;",
    "grade-2": {
      "execution": 0
    },
    "3": "int largest = 0;\n        while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            largest = n;\n        }\n        return largest;",
    "grade-3": {
      "execution": 1
    },
    "4": "int factor = 2;\n        while (factor < n) {\n            if (n % factor == 0) {\n                n /= factor;\n            } else {\n                factor++;\n            }\n        }\n        return factor;",
    "grade-4": {
      "execution": 1
    },
    "5": "int divisor = 2;\n        int remaining = n;\n        int largestFactor = 0;\n        while (remaining > 1) {\n            // System.out.printf(\"Divisor: %d, Remaining: %d\\n\", divisor, remaining);\n            if (remaining % divisor == 0) {\n                largestFactor = divisor;\n                remaining /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return largestFactor;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    // For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    // For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    // For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    // For lst = [0,81,12,3,1,21] the output should be 3\n    // For lst = [0,8,1,2,1,7] the output should be 7\n    public static int skjkasdkd(ArrayList<Integer> lst) {\n",
    "task_id": "94",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n",
    "simplified_intent": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
    "snippet": [
      "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> largest = new ArrayList<>();\n        boolean largestPrime = true;\n\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.size() == 1) {\n                largestPrime = true;\n                largest.add(lst.get(0));\n            } else {\n                boolean isPrime = true;\n                for (int j = 2; j < lst.size(); j++) {\n                    if (lst.get(i) % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largestPrime = true;\n                    largest.add(lst.get(i));\n                } else {\n                    largestPrime = false;\n                    largest.add(lst.get(i));\n                }\n            }\n        }\n        System.out.println(largest);\n        if (largestPrime) {\n            return largest.get(0).intValue();\n        } else {\n            return largest.get(0).intValue() + largest.get(1).intValue();\n        }",
    "grade-0": {
      "execution": 0
    },
    "1": "// find max number in list \n        int max = Collections.max(lst);\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n        for(Integer i:lst){\n            if(i<max){\n                temp.add(i);\n            }\n        }\n        // remove max number from list\n        lst.remove(max);\n        //find prime numbers in list\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        int largestPrime = 0;\n        for(Integer i:lst){\n            if(i%2==0){\n                continue;\n            }\n            int k=2;\n            while(i%k!=0){\n                k=k+2;\n            }\n            if(i==k){\n                continue;\n            }\n            if(i==k+2){\n                if(i==2){\n                    largestPrime = 2;\n                }else{\n                    largestPrime = i;\n                }\n            }\n            primes.add(i);\n        }\n        //find sum of digits in primes array\n        int sum = 0;\n        for(Integer i:primes){\n            sum += i;\n        }\n        //find sum of digits in lst array\n        for(Integer i:lst){\n            sum += i;\n        }\n        //check if lst has max prime number\n        if(max==sum){\n            return sum;\n        }\n        return sum;",
    "grade-1": {
      "execution": 0
    },
    "2": "int maxprime = Integer.MIN_VALUE;\n        int sum = 0;\n        for(Integer i : lst) {\n            int j = 0;\n            for(j=1; j<lst.length; j++) {\n                Integer temp = lst[j];\n                while(temp != i) {\n                    temp = lst[j];\n                }\n                j++;\n            }\n            if(j > maxprime) {\n                maxprime = j;\n                sum = 0;\n            }\n            sum += i;\n        }\n        return sum;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Your code here\n        return 0;",
    "grade-3": {
      "execution": 0
    },
    "4": "Collections.sort(lst);\n        Collections.reverse(lst);\n        int count = 0;\n        while (lst.size()>0) {\n            int n = lst.get(0);\n            if (isPrime(n)) return digitSum(n);\n            lst.remove(0);\n        }\n        return -1;",
    "grade-4": {
      "execution": 0
    },
    "5": "int sum = 0;\n        int largestPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                if (lst.get(i) > largestPrime) {\n                    largestPrime = lst.get(i);\n                }\n            }\n        }\n        if (largestPrime == 0) {\n            return sum;\n        }\n        String num = Integer.toString(largestPrime);\n        for (int i = 0; i < num.length(); i++) {\n            sum += Character.getNumericValue(num.charAt(i));\n        }\n        return sum;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the list.\n    // Return None if there is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5, 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1, 1]) == None\n    public static Optional<Integer> nextSmallest(ArrayList<Integer> lst) {\n",
    "task_id": "90",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n",
    "simplified_intent": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
    "snippet": [
      "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> copy = new ArrayList<>(lst);\n        Collections.sort(copy);\n        if (copy.size() <= 1) return Optional.of(null);\n        copy.remove(1);\n        return Optional.of(copy.get(1));",
    "grade-0": {
      "execution": 0
    },
    "1": "Iterator<Integer> itr = lst.iterator();\n        if(itr.hasNext()){\n            if(itr.next() < itr.next())\n                return Optional.of(itr.next());\n            itr.next();\n        }\n        return Optional.empty();",
    "grade-1": {
      "execution": 0
    },
    "2": "if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Iterator<Integer> it = lst.iterator();\n        while(it.hasNext()){\n            int n = it.next();\n            if (n < it.next()) {\n                return Optional.of(n);\n            }\n        }\n        return Optional.empty();",
    "grade-2": {
      "execution": 0
    },
    "3": "Optional<Integer> mn1 = lst.stream().min(Integer::compare);\n        ArrayList<Integer> rem = new ArrayList<Integer>();\n        for (Integer x : lst) {\n            if (!mn1.isPresent() || x != mn1.get()) {\n                rem.add(x);\n            }\n        }\n        Optional<Integer> mn2 = rem.stream().min(Integer::compare);\n        return mn2;",
    "grade-3": {
      "execution": 0
    },
    "4": "// Implement here!\n        if (lst.size() < 2) return Optional.empty();\n        HashSet<Integer> uniqueElems = new HashSet<Integer>(lst);\n        ArrayList<Integer> sortedUniqueElems = new ArrayList<Integer>(uniqueElems);\n        Collections.sort(sortedUniqueElems);\n        if (sortedUniqueElems.size() < 2) return Optional.empty();\n        return Optional.of(sortedUniqueElems.get(1));",
    "grade-4": {
      "execution": 0
    },
    "5": "throw new UnsupportedOperationException(\"Not implemented\");",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static String changeBase(int x, int base) {\n",
    "task_id": "44",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n",
    "simplified_intent": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
    "snippet": [
      "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// check base value.\n        if (base < 2 || base > 10) {\n            throw new IllegalArgumentException(\"base value should be from 2 to 10\");\n        }\n        // check x value.\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x value should be non-negative\");\n        }\n\n        int sign = 1;\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        }\n\n        int y = x;\n        // dividing x by base until quotient becomes 0.\n        while (y != 0) {\n            int tmp = y % base;\n            y = base * y;\n            base = tmp;\n        }\n        // checking for negatives and 0 cases.\n        if (y == 0) {\n            return \"\";\n        }\n        // converting negative number into positive one.\n        if (sign < 0) {\n            y = -y;\n        }\n\n        // convert base to string and return the result.\n        char[] arr = String.valueOf(sign).chars()\n                .map(c -> (char) (c - '0'))\n                .toArray();\n        return String.valueOf(arr);",
    "grade-0": {
      "execution": 0
    },
    "1": "StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            if (x % base == 0) {\n                sb.append((char) ('0' + base - x % base));\n            }\n            x /= base;\n        }\n        return sb.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "String result;\n        BigInteger result = new BigInteger(x, base);\n        String str = result.toString();\n        result = new BigInteger(str);\n        return str;",
    "grade-2": {
      "execution": 0
    },
    "3": "String ret = \"\";\n        while (x != 0) {\n            ret = Integer.toString(x % base) + ret;\n            x /= base;\n        }\n        return ret;",
    "grade-3": {
      "execution": 1
    },
    "4": "String binary = \"\";\n        while (x != 0) {\n            int r = x % base;\n            x = x / base;\n            binary = binary + r;\n        }\n        return binary;",
    "grade-4": {
      "execution": 0
    },
    "5": "String ans = \"\";\n        while (x != 0) {\n            ans = x % base + ans;\n            x /= base;\n        }\n        return ans;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    // 1\n    public static int isBored(String S) {\n",
    "task_id": "91",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n",
    "simplified_intent": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
    "snippet": [
      "        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int count = 0;\n        S = S.toLowerCase();\n        for (String st : S.split(\"[.?!]\"))\n            if (st.startsWith(\"i\")) {\n                count++;\n            }\n        return count;",
    "grade-0": {
      "execution": 0
    },
    "1": "int boredomCount = 0;\n        String word = null;\n        boolean bored = false;\n        for(String str : S.split(\"\\\\.\")) {\n            word = str;\n            bored = true;\n            boredomCount += isBored(word);\n            bored = false;\n        }\n        return boredomCount;",
    "grade-1": {
      "execution": 0
    },
    "2": "int count = 0;\n        String[] words = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for(String w : words) {\n            if(w.equals(\"I\")) {\n                count += 1;\n            }\n        }\n        return count;",
    "grade-2": {
      "execution": 0
    },
    "3": "//YOUR CODE HERE\n        int count = 0;\n        String[] words = S.split(\"\\\\s\");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
    "grade-3": {
      "execution": 0
    },
    "4": "return (int) Arrays.stream(S.split(\"\\\\.\")).map(String::trim).filter(s -> s.toLowerCase().startsWith(\"i\")).count();",
    "grade-4": {
      "execution": 0
    },
    "5": "int boredoms = 0;\n        String[] sentences = S.split(\"[\\\\?\\\\.\\\\!]\");\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement a function that takes an non-negative integer and returns an array of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // count_up_to(5) => [2,3]\n    // count_up_to(11) => [2,3,5,7]\n    // count_up_to(0) => []\n    // count_up_to(20) => [2,3,5,7,11,13,17,19]\n    // count_up_to(1) => []\n    // count_up_to(18) => [2,3,5,7,11,13,17]\n    public static ArrayList<Integer> countUpTo(int n) {\n",
    "task_id": "96",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n",
    "simplified_intent": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
    "snippet": [
      "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n < 1) {\n            return null;\n        }\n        if (n == 1) {\n            return new ArrayList<>();\n        }\n        ArrayList<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                primes.add(i);\n                while (n % i == 0) {\n                    primes.add(i++);\n                }\n            }\n        }\n        return primes.stream().skip(1).limit(n - 1).collect(Collectors.toCollection(ArrayList::new));",
    "grade-0": {
      "execution": 0
    },
    "1": "// your code here",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> array = new ArrayList<Integer>();\n        if (n < 0) \n            return array;\n        // Write your code here\n        \n        return array;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n == 0) {\n            return list;\n        }\n        list.add(2);\n        if (n == 1) {\n            return list;\n        }\n        for (int i = 3; i < n; i += 2) {\n            boolean isPrime = true;\n            for (int j = 0; j < list.size(); j++) {\n                if (i % list.get(j) == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                list.add(i);\n            }\n        }\n        return list;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (n < 2) {\n            return result;\n        }\n        boolean[] arr = new boolean[n];\n        for (int i = 2; i < n; i++) {\n            arr[i] = true;\n        }\n        for (int i = 2; i < n; i++) {\n            if (arr[i]) {\n                for (int j = i * 2; j < n; j += i) {\n                    arr[j] = false;\n                }\n            }\n        }\n        for (int i = 2; i < n; i++) {\n            if (arr[i]) {\n                result.add(i);\n            }\n        }\n        return result;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        int prime = 2;\n        int result = 0;\n        if (n < 2) {\n            return primes;\n        }\n        for (int i = 2; i < n; i++) {\n            numbers.add(i);\n        }\n        while (prime < Math.sqrt(n)) {\n            primes.add(prime);\n            for (int j = 0; j < numbers.size(); j++) {\n                result = numbers.get(j) % prime;\n                if (result == 0) {\n                    numbers.remove(j);\n                    j--;\n                }\n            }\n            for (int k = 0; k < numbers.size(); k++) {\n                if (numbers.get(k) >= prime) {\n                    prime = numbers.get(k);\n                    numbers.remove(k);\n                    break;\n                }\n            }\n        }\n        primes.addAll(numbers);\n        return primes;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1, 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    public static ArrayList<Integer> incrList(ArrayList<Integer> l) {\n",
    "task_id": "42",
    "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n",
    "simplified_intent": "Return list with elements incremented by 1.",
    "snippet": [
      "        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "l.add(l.size());\n        int size = l.size() - 1;\n        return l.subList(0, size).stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());",
    "grade-0": {
      "execution": 0
    },
    "1": "Collections.sort(l);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = 0;\n        for (Integer x : l)\n            result.add(x);\n            for (i = 0; i < l.size(); i++)\n            if (i > 0 && l.size() % 2 != 0)\n                result.add(1);\n                else result.add(i);\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (l.isEmpty()) return l;\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add((Integer) l.remove(0));\n        l.forEach(x -> list.add((Integer) x + 1));\n        return list;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> inc_l = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            inc_l.add(l.get(i) + 1);\n        }\n        return inc_l;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i=0; i<l.size(); i++) {\n            r.add(l.get(i)+1);\n        }\n        return r;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i : l) {\n            res.add(i + 1);\n        }\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function count_nums which takes an array of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public static int countNums(ArrayList<Integer> arr) {\n",
    "task_id": "108",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n",
    "simplified_intent": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
    "snippet": [
      "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "long result = 0;\n        \n        for (Integer num : arr) {\n            if (num < 0) \n                num *= -1;\n            long n = 0;\n            \n            if (num < 0) {\n                for (int i = 0; i < num.length(); i++)\n                    n += num.charAt(i) - '0';\n            } else {\n                for (int i = 0; i < num.length(); i++)\n                    n += num.charAt(i);\n            }\n            \n            if (n > 0 && n <= 9) {\n                result += (n - 1);\n            }\n        }\n        \n        return (int) result;",
    "grade-0": {
      "execution": 0
    },
    "1": "// return all elements that sum up to more than one\n        return (int) arr.stream().filter(number -> {\n            int sum = 0;\n            for (int i = 0; i < number; i++) {\n                sum += Math.abs((int) Math.pow(10, i)) * (int) Math.pow(10, i);\n            }\n            return sum > 1;\n        }).count();",
    "grade-1": {
      "execution": 0
    },
    "2": "int sum = 0;\n        for( int i: arr) {\n            if (i == -1)\n                sum += Math.abs(i);\n            else\n                sum += i;\n        }\n        return sum;",
    "grade-2": {
      "execution": 0
    },
    "3": "return (int)arr.stream().filter(x -> {\n                if (x == 0) {\n                    return false;\n                }\n                x = Math.abs(x);\n                int sum = 0;\n                while (x > 0) {\n                    sum += x % 10;\n                    x /= 10;\n                }\n                return sum > 0;\n            }).count();",
    "grade-3": {
      "execution": 0
    },
    "4": "int ans = 0;\n        for (int i : arr) {\n            if (i != 0) {\n                int sum = 0;\n                if (i < 0) {\n                    sum += -1;\n                    i = -i;\n                }\n                while (i > 0) {\n                    sum += i % 10;\n                    i /= 10;\n                }\n                if (sum > 0) ans++;\n            }\n        }\n        return ans;",
    "grade-4": {
      "execution": 0
    },
    "5": "int count = 0;\n      for (int i = 0; i < arr.size(); i++) {\n        int digitsSum = 0;\n        int num = arr.get(i);\n        if (num < 0) {\n          num = num * -1;\n        }\n        while (num > 0) {\n          digitsSum += num % 10;\n          num = num / 10;\n        }\n        if (digitsSum > 0) {\n          count++;\n        }\n      }\n      return count;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which sorts the given list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original list.\n    // For example:\n    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) == []\n    public static ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n",
    "task_id": "145",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n",
    "simplified_intent": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
    "snippet": [
      "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<Integer> tmp = new ArrayList<Integer>();\n        int total = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int a = nums.get(i);\n            total += a;\n            tmp.add(a);\n        }\n        Collections.sort(tmp, new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                Integer d1 = sumDigits(o1);\n                Integer d2 = sumDigits(o2);\n                return Integer.compare(d1, d2);\n            }\n        });\n        return tmp;",
    "grade-0": {
      "execution": 0
    },
    "1": "Collections.sort(nums, (Integer o1, Integer o2) -> {\n            int d1 = getSum(nums, o1);\n            int d2 = getSum(nums, o2);\n            if (d1 == d2) {\n                return nums.indexOf(o1) - nums.indexOf(o2);\n            } else {\n                return d1 > d2 ? -1 : 1;\n            }\n        });\n        return nums;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList <Integer> newNums = new ArrayList <Integer> ();\n        \n        for(Integer num : nums){\n            \n            newNums.add((int)Math.round( num * Math.pow(10, num.length()) ));\n        }\n        \n        Collections.sort(newNums);\n        \n        return newNums;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Your code here.",
    "grade-3": {
      "execution": 0
    },
    "4": "// Your code here",
    "grade-4": {
      "execution": 0
    },
    "5": "// Your code goes here\n        for (int i = 0; i < nums.size(); i++) {\n            int index = i;\n            for (int j = i + 1; j < nums.size(); j++) {\n                if (digitSum(nums.get(j)) < digitSum(nums.get(index))) {\n                    index = j;\n                }\n            }\n            int smallerNumber = nums.get(index);\n            nums.set(index, nums.get(i));\n            nums.set(i, smallerNumber);\n        }\n        return nums;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"\n    // This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3] the output should be 6\n    // For lst = []  the output should be 0\n    // For lst = [-1,-5,2,-1,-5]  the output should be -126\n    public static int sumSquares(ArrayList<Integer> lst) {\n",
    "task_id": "142",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n",
    "simplified_intent": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
    "snippet": [
      "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.size() == 0) {\n                return 0;\n            }\n            if (lst.get(i) % 3 == 0 && lst.get(i) != -1) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (lst.get(i) % 4 == 0 && lst.get(i) != -1) {\n                sum += lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList temp = new ArrayList();\n        for(Integer i : lst) {\n            // If i is multiple of 3 add square of i to temp\n            if (i.intValue() % 3 == 0)\n                temp.add(i.intValue() * i.intValue());\n            // If i is multiple of 4 add cube of i to temp\n            else if (i.intValue() % 4 == 0)\n                temp.add(i.intValue() * i.intValue() * i.intValue());\n            // If i isnt multiple of 3 or 4 add i to temp\n            else\n                temp.add(i);\n        }\n        int sum = 0;\n        for(int i : temp) {\n            sum += i;\n        }\n        return sum;",
    "grade-1": {
      "execution": 0
    },
    "2": "// Write your code here\n        if (lst.isEmpty()) return 0;\n\n        int sum = 0;\n        int count = 0;\n        for(int i = 0; i<lst.size(); i++){\n            if((lst.get(i) & 1) == 1){\n                sum += lst.get(i);\n                count++;\n            }\n        }\n        sum = sum*sum;\n\n        if(count % 4 != 0)\n            sum = sum + lst.get(lst.size()-1);\n        else if(count % 3 != 0)\n            sum = sum + lst.get(lst.size()-2);\n\n        return sum;",
    "grade-2": {
      "execution": 0
    },
    "3": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int number = lst.get(i);\n            if (i % 3 == 0) {\n                number = number * number;\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                number = number * number * number;\n            }\n            sum += number;\n        }\n        return sum;",
    "grade-3": {
      "execution": 1
    },
    "4": "if (lst.size() == 0) {\n            return 0;\n        }\n        ArrayList<Integer> squares = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            int entry = lst.get(i);\n            if (i % 3 == 0) {\n                entry = entry * entry;\n            }\n            if (i % 4 == 0 && i % 3 != 0) {\n                entry = entry * entry * entry;\n            }\n            squares.add(entry);\n        }\n        return squares.stream().mapToInt(Integer::intValue).sum();",
    "grade-4": {
      "execution": 1
    },
    "5": "int sum = 0;\n        int count = 0;\n        for (int x : lst) {\n            count++;\n            if (count % 3 == 0) {\n                sum += x * x;\n            } else if (count % 4 == 0) {\n                sum += x * x * x;\n            } else {\n                sum += x;\n            }\n        }\n        return sum;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String message) {\n",
    "task_id": "93",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n",
    "simplified_intent": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
    "snippet": [
      "        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "//  Write your code here\n        String encodedMessage = \"\";\n        String vowels = \"AEIOUaeiou\";\n        char[] vowelArr = vowels.toCharArray();\n        Map<Character, String> map = new HashMap<>();\n        for (char c : message.toCharArray()) {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 2);\n            } else {\n                map.put(c, \"\");\n            }\n        }\n        map.entrySet().stream().forEach(entry -> {\n            if (entry.getValue().length() > 0) {\n                String nextLetter = String.valueOf(entry.getKey());\n                if (vowelArr.length >= 2) {\n                    map.put(nextLetter, String.valueOf(vowelArr[map.getKey(nextLetter)] + 2));\n                } else {\n                    map.put(nextLetter, String.valueOf(vowelArr[map.getKey(nextLetter)]));\n                }\n            }\n        });\n        message = message.toUpperCase();\n        char[] messageArr = message.toCharArray();\n        messageArr = messageArr.parallelStream().map(entry -> {\n            String letter = map.containsKey(entry) ? map.get(entry) : \"\";\n            int l = letter.length();\n            return letter;\n        }).toArray();\n        encodedMessage = String.valueOf(messageArr);\n        return encodedMessage;",
    "grade-0": {
      "execution": 0
    },
    "1": "char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\n        StringBuilder sb = new StringBuilder();\n        for (char c : chars) {\n            char nextLetter = c + 2;\n            char nextVowel = nextLetter % 26;\n            char nextLetterUpper = Character.toUpperCase(nextLetter);\n            if (nextVowel == c) {\n                sb.append(nextLetterUpper);\n            } else {\n                sb.append(nextVowel);\n                sb.append(nextLetter);\n            }\n        }\n        return sb.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "char[] alphabet = 'abcdefghijklmnopqrstuvwxyz'.toCharArray();\n        Map<Character, Integer> vowels = new HashMap<>();\n        for (char c : alphabet) {\n            if (Character.isLetter(c)) {\n                vowels.put(c, vowels.getOrDefault(c, 0) + 1);\n            }\n        }\n        message = message.toUpperCase();\n        List<Integer> counts = message\n                .chars()\n                .map(ch -> (char) ch)\n                .filter(ch -> vowels.containsKey(ch))\n                .sorted()\n                .distinct()\n                .mapToInt(ch -> vowels.get(ch))\n                .boxed()\n                .collect(Collectors.toList());\n        List<Integer> pairs = counts\n                .stream()\n                .zipWithNext(0, counts::get)\n                .filter((pair, prev) -> pair == prev - 1)\n                .map(pair -> pair * 2)\n                .collect(Collectors.toList());\n        pairs.stream()\n                .flatMap((pair) -> Arrays.stream(pair))\n                .forEach(pair -> message = message.substring(0, pair) + \n                    (char) (pair % 26) + message.substring(pair + 1));\n        return message;",
    "grade-2": {
      "execution": 0
    },
    "3": "StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            int base = Character.isUpperCase(c) ? 'A' : 'a';\n            int index = c - base;\n            index = (index + 2) % 26;\n            result.append((char) (base + index));\n        }\n        return result.toString();",
    "grade-3": {
      "execution": 0
    },
    "4": "return new StringBuilder(message).reverse().toString();",
    "grade-4": {
      "execution": 0
    },
    "5": "throw new UnsupportedOperationException(\"Not supported yet.\");",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    public static int carRaceCollision(int n) {\n",
    "task_id": "41",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n",
    "simplified_intent": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
    "snippet": [
      "        return n * n;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Random random = new Random();\n        int a = random.nextInt(n) + 1;\n        int b = random.nextInt(n) + 1;\n        int c = random.nextInt(n) + 1;\n        int d = random.nextInt(n) + 1;\n        int x = random.nextInt(n);\n        int y = random.nextInt(n);\n        int z = random.nextInt(n);\n        int x1 = random.nextInt(n);\n        int y1 = random.nextInt(n);\n        int z1 = random.nextInt(n);\n        \n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n        System.out.println(d);\n        System.out.println(x);\n        System.out.println(y);\n        System.out.println(z);\n        System.out.println(x1);\n        System.out.println(y1);\n        System.out.println(z1);\n        \n        System.out.println(a+b+c+d+x+y+z+x1+y1+z1);\n        \n        return 1;",
    "grade-0": {
      "execution": 0
    },
    "1": "Set<Car> leftCars = Sets.newHashSet();\n        Set<Car> rightCars = Sets.newHashSet();\n        leftCars.addAll(Arrays.asList(new Car[]{new Car(\"A\"), new Car(\"B\"), new Car(\"C\"), new Car(\"D\"), new Car(\"E\"), new Car(\"F\"), new Car(\"G\"), new Car(\"H\"), new Car(\"I\"), new Car(\"J\")}));\n        rightCars.addAll(Arrays.asList(new Car[]{new Car(\"C\"), new Car(\"B\"), new Car(\"A\"), new Car(\"D\"), new Car(\"E\"), new Car(\"F\"), new Car(\"G\"), new Car(\"H\"), new Car(\"I\"), new Car(\"J\")}));\n        Set<Car> intersection = Sets.intersection(leftCars, rightCars);\n        System.out.println(\"intersection = \" + intersection);\n        int collisions = 0;\n        intersection.forEach(car -> {\n            int index = ((Sets.difference(rightCars, leftCars)).indexOf(car));\n            if (index != -1) {\n                collisions++;\n            }\n        });\n        System.out.println(\"collisions = \" + collisions);\n        return collisions;",
    "grade-1": {
      "execution": 0
    },
    "2": "int[] carLeft = { 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1 };\n        int[] carRight = { 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0 };\n        int[] carLeftPrev = { 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0 };\n        int[] carRightPrev = { 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1 };\n        int collides = 0;\n        for (int i = 0; i < n; i++) {\n            if (carLeft[i] != carLeftPrev[i]) {\n                if (carRightPrev[i] - carRight[i] != 0) {\n                    collides++;\n                }\n            }\n            if (carRight[i] != carRightPrev[i]) {\n                if (carLeftPrev[i] - carLeft[i] != 0) {\n                    collides++;\n                }\n            }\n        }\n        return collides;",
    "grade-2": {
      "execution": 0
    },
    "3": "throw new UnsupportedOperationException(\"This method is not yet implemented\");",
    "grade-3": {
      "execution": 0
    },
    "4": "return 0;",
    "grade-4": {
      "execution": 0
    },
    "5": "int result = 0;\n        // put your code here\n        // Hint: you need a polynomial-time algorithm.\n        // You can assume that n is very large.\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    public static boolean isPalindrome(String text) {\n",
    "task_id": "48",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n",
    "simplified_intent": "Checks if given string is a palindrome",
    "snippet": [
      "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "boolean is_palindrome = true;\n        String text_chars = text;\n        int[] letters = new int[text.length()];\n\n        for (int i = 0; i < text.length(); i++) {\n            letters[i] = (int) (text_chars.charAt(i) - 'a');\n        }\n\n        int start = 0;\n        int end = text.length() - 1;\n        while ((start <= end)) {\n            if (letters[start] != letters[end]) {\n                is_palindrome = false;\n            }\n\n            if (start == end) {\n                break;\n            }\n\n            start++;\n            end--;\n        }\n        return is_palindrome;",
    "grade-0": {
      "execution": 1
    },
    "1": "Set<Character> characters = new HashSet<Character>();\n        char[] chars = text.toCharArray();\n        for (char c : chars) {\n            characters.add(c);\n        }\n        String reversed = new StringBuilder(text).reverse().toString();\n        return text.equals(reversed);",
    "grade-1": {
      "execution": 1
    },
    "2": "if (text.isEmpty()) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr).equals(new StringBuilder(arr).reverse().toString());",
    "grade-2": {
      "execution": 0
    },
    "3": "String lowerCase = text.toLowerCase();\n      StringBuilder sb = new StringBuilder(lowerCase);\n      String reverseString = sb.reverse().toString();\n      if (lowerCase.equals(reverseString)) {\n        return true;\n      }\n      return false;",
    "grade-3": {
      "execution": 1
    },
    "4": "boolean is_palindrome = true;\n      for (int i = 0; i < text.length() / 2; i++) {\n        if (text.charAt(i) != text.charAt(text.length() - i - 1)) {\n          is_palindrome = false;\n          break;\n        }\n      }\n      return is_palindrome;",
    "grade-4": {
      "execution": 1
    },
    "5": "if (text.length() < 2) {\n            return true;\n        }\n        return (text.charAt(0) == text.charAt(text.length() - 1)) && isPalindrome(text.substring(1, text.length() - 1));",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in a list.\n    // If there is no negative or positive integers, return them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n    // largest_smallest_integers([0]) == (None, None)\n    public static Pair<Optional<Integer>, Optional<Integer>> largestSmallestIntegers(ArrayList<Integer> lst) {\n",
    "task_id": "136",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n",
    "simplified_intent": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
    "snippet": [
      "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Code here\n        int largest = -1;\n        int smallest = Integer.MAX_VALUE;\n        for(int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n                smallest = lst.get(i);\n            }\n            if (lst.get(i) > largest) {\n                largest = lst.get(i);\n            }\n        }\n        return Pair.of( Optional.ofNullable(largest), Optional.ofNullable(smallest));",
    "grade-0": {
      "execution": 0
    },
    "1": "if(lst.isEmpty()) return Pair.of(Optional.empty(), Optional.empty());\n        int largest = Collections.max(lst);\n        int smallest = Collections.min(lst);\n        if(largest == smallest) return Pair.of(Optional.of(largest), Optional.of(smallest));\n        return Pair.of(largestSmallestIntegers(lst.stream().filter(n -> n < smallest).collect(toList())));",
    "grade-1": {
      "execution": 0
    },
    "2": "int[] a = lst.stream().filter(x -> x < 0).sorted().toArray();\n        int first = a[0];\n        int second = a[1];\n        if (a.length == 2) {\n            first = second = 0;\n        }\n        Optional<Integer> first = Optional.of(first);\n        Optional<Integer> second = Optional.of(second);\n        if (first == second && second == 0) {\n            return Pair.of(first, second);\n        }\n        return Pair.of(first, largestSmallestIntegers(Arrays.copyOfRange(a, 2, a.length)));",
    "grade-2": {
      "execution": 0
    },
    "3": "if (lst.size() == 0) {\n            return new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n        }\n        boolean found_positive = false;\n        boolean found_negative = false;\n        int min_positive = 0;\n        int max_negative = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                found_positive = true;\n                if (lst.get(i) < min_positive) {\n                    min_positive = lst.get(i);\n                }\n            } else if (lst.get(i) < 0) {\n                found_negative = true;\n                if (lst.get(i) > max_negative) {\n                    max_negative = lst.get(i);\n                }\n            }\n        }\n        Optional<Integer> opt_pos = Optional.empty();\n        Optional<Integer> opt_neg = Optional.empty();\n        if (found_positive) {\n            opt_pos = Optional.of(min_positive);\n        }\n        if (found_negative) {\n            opt_neg = Optional.of(max_negative);\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(opt_neg, opt_pos);",
    "grade-3": {
      "execution": 0
    },
    "4": "Optional<Integer> largest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        for (Integer x : lst) {\n            if (x > 0) {\n                if (smallest.isPresent()) {\n                    if (x < smallest.get()) {\n                        smallest = Optional.of(x);\n                    }\n                } else {\n                    smallest = Optional.of(x);\n                }\n            } else if (x < 0) {\n                if (largest.isPresent()) {\n                    if (x > largest.get()) {\n                        largest = Optional.of(x);\n                    }\n                } else {\n                    largest = Optional.of(x);\n                }\n            }\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(largest, smallest);",
    "grade-4": {
      "execution": 0
    },
    "5": "// write your code here",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    // 55\n    // >>> fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    public static int fib(int n) {\n",
    "task_id": "55",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n",
    "simplified_intent": "Return n-th Fibonacci number.",
    "snippet": [
      "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);",
    "grade-0": {
      "execution": 1
    },
    "1": "if(n<0) throw new IllegalArgumentException(\"fib arg is negative\");\n        if(n==0) return 0;\n        if(n==1) return 1;\n        return fib(n-2) + fib(n-1);",
    "grade-1": {
      "execution": 1
    },
    "2": "if (n < 0) throw new IllegalArgumentException(\"Argument 'n' must be a non-negative integer.\");\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        return fib(n - 2) + fib(n - 1);",
    "grade-2": {
      "execution": 1
    },
    "3": "int prev1 = 0;\n        int prev2 = 1;\n        for (int i = 0; i < n; i++) {\n            int savePrev1 = prev1;\n            prev1 = prev2;\n            prev2 = savePrev1 + prev2;\n        }\n        return prev1;",
    "grade-3": {
      "execution": 1
    },
    "4": "// Your code goes here.\n        return 0;",
    "grade-4": {
      "execution": 0
    },
    "5": "int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public static String circularShift(int x, int shift) {\n",
    "task_id": "65",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n",
    "simplified_intent": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
    "snippet": [
      "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (shift > x.length()) return Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        int i = 1;\n        while (i < shift) {\n            sb.append(x.charAt(i - 1));\n            i++;\n        }\n        // append x to sb from the end to the beginning\n        do {\n            sb.insert(0, x.charAt(x.length() - i - 1));\n            i++;\n        } while (i < x.length());\n        return sb.toString();",
    "grade-0": {
      "execution": 0
    },
    "1": "String nums = \"\";\n        int div = x % 10;\n        int carry = 0;\n        for (int i = shift; i < x.size() + shift; i++) {\n            int digit = x / 10;\n            int newDigit = digit - div + carry;\n            carry = newDigit / 10;\n            newDigit = newDigit % 10;\n            nums += newDigit + \"\";\n        }\n        if (carry > 0) {\n            nums += carry + \"\";\n        }\n        return nums;",
    "grade-1": {
      "execution": 0
    },
    "2": "List<Integer> list = new ArrayList<Integer>();\n        String temp = String.valueOf(x);\n        int i = 1;\n        int shiftCnt = 0;\n        do {\n            int tmpDigit = Integer.parseInt(temp.substring(i * -1, i));\n            list.add(tmpDigit);\n            i += shift;\n            shiftCnt++;\n        } while (i < temp.length());\n        if (shift > list.get(list.size() - 1))\n            shift = list.get(list.size() - 1);\n        if (shift == 0)\n            return temp;\n        for (int j = 0; j < list.size() - shift - 1; j++)\n            list.set((list.size() - shift - 1) - j, (Integer) list.get(list.size() - j - 1));\n        StringBuilder sb = new StringBuilder();\n        for (int j = 0; j < list.size() - shift - 1; j++)\n            sb.append((Integer) list.get(list.size() - j - 1));\n        return sb.toString();",
    "grade-2": {
      "execution": 0
    },
    "3": "String str = Integer.toString(x);\n        int len = str.length();\n        if (shift >= len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        int a = len - shift;\n        return str.substring(a) + str.substring(0, a);",
    "grade-3": {
      "execution": 0
    },
    "4": "// We will fill this list from left to right, then build the string from\n        // right to left.\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        int n = x;\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        int l = digits.size();\n        // Shift the elements of the list.\n        for (int i = 0; i < shift; i++) {\n            digits.add(0, digits.get(l - 1));\n            digits.remove(l);\n        }\n        // Build the number from the list.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < l; i++) {\n            sb.append(digits.get(i));\n        }\n        return sb.toString();",
    "grade-4": {
      "execution": 0
    },
    "5": "String str = Integer.toString(x);\n        // if shift > number of digits in x, rotate the digits the other way.\n        if (shift > str.length()) {\n            shift = shift % str.length();\n            str = new StringBuilder(str).reverse().toString();\n        }\n        StringBuilder sb = new StringBuilder(str);\n        String sub = sb.substring(0, shift);\n        String end = sb.substring(shift);\n        sb = new StringBuilder(end);\n        sb.append(sub);\n        return sb.toString();",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2, 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    // 123\n    public static int maxElement(ArrayList<Integer> l) {\n",
    "task_id": "35",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n",
    "simplified_intent": "Return maximum element in the list.",
    "snippet": [
      "        return Collections.max(l);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "Integer max_element = null;\n        for (int i = 0; i < l.size(); i++) {\n            if (max_element == null || l.get(i) > max_element) {\n                max_element = l.get(i);\n            }\n        }\n        return max_element;",
    "grade-0": {
      "execution": 1
    },
    "1": "int[] a = new int[l.size()];\n        for(int i = 0; i < l.size(); i++) {\n            a[i] = l.get(i);\n        }\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < l.size(); i++) {\n            int x = a[i];\n            if(x>max) {\n                max = x;\n            }\n        }\n        return max;",
    "grade-1": {
      "execution": 1
    },
    "2": "// Initialize max value to Integer.MIN_VALUE.\n        int max = Integer.MIN_VALUE;\n        for(int x : l)\n            max = Math.max(x, max);\n        return max;",
    "grade-2": {
      "execution": 1
    },
    "3": "return l.stream().reduce(Integer.MIN_VALUE, Math::max);",
    "grade-3": {
      "execution": 1
    },
    "4": "return Collections.max(l);",
    "grade-4": {
      "execution": 1
    },
    "5": "int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // solution([5, 8, 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30, 13, 24, 321]) ==>0\n    public static int solution(ArrayList<Integer> lst) {\n",
    "task_id": "121",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n",
    "simplified_intent": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
    "snippet": [
      "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int[] sum = new int[lst.get() + 1];\n        ArrayList<Integer> evens = new ArrayList<>();\n        for (int i = 0; i < lst.get() + 1; i++) {\n            if (i % 2 == 0) {\n                evens.add(i);\n            }\n        }\n        // evens.stream().filter(n -> n % 2 != 0).sum() <-- sums the even numbers\n        int sumOfEvens = evens.stream().filter(n -> n % 2 != 0).sum();\n        if (evens.size() > lst.get()) {\n            sumOfEvens = 0;\n        }\n        sumOfEvens += lst.get() + evens.size();\n        for (int i = 0; i < sum.length; i++) {\n            sum[i] = sumOfEvens;\n        }\n        return Arrays.stream(lst).map(i -> sum[i]).sum();",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> oddIndices = new ArrayList<>();\n        for (int i=0; i<lst.size(); i++) {\n            int index = 0;\n            while (index<lst.size() && lst.get(index)==lst.get(i)) {\n                index++;\n            }\n            if (index%2==1) {\n                oddIndices.add(index);\n            }\n        }\n        int res = 0;\n        for(int i=0; i<oddIndices.size(); i++) {\n            int sum = 0;\n            for(int j=i+1; j<oddIndices.size(); j++) {\n                sum+=lst.get(oddIndices.get(i))-lst.get(oddIndices.get(j));\n            }\n            res+=sum;\n        }\n        return res;",
    "grade-1": {
      "execution": 0
    },
    "2": "// write your code in Java SE 8\n        return 0;",
    "grade-2": {
      "execution": 0
    },
    "3": "int ans = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 1) {\n                ans += lst.get(i);\n            }\n        }\n        return ans;",
    "grade-3": {
      "execution": 1
    },
    "4": "int sum = 0;\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;",
    "grade-4": {
      "execution": 1
    },
    "5": "int odd = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                odd += lst.get(i);\n            }\n        }\n        return odd;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer> parseNestedParens(String paren_string) {\n",
    "task_id": "6",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n",
    "simplified_intent": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
    "snippet": [
      "        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (paren_string.trim().isEmpty()) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> results = new ArrayList<>();\n        ArrayList<String> group_strings = new ArrayList<>();\n        // Split the input string into nested parentheses\n        String[] splited_array = paren_string.split(\" \");\n        for (String nested_string: splited_array) {\n            // Get all characters inside nested parentheses\n            ArrayList<String> group_strings = nested_string.trim().split(\"\\\\)|\\\\(\");\n            // Add all characters to the group strings array\n            for (String group_string: group_strings) {\n                if (!group_string.trim().isEmpty()) {\n                    group_strings.add(group_string);\n                }\n            }\n            group_strings.trimToSize();\n            // Iterate through group strings and find the deepest level of nesting\n            for (String group_string: group_strings) {\n                ArrayList<Integer> levels_of_nesting = new ArrayList<>();\n                int level = 0;\n                // Iterate through characters in the group string\n                for (char c: group_string.toCharArray()) {\n                    // If this is a new nested level, then increment the level by 1\n                    if (c == '(') {\n                        level++;\n                    }\n                    // If this is a closing parentheses, then decrement the level by 1\n                    if (c == ')') {\n                        level--;\n                    }\n                    levels_of_nesting.add(level);\n                }\n                levels_of_nesting.trimToSize();\n                // Add the deepest level of nesting to the result array\n                for (int level: levels_of_nesting) {\n                    results.add(level);\n                }\n            }\n        }\n        return results;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<Integer> max_levels_of_nesting = new ArrayList<Integer>();\n        Stack<Integer> stack = new Stack<Integer>();\n        char[] char_array = paren_string.toCharArray();\n        int length = char_array.length;\n        int last_index = 0;\n        for (int i = 0; i < length; i++) {\n            if (char_array[i] == '(') {\n                if (stack.isEmpty()) {\n                    stack.push(char_array[i]);\n                } else if (stack.peek() != '(') {\n                    stack.push(char_array[i]);\n                }\n            } else if (char_array[i] == ')') {\n                if (stack.isEmpty()) {\n                    max_levels_of_nesting.add(i - last_index);\n                    stack.push(char_array[i]);\n                } else if (stack.peek() == '(') {\n                    max_levels_of_nesting.add(i - last_index);\n                    stack.push(char_array[i]);\n                }\n            } else if (char_array[i] == ' ') {\n                if (stack.isEmpty()) {\n                    stack.push(char_array[i]);\n                } else if (stack.peek() != '(') {\n                    stack.push(char_array[i]);\n                }\n            } else {\n                if (stack.isEmpty()) {\n                    stack.push(char_array[i]);\n                } else if (stack.peek() != '(') {\n                    stack.push(char_array[i]);\n                }\n            }\n            last_index = i;\n        }\n        return max_levels_of_nesting;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> nested_levels = new ArrayList<Integer>();\n        // The pattern to find parentheses.\n        String pattern = \"\\\\(\\\\w+\\\\)\";\n        // The regular expression pattern\n        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(paren_string);\n        while(m.find()) {\n            // Each match group is a list of parentheses.\n            ArrayList<String> match_groups = m.group().split(\"\\\\)\");\n            // Get the level of nesting of parentheses.\n            int level = 0;\n            for(int i = 0; i < match_groups.size(); i++) {\n                String curr = match_groups.get(i);\n                if(\"(\".equals(curr)) {\n                    level++;\n                } else if(\")\".equals(curr)) {\n                    level--;\n                }\n                nested_levels.add(level);\n            }\n        }\n        return nested_levels;",
    "grade-2": {
      "execution": 0
    },
    "3": "String[] groups = paren_string.split(\" \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (String g : groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (int i = 0; i < g.length(); i++) {\n                if (g.charAt(i) == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth, depth);\n                } else if (g.charAt(i) == ')') {\n                    depth--;\n                }\n            }\n            result.add(max_depth);\n        }\n        return result;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<Integer> depths = new ArrayList<Integer>();\n        ArrayList<Integer> pos_list = new ArrayList<Integer>();\n        ArrayList<Integer> temp_depth = new ArrayList<Integer>();\n        int total_depth = 0;\n        String temp_str = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                total_depth++;\n                temp_depth.add(total_depth);\n            } else if (c == ')') {\n                total_depth--;\n                temp_depth.add(total_depth);\n            } else if (c == ' ') {\n                if (pos_list.size() == 0) {\n                    pos_list.add(i);\n                } else {\n                    pos_list.add(i - pos_list.get(pos_list.size() - 1) - 1);\n                }\n                int max_depth = Collections.max(temp_depth);\n                depths.add(max_depth);\n                temp_depth.clear();\n            }\n        }\n        pos_list.add(paren_string.length() - pos_list.get(pos_list.size() - 1) - 1);\n        int max_depth = Collections.max(temp_depth);\n        depths.add(max_depth);\n        return depths;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> result = new ArrayList<Integer>();\n\t\tif (paren_string.length() == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tfor (String paren_group : paren_string.split(\" \")) {\n\t\t\tint len = paren_group.length();\n\t\t\tint depth = 0;\n\t\t\tint max_depth = 0;\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tif (paren_group.charAt(i) == '(') {\n\t\t\t\t\tdepth++;\n\t\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t\t} else if (paren_group.charAt(i) == ')') {\n\t\t\t\t\tdepth--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(max_depth);\n\t\t}\n\t\treturn result;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns True if there are three distinct elements in the list that\n    // sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5, 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n    public static boolean triplesSumToZero(ArrayList<Integer> l) {\n",
    "task_id": "40",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n",
    "simplified_intent": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
    "snippet": [
      "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int first=l.get(0);\n        int second=l.get(1);\n        int third=l.get(2);\n        int zero=0;\n        int sum=0;\n        int diff=0;\n        boolean sumToZero=false;\n        for(int i=0;i<l.size();i++){\n            sum=sum+l.get(i);\n        }\n        if(sum==0)\n            sumToZero=true;\n        else{\n            for(int i=0;i<l.size();i++){\n                diff=diff+(l.get(i)-first)*(l.get(i)-second)*(l.get(i)-third);\n            }\n            if(diff==0){\n                sumToZero=true;\n            }\n        }\n        return sumToZero;",
    "grade-0": {
      "execution": 0
    },
    "1": "if (l.size() < 3) {\n            return false;\n        }\n        int sum = 0;\n        int firstSum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n            firstSum += l.get(i);\n        }\n        boolean result = firstSum == 0 || sum == 0;\n        if (result == true) {\n            for (int i = 2; i < l.size(); i++) {\n                result &= firstSum == l.get(i) && sum == -l.get(i) - l.get(i);\n            }\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "Set<Integer> set = new HashSet<Integer>();\n        for (int i : l)\n            if (set.contains(i))\n                return false;\n            else\n                set.add(i);\n        return true;",
    "grade-2": {
      "execution": 0
    },
    "3": "int n = l.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
    "grade-3": {
      "execution": 1
    },
    "4": "HashSet<Integer> hs = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int n = l.get(i);\n            for (int j = i + 1; j < l.size(); j++) {\n                int m = l.get(j);\n                if (hs.contains(-(n + m))) {\n                    return true;\n                }\n            }\n            hs.add(n);\n        }\n        return false;",
    "grade-4": {
      "execution": 1
    },
    "5": "HashSet<Integer> h = new HashSet<Integer>();\n        for (int x : l) {\n            h.add(x);\n        }\n        ArrayList<Integer> a = new ArrayList<Integer>(h);\n        Collections.sort(a);\n        int i, j, k;\n        i = 0;\n        while (i < a.size()-2) {\n            j = i+1;\n            k = a.size()-1;\n            while (j < k) {\n                if (a.get(i) + a.get(j) + a.get(k) == 0) {\n                    return true;\n                } else if (a.get(i) + a.get(j) + a.get(k) < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n            i++;\n        }\n        return false;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two lists operator, and operand. The first list has basic algebra operations, and \n    // the second list is a list of integers. Use the two given lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator list is equal to the length of operand list minus one.\n    // Operand is a list of of non-negative integers.\n    // Operator list has at least one operator, and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String> op, ArrayList<Integer> operand) {\n",
    "task_id": "160",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n",
    "simplified_intent": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
    "snippet": [
      "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int result = 0;\n        HashMap<String, Integer> expressionMap = new HashMap<>();\n        // Create a map of operators to numbers.\n        // The map has the following format: {operator-number}.\n        expressionMap.put(\"+\", 3);\n        expressionMap.put(\"-\", 2);\n        expressionMap.put(\"*\", 3);\n        expressionMap.put(\"/\", 2);\n        expressionMap.put(\"%\", 2);\n        expressionMap.put(\"**\", 2);\n        // For each operand, add its associated operator.\n        for (Integer operand : operand) {\n            result += expressionMap.get(op.get(operand)).toString();\n        }\n        return result;",
    "grade-0": {
      "execution": 0
    },
    "1": "StringBuilder expression = new StringBuilder();\n        int result = 0;\n        int index = 0;\n        for(String s : op) {\n            expression.append(s);\n            for(Integer i : operand) {\n                expression.append(\" \");\n                expression.append(i);\n                result += i;\n            }\n            expression.append(\" = \");\n            expression.append(result);\n            expression.append(\" \");\n            result = 0;\n        }\n        expression.append(result);\n        return Integer.parseInt(expression.toString());",
    "grade-1": {
      "execution": 0
    },
    "2": "int result = 1;\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n                result = result + operand.get(i);\n            }\n            else if(op.get(i).equals(\"-\")) {\n                result = result - operand.get(i);\n            }\n            else if(op.get(i).equals(\"*\")) {\n                result = result * operand.get(i);\n            }\n            else if(op.get(i).equals(\"//\")) {\n                result = result / operand.get(i);\n            }\n            else if(op.get(i).equals(\"**\")) {\n                result = result ** operand.get(i);\n            }\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "String temp = String.valueOf(operand.get(0));\n        for (int i = 0; i < op.size(); i++) {\n            temp += op.get(i) + operand.get(i + 1);\n        }\n        return eval(temp);",
    "grade-3": {
      "execution": 0
    },
    "4": "int ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            int operand2 = operand.get(i + 1);\n            String operator = op.get(i);\n            if (operator.equals(\"+\")) {\n                ans += operand2;\n            } else if (operator.equals(\"-\")) {\n                ans -= operand2;\n            } else if (operator.equals(\"*\")) {\n                ans *= operand2;\n            } else if (operator.equals(\"//\")) {\n                ans /= operand2;\n            } else if (operator.equals(\"**\")) {\n                ans = (int) Math.pow(ans, operand2);\n            }\n        }\n        return ans;",
    "grade-4": {
      "execution": 0
    },
    "5": "int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n            }\n        }\n        return res;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n    // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static int fibfib(int n) {\n",
    "task_id": "63",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n",
    "simplified_intent": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
    "snippet": [
      "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if (n < 3)\n            return 0;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
    "grade-0": {
      "execution": 0
    },
    "1": "int count = 0;\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        if(n == 3) return 1;\n        if(n == 4) return 1;\n        for(int i = 1; i < n; i++){\n            int f = fibfib(i-1);\n            int g = fibfib(i-2);\n            int h = fibfib(i-3);\n            count += f;\n            count += g;\n            count += h;\n        }\n        return count;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n <= 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
    "grade-2": {
      "execution": 1
    },
    "3": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int sum = 0;\n        for (int i = 3; i <= n; i++) {\n            sum = a + b + c;\n            a = b;\n            b = c;\n            c = sum;\n        }\n        return sum;",
    "grade-3": {
      "execution": 1
    },
    "4": "if (n <= 2) {\n            return n - 1;\n        }\n        int prev = 0;\n        int prev2 = 0;\n        int prev3 = 1;\n        int res = 1;\n        for (int i = 2; i < n; i++) {\n            res = prev + prev2 + prev3;\n            prev3 = prev2;\n            prev2 = prev;\n            prev = res;\n        }\n        return res;",
    "grade-4": {
      "execution": 0
    },
    "5": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int i = 3;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int sum = 1;\n        while (i <= n) {\n            sum = a + b + c;\n            a = b;\n            b = c;\n            c = sum;\n            i++;\n        }\n        return sum;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    public static String concatenate(ArrayList<String> strings) {\n",
    "task_id": "28",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n",
    "simplified_intent": "Concatenate list of strings into a single string",
    "snippet": [
      "        return String.join(\"\", strings);\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "if(strings.size() == 0) {\n            return \"\";\n        }\n        StringBuilder result = new StringBuilder();\n        result.append(strings.get(0));\n        for(int i = 1; i < strings.size(); i++) {\n            result.append(strings.get(i));\n        }\n        return result.toString();",
    "grade-0": {
      "execution": 1
    },
    "1": "String joined = \"\";\n        for (String string : strings) {\n            joined = joined + string;\n        }\n        return joined;",
    "grade-1": {
      "execution": 1
    },
    "2": "if(strings == null || strings.size() == 0) {\n            return \"\";\n        }\n        StringBuilder builder = new StringBuilder();\n        for(String string : strings) {\n            if(string.length() > 0) {\n                builder.append(string);\n            }\n        }\n        return builder.toString();",
    "grade-2": {
      "execution": 1
    },
    "3": "String string = \"\";\n        for (String substr : strings) {\n            string += substr;\n        }\n        return string;",
    "grade-3": {
      "execution": 1
    },
    "4": "StringBuilder builder = new StringBuilder();\n        for (String s : strings) {\n            builder.append(s);\n        }\n        return builder.toString();",
    "grade-4": {
      "execution": 1
    },
    "5": "String s = \"\";\n        for (String string : strings) {\n            s += string;\n        }\n        return s;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatest_common_divisor(3, 5)\n    // 1\n    // >>> greatest_common_divisor(25, 15)\n    // 5\n    public static int greatestCommonDivisor(int a, int b) {\n",
    "task_id": "13",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n",
    "simplified_intent": "Return a greatest common divisor of two integers a and b",
    "snippet": [
      "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "int r = 1;\n        while (b != 0) {\n            if (a > b) {\n                r++;\n                a %= b;\n            }\n            b--;\n        }\n        return r;",
    "grade-0": {
      "execution": 0
    },
    "1": "int gcd = 0;\n        while (a != 0) {\n            if (b == 0) {\n                break;\n            }\n            int temp = a;\n            a = b;\n            b = temp % b;\n            gcd = (gcd > a) ? gcd : a;\n        }\n        return gcd;",
    "grade-1": {
      "execution": 0
    },
    "2": "return Math.max(a, b) / Math.min(a, b);",
    "grade-2": {
      "execution": 0
    },
    "3": "// TODO: write your code here\n\n        return -1;",
    "grade-3": {
      "execution": 0
    },
    "4": "if (a > b) {\n            int tmp = a;\n            a = b;\n            b = tmp;\n        }\n        while (a != 0) {\n            int tmp = a;\n            a = b % a;\n            b = tmp;\n        }\n        return b;",
    "grade-4": {
      "execution": 1
    },
    "5": "return gcd(a, b);",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    public static String flipCase(String string) {\n",
    "task_id": "27",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n",
    "simplified_intent": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
    "snippet": [
      "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return string\n                .chars()\n                .mapToObj(c -> c == Character.toLowerCase(c) ? Character.toUpperCase(c) : c)\n                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n                .toString();",
    "grade-0": {
      "execution": 0
    },
    "1": "return string.chars().mapToObj(i -> (char) i == (char)65 ? (char)0 : (char) i).map(String::toLowerCase).collect(Collectors.joining());",
    "grade-1": {
      "execution": 0
    },
    "2": "char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == ' ') {\n                continue;\n            }\n            if (Character.isLowerCase(arr[i])) {\n                arr[i] = Character.toUpperCase(arr[i]);\n            } else {\n                arr[i] = Character.toLowerCase(arr[i]);\n            }\n        }\n        return new String(arr);",
    "grade-2": {
      "execution": 1
    },
    "3": "int size = string.length();\n        char[] result = new char[size];\n        for (int i = 0; i < size; i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result[i] = Character.toUpperCase(c);\n            } else {\n                result[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(result);",
    "grade-3": {
      "execution": 1
    },
    "4": "StringBuilder string_builder = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                string_builder.append(Character.toUpperCase(c));\n            } else {\n                string_builder.append(Character.toLowerCase(c));\n            }\n        }\n        return string_builder.toString();",
    "grade-4": {
      "execution": 1
    },
    "5": "StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) => false\n    // is_simple_power(5, 3) => false\n    public static boolean isSimplePower(int x, int n) {\n",
    "task_id": "76",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n",
    "simplified_intent": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
    "snippet": [
      "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "//return x>0 && n>0;\n        //return x>0 && n==1;\n        //return x>0 && n==2;\n        //return x>0 && n==4;\n        //return x>0 && n==8;\n        //return x>0 && n==16;\n        //return x>0 && n==32;\n        //return x>0 && n==64;\n        //return x>0 && n==128;\n        //return x>0 && n==256;\n        //return x>0 && n==512;\n        //return x>0 && n==1024;\n        //return x>0 && n==2048;\n        //return x>0 && n==4096;\n        //return x>0 && n==8192;\n        //return x>0 && n==16384;\n        //return x>0 && n==32768;\n        //return x>0 && n==65536;\n        //return x>0 && n==131072;\n        //return x>0 && n==262144;\n        //return x>0 && n==524288;\n        //return x>0 && n==1048576;\n        //return x>0 && n==2097152;\n        //return x>0 && n==4194304;\n        //return x>0 && n==8388608;\n        //return x>0 && n==16777216;\n        //return x>0 && n==33554432;\n        //return x>0 && n==67108864;\n        //return x>0 && n==134217728;\n        //return x>0 && n==268435456;\n        //return x>0 && n==536870912;\n        //return x>0 && n==1073741824;\n        //return x>0 && n==2147483648;\n        //return x>0 && n==4294967296;\n        //return x>0 && n==8589934592;\n        //return x>0 && n==17179869184;\n        //return x>0 && n==34359738368;\n        //return x>0 && n==68719476736;\n        //return x>0 && n==137438953472;\n        //return x>0 && n==274877906944;\n        //return x>0 && n==549755813888;\n        //return x>0 && n==1099511627776;\n        //return x>0 && n==2199023255552;\n        //return x>0 && n==4398046511104;",
    "grade-0": {
      "execution": 0
    },
    "1": "try{\n            pow(x, n);\n        }\n        catch(ArithmeticException aE){\n            return false;\n        }\n        return true;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (n == 0) return true;\n        if (x == 0) return false;\n        if (n % 2 == 0) {\n            int y = isSimplePower(x % 2, n);\n            if (y == false) return false;\n            return true;\n        }\n        int y = isSimplePower(x % 2, n);\n        if (y == false) return false;\n        return true;",
    "grade-2": {
      "execution": 0
    },
    "3": "return Math.pow(n, (int) (Math.log(x) / Math.log(n))) == x;",
    "grade-3": {
      "execution": 1
    },
    "4": "return x == n * n;",
    "grade-4": {
      "execution": 0
    },
    "5": "// ...\n        return Math.pow(n, (int) (Math.log(x) / Math.log(n))) == x;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> remove_duplicates([1, 2, 3, 2, 4])\n    // [1, 3, 4]\n    public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> numbers) {\n",
    "task_id": "26",
    "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n",
    "simplified_intent": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
    "snippet": [
      "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// Your code goes here\n        \n        HashSet<Integer> set = new HashSet<Integer>();\n        \n        for( int n : numbers){\n            if(set.contains(n)){\n                numbers.remove(n);\n            }\n            set.add(n);\n        }\n        return numbers;",
    "grade-0": {
      "execution": 0
    },
    "1": "Map<Integer,Integer> map = new HashMap<Integer,Integer>();\n        for(Integer i : numbers) {\n            map.put(i,map.getOrDefault(i,0)+1);\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer i : map.keySet()) {\n            if(map.get(i)>1) {\n                result.add(i);\n                map.remove(i);\n            }\n        }\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> result = new ArrayList<Integer>();\n\n        int n = numbers.size();\n        int i = 0;\n        while (i < n) {\n            int cur = numbers.get (i);\n            if (result.get (i) == cur) {\n                i++;\n            } else {\n                result.add (cur);\n                i++;\n            }\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "return numbers;",
    "grade-3": {
      "execution": 0
    },
    "4": "return new ArrayList<Integer>(\n            new HashSet<Integer>(numbers)\n        );",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<Integer> res = new ArrayList<Integer>();\n        HashSet<Integer> seen = new HashSet<Integer>();\n        HashSet<Integer> seenTwice = new HashSet<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int x = numbers.get(i);\n            if (seen.contains(x)) {\n                seenTwice.add(x);\n            } else {\n                seen.add(x);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            int x = numbers.get(i);\n            if (!seenTwice.contains(x)) {\n                res.add(x);\n            }\n        }\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of strings, where each string consists of only digits, return a list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n",
    "task_id": "113",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n",
    "simplified_intent": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
    "snippet": [
      "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "ArrayList<String> res = new ArrayList<String>();\n        int n = 0;\n        int odd_count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            n = lst.get(i).length();\n            for (int j = 0; j < n; j++) {\n                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 == 1) {\n                    odd_count++;\n                }\n            }\n            res.add(String.valueOf(odd_count));\n            odd_count = 0;\n        }\n        return res;",
    "grade-0": {
      "execution": 0
    },
    "1": "ArrayList<String> res = new ArrayList<>();\n        for (String s : lst) {\n            if (s.matches(\"^\\\\d*$\")) {\n                res.add(Integer.toString(s.length()));\n            } else {\n                res.add(s);\n            }\n        }\n        return res;",
    "grade-1": {
      "execution": 0
    },
    "2": "int oddCount=0;\n        for(int i=0;i<lst.size();i++) {\n            String s = lst.get(i);\n            int n = s.length();\n            String nstr = String.valueOf(n);\n            String rd = null;\n            for(int j=0;j<s.length();j++) {\n                if(Character.isDigit(s.charAt(j))) {\n                    String nc = String.valueOf(s.charAt(j));\n                    nc = nc.length();\n                    String nstr = String.valueOf(nc);\n                    if(s.charAt(j)=='1') {\n                        if(s.charAt(j+1)=='1')\n                            oddCount+=n-1;\n                        else {\n                            oddCount+=n+1;\n                            rd = nstr;\n                        }\n                    }\n                }\n            }\n            if(rd == null) {\n                if(oddCount>=n+2) {\n                    rd = nstr;\n                }\n            }\n            ArrayList<String> odd = new ArrayList<>();\n            for(int k = 0;k<s.lenth();k++) {\n                if(Character.isDigit(s.charAt(k))) {\n                    String nc = String.valueOf(s.charAt(k));\n                    nc = nc.length();\n                    String nstr = String.valueOf(nc);\n                    if(s.charAt(k)=='1') {\n                        if(s.charAt(k+1)=='1') {\n                            odd.add(nstr);\n                        }\n                        else {\n                            odd.add(nstr);\n                            rd = nstr;\n                        }\n                    }\n                }\n            }\n            if(rd == null) {\n                if(odd.size()>=2) {\n                    rd = nstr;\n                }\n            }\n            ArrayList<String> odd2 = new ArrayList<>();\n            for(int k = 0;k<s.lenth();k++) {\n                if(Character.isDigit(s.charAt(k))) {\n                    String nc = String.valueOf(s.charAt(k));\n                    nc = nc.length();\n                    String nstr = String.valueOf(nc);\n                    if(s.charAt(k)=='1') {\n                        if(s.charAt(k+1)=='1') {\n                            odd2.add(nstr);\n                        }\n                        else {\n                            odd2.add(nstr);\n                            rd = nstr;\n                        }\n                    }\n                }\n            }\n            if(rd == null) {\n                if(odd2.size()>=2) {\n                    rd = nstr;\n                }\n            }\n            oddCount+=odd.size()-odd2.size();\n            odd.clear();\n            odd2.clear();\n        }\n        return odd;",
    "grade-2": {
      "execution": 0
    },
    "3": "// Good luck!\n        ArrayList<String> result = new ArrayList<String>();\n        for (String string : lst) {\n            int counter = 0;\n            for (int i = 0; i < string.length(); i++) {\n                if (Integer.parseInt(string.substring(i, i + 1)) % 2 != 0) {\n                    counter++;\n                }\n            }\n            result.add(\"the number of odd elements \" + counter + \"n the str\" + counter + \"ng \" + counter + \" of the \"\n                    + counter + \"nput.\");\n        }\n        return result;",
    "grade-3": {
      "execution": 1
    },
    "4": "ArrayList<String> out = new ArrayList<String>();\n        int count = 0;\n        for (String i : lst) {\n            for (int j = 0; j < i.length(); j++) {\n                if (i.charAt(j) % 2 == 1)\n                    count++;\n            }\n            out.add(i.replaceAll(\"i\", Integer.toString(count)));\n            count = 0;\n        }\n        return out;",
    "grade-4": {
      "execution": 0
    },
    "5": "int i = 0;\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (c % 2 == 1) {\n                    count++;\n                }\n            }\n            StringBuilder sb = new StringBuilder(\"the number of odd elements \");\n            sb.append(count);\n            sb.append(\"n the str\");\n            sb.append(count);\n            sb.append(\"ng \");\n            sb.append(count);\n            sb.append(\" of the \");\n            sb.append(count);\n            sb.append(\"nput.\");\n            lst.set(i, sb.toString());\n            i++;\n        }\n        return lst;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Add two numbers x and y\n    // >>> add(2, 3)\n    // 5\n    // >>> add(5, 7)\n    // 12\n    public static int add(int x, int y) {\n",
    "task_id": "53",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n",
    "simplified_intent": "Add two numbers x and y",
    "snippet": [
      "        return x + y;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return x+y;",
    "grade-0": {
      "execution": 1
    },
    "1": "return (x + y);",
    "grade-1": {
      "execution": 1
    },
    "2": "int sum = x + y;\n        System.out.println(\"Sum: \" + sum);\n        return sum;",
    "grade-2": {
      "execution": 1
    },
    "3": "if (y == 0) {\n            return x;\n        }\n        int carry = (x & y) << 1;\n        int sum = x ^ y;\n        return add(sum, carry);",
    "grade-3": {
      "execution": 1
    },
    "4": "// TODO\n        return (x+y);",
    "grade-4": {
      "execution": 1
    },
    "5": "// YOUR CODE HERE\n        return -1;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    public static String makePalindrome(String string) {\n",
    "task_id": "10",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n",
    "simplified_intent": "Test if given string is a palindrome",
    "snippet": [
      "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "String suffix = findLongestPalindrome(string);\n        if (suffix == null) {\n            return string;\n        }\n        return string.concat(findLongestPalindrome(String.valueOf(suffix.reverse()) + suffix.substring(0,\n            suffix.length() - suffix.indexOf(string)));",
    "grade-0": {
      "execution": 0
    },
    "1": "// Write your code here.\n        return null;",
    "grade-1": {
      "execution": 0
    },
    "2": "String result=\"\";\n        int i=0;\n        int length=string.length();\n        while(i<length/2){\n            String suffix= string.substring(i, i+1);\n            int suffix_length=suffix.length();\n            String reverse_suffix= new StringBuilder(suffix).reverse().toString();\n            String prefix= string.substring(0,i);\n            int prefix_length=prefix.length();\n            int palindrome_length=suffix_length+reverse_suffix.length();\n            if(palindrome_length<=prefix_length){\n                result=prefix+reverse_suffix;\n                i++;\n            }else{\n                result=suffix+reverse_suffix;\n                i+=palindrome_length-prefix_length;\n            }\n        }\n        return result;",
    "grade-2": {
      "execution": 0
    },
    "3": "if (string.length() == 0) {\n            return string;\n        }\n        int start = 0;\n        int end = string.length() - 1;\n        while (end >= 0) {\n            if (string.charAt(start) == string.charAt(end)) {\n                start += 1;\n            }\n            end -= 1;\n        }\n        if (start == string.length()) {\n            return string;\n        }\n        String suffix = string.substring(start);\n        String prefix = new StringBuilder(suffix).reverse().toString();\n        String middle = makePalindrome(string.substring(0, start));\n        return prefix + middle + suffix;",
    "grade-3": {
      "execution": 0
    },
    "4": "// >>> find_palindrome_suffix('baba')\n        // Pair['aba', 1]\n        // >>> find_palindrome_suffix('babab')\n        // Pair['babab', 0]\n        // >>> find_palindrome_suffix('babac')\n        // Pair['aba', 1]\n        Pair<String, Integer> palindromeSuffix = findPalindromeSuffix(string);\n        StringBuilder result = new StringBuilder(string);\n        String prefix = string.substring(0, palindromeSuffix.getValue1());\n        result.append(reverse(prefix));\n        return result.toString();",
    "grade-4": {
      "execution": 0
    },
    "5": "int k = 0;\n        for (int i = 0; i < string.length(); i++) {\n            String s = string.substring(i);\n            String s_reversed = new StringBuilder(s).reverse().toString();\n            if (s.equals(s_reversed)) {\n                k = i;\n                break;\n            }\n        }\n        String prefix = string.substring(0, k);\n        String prefix_reversed = new StringBuilder(prefix).reverse().toString();\n        return string + prefix_reversed;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public static String solve(String s) {\n",
    "task_id": "161",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n",
    "simplified_intent": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
    "snippet": [
      "        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// code here\n        s = s.replaceAll(\"[A-z]\",\"\").replaceAll(\"[^a-zA-Z]\",\"\");\n        if(s.isEmpty())\n            return s;\n        char[] ch = new char[s.length()];\n        for(int i = 0;i<ch.length;i++)\n            ch[i] = s.charAt(i);\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<ch.length;i++) {\n            if(ch[i]>='a' && ch[i]<='z'){\n                ch[i] = (char)ch[i]-'a' + 'A';\n            }\n            sb.append(ch[i]);\n        }\n        return sb.toString();",
    "grade-0": {
      "execution": 0
    },
    "1": "List<String> result = new ArrayList<>();\n        int len = s.length();\n        for(int i = 0 ; i < len ; ++i){\n            if(Character.isLetter(s.charAt(i))){\n                result.add(Character.toUpperCase(s.charAt(i)));\n            }\n            else{\n                result.add(s.charAt(i));\n            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for(int i = 0 ; i < len ; ++i){\n            String curr = result.get(i);\n            if(result.isEmpty()){\n                result.add(curr);\n            }\n            else{\n                if(i == 0){\n                    sb.append(curr);\n                }\n                else{\n                    int len2 = curr.length();\n                    int index1 = result.indexOf(curr);\n                    if(index1 < 0){\n                        result.add(curr);\n                    }\n                    else{\n                        if(index1 < len2){\n                            sb.append(curr);\n                            result.add(index1, len2);\n                        }\n                        else{\n                            result.add(index1);\n                            sb.append(curr);\n                        }\n                    }\n                }\n            }\n        }\n        return sb.toString();",
    "grade-1": {
      "execution": 0
    },
    "2": "if(s.isEmpty()) {\n            return \"\";\n        }\n        \n        Map<Character, Boolean> map = new HashMap<>();\n        for(int i = 0; i < s.length(); i++) {\n            if(!map.containsKey(s.charAt(i))) {\n                map.put(s.charAt(i), true);\n            } else {\n                map.put(s.charAt(i), !map.get(s.charAt(i))); \n            }\n        }\n        \n        StringBuilder builder = new StringBuilder();\n        for(Map.Entry<Character, Boolean> entry : map.entrySet()) {\n            if(entry.getValue()) {\n                builder.append(entry.getKey());\n            }\n        }\n        return builder.toString();",
    "grade-2": {
      "execution": 0
    },
    "3": "StringBuilder sb = new StringBuilder();\n        boolean noLetters = true;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                sb.append(Character.toUpperCase(s.charAt(i)));\n                noLetters = false;\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        if (noLetters) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
    "grade-3": {
      "execution": 0
    },
    "4": "// TODO: add your code here\n        return null;",
    "grade-4": {
      "execution": 0
    },
    "5": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.toString().equals(s)) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of positive integers x. return a sorted list of all \n    // elements that hasn't any even digit.\n    // Note: Returned list should be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    // []\n    public static ArrayList<Integer> uniqueDigits(ArrayList<Integer> x) {\n",
    "task_id": "104",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n",
    "simplified_intent": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
    "snippet": [
      "        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "// TODO: fill this in",
    "grade-0": {
      "execution": 0
    },
    "1": "Set<Integer> digits = new HashSet<>();\n        for( int i : x )\n            digits.add(i);\n        ArrayList<Integer> result = new ArrayList<>();\n        for( int i : digits )\n            if( x.indexOf(i) < x.indexOf( x.stream().filter(i -> i % 2 == 0).count() ) )\n                result.add(i);\n        return result;",
    "grade-1": {
      "execution": 0
    },
    "2": "ArrayList<Integer> y = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        x.forEach(y -> set.add(y));\n        Set<Integer> set1 = new HashSet<Integer>();\n        set1.addAll(set);\n        for (Integer i : set1) {\n            while (true) {\n                if (set1.contains(i)) {\n                    set1.remove(i);\n                } else {\n                    set.add(i);\n                    break;\n                }\n            }\n        }\n        System.out.println(set);\n        System.out.println(set1);\n        return set;",
    "grade-2": {
      "execution": 0
    },
    "3": "ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> alreadyExists = new ArrayList<Integer>();\n        boolean flag;\n        int currentElement;\n        for (int i = 0; i < x.size(); i++) {\n            flag = true;\n            currentElement = x.get(i);\n            if (alreadyExists.contains(currentElement)) {\n                continue;\n            }\n            for (int j = 0; j < result.size(); j++) {\n                if (result.get(j) == currentElement) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                if (hasEvenDigit(currentElement)) {\n                    continue;\n                }\n                result.add(currentElement);\n                alreadyExists.add(currentElement);\n            }\n        }\n        Collections.sort(result);\n        return result;",
    "grade-3": {
      "execution": 0
    },
    "4": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            int n = x.get(i);\n            while (n > 0) {\n                int digit = n % 10;\n                if (digit % 2 == 0) {\n                    break;\n                }\n                n /= 10;\n            }\n            if (n == 0) {\n                ret.add(x.get(i));\n            }\n        }\n        Collections.sort(ret);\n        return ret;",
    "grade-4": {
      "execution": 1
    },
    "5": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            String str = Integer.toString(x.get(i));\n            if (str.contains(\"2\") || str.contains(\"4\") || str.contains(\"6\") || str.contains(\"8\") || str.contains(\"0\")) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;",
    "grade-5": {
      "execution": 1
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string representing a space separated lowercase letters, return a dictionary\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer> histogram(String test) {\n",
    "task_id": "111",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n",
    "simplified_intent": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
    "snippet": [
      "        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "HashMap<String,Integer> hashMap = new HashMap<>();\n        int maxCount = 0;\n        for(int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if(hashMap.containsKey(c))\n                hashMap.put(c, hashMap.get(c)+1);\n            else\n                hashMap.put(c, 1);\n            if(hashMap.get(c) > maxCount) {\n                maxCount = hashMap.get(c);\n            }\n        }\n        return hashMap;",
    "grade-0": {
      "execution": 0
    },
    "1": "HashMap<String,Integer> map = new HashMap<>();\n\n        String[] parts = test.split(\" \");\n\n        for (int i = 0; i < parts.length; ++i) {\n            String letter = parts[i];\n\n            if (!map.containsKey(letter)) {\n                map.put(letter, 1);\n            } else {\n                int count = map.get(letter);\n                map.put(letter, count + 1);\n            }\n        }\n\n        return map;",
    "grade-1": {
      "execution": 0
    },
    "2": "if (test.isEmpty()) return new HashMap<>();\n        HashMap<String,Integer> map = new HashMap<>();\n        String[] split = test.split(\" \");\n        for (int i = 0; i < split.length; i++) {\n            String key = split[i];\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        return map;",
    "grade-2": {
      "execution": 0
    },
    "3": "HashMap<String,Integer> map = new HashMap<String,Integer>();\n        String[] letters = test.split(\" \");\n        int max = 0;\n        for (String letter : letters) {\n            if (!map.containsKey(letter)) {\n                map.put(letter, 1);\n            } else {\n                map.put(letter, map.get(letter) + 1);\n            }\n            max = Math.max(max, map.get(letter));\n        }\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n        for (String letter : map.keySet()) {\n            if (map.get(letter) == max) {\n                res.put(letter, max);\n            }\n        }\n        return res;",
    "grade-3": {
      "execution": 0
    },
    "4": "// Write your code here\n        HashMap<String,Integer> counts = new HashMap<String,Integer>();\n        for (String s : test.split(\" \")) {\n            if (counts.containsKey(s))\n                counts.put(s, counts.get(s) + 1);\n            else\n                counts.put(s, 1);\n        }\n        return counts;",
    "grade-4": {
      "execution": 0
    },
    "5": "String[] letters = test.split(\" \");\n        HashMap<String,Integer> counts = new HashMap<String,Integer>();\n        for (String let : letters) {\n            if (counts.containsKey(let)) {\n                counts.put(let, counts.get(let) + 1);\n            } else {\n                counts.put(let, 1);\n            }\n        }\n        int maxCount = 0;\n        for (int count : counts.values()) {\n            if (count > maxCount) {\n                maxCount = count;\n            }\n        }\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;",
    "grade-5": {
      "execution": 0
    }
  },
  {
    "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input list of strings only for ones that contain given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n",
    "task_id": "7",
    "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n",
    "simplified_intent": "Filter an input list of strings only for ones that contain given substring",
    "snippet": [
      "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}"
    ],
    "sample_from": {
      "0": "incoder",
      "1": "incoder",
      "2": "incoder",
      "3": "codex",
      "4": "codex",
      "5": "codex"
    },
    "0": "return strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toCollection(ArrayList::new));",
    "grade-0": {
      "execution": 1
    },
    "1": "ArrayList<String> answer = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                answer.add(str);\n            }\n        }\n        return answer;",
    "grade-1": {
      "execution": 1
    },
    "2": "ArrayList<String> result = new ArrayList<>();\n        strings.stream().filter(s -> s.contains(substring)).forEach(result ::add);\n        return result;",
    "grade-2": {
      "execution": 1
    },
    "3": "ArrayList<String> matches = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                matches.add(str);\n            }\n        }\n        return matches;",
    "grade-3": {
      "execution": 1
    },
    "4": "// TODO: Implement me\n        return null;",
    "grade-4": {
      "execution": 0
    },
    "5": "ArrayList<String> results = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                results.add(s);\n            }\n        }\n        return results;",
    "grade-5": {
      "execution": 1
    }
  }
]